
example_for_pipeline.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d10  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003dd0  08003dd0  00004dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ea0  08003ea0  00005080  2**0
                  CONTENTS
  4 .ARM          00000000  08003ea0  08003ea0  00005080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ea0  08003ea0  00005080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ea0  08003ea0  00004ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ea4  08003ea4  00004ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08003ea8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000080  08003f28  00005080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08003f28  0000530c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c46e  00000000  00000000  000050a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed0  00000000  00000000  00011516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  000133e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007fb  00000000  00000000  00013e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015763  00000000  00000000  0001465b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db15  00000000  00000000  00029dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008233f  00000000  00000000  000378d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9c12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd4  00000000  00000000  000b9c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000bc82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003db8 	.word	0x08003db8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	08003db8 	.word	0x08003db8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fd3c 	bl	8000cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f83c 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f8e8 	bl	8000414 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000244:	f000 f876 	bl	8000334 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000248:	2000      	movs	r0, #0
 800024a:	f000 fae3 	bl	8000814 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800024e:	2101      	movs	r1, #1
 8000250:	2000      	movs	r0, #0
 8000252:	f000 fbb1 	bl	80009b8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000256:	4b15      	ldr	r3, [pc, #84]	@ (80002ac <main+0x78>)
 8000258:	22e1      	movs	r2, #225	@ 0xe1
 800025a:	0252      	lsls	r2, r2, #9
 800025c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800025e:	4b13      	ldr	r3, [pc, #76]	@ (80002ac <main+0x78>)
 8000260:	2200      	movs	r2, #0
 8000262:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000264:	4b11      	ldr	r3, [pc, #68]	@ (80002ac <main+0x78>)
 8000266:	2200      	movs	r2, #0
 8000268:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800026a:	4b10      	ldr	r3, [pc, #64]	@ (80002ac <main+0x78>)
 800026c:	2200      	movs	r2, #0
 800026e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000270:	4b0e      	ldr	r3, [pc, #56]	@ (80002ac <main+0x78>)
 8000272:	2200      	movs	r2, #0
 8000274:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000276:	4b0d      	ldr	r3, [pc, #52]	@ (80002ac <main+0x78>)
 8000278:	0019      	movs	r1, r3
 800027a:	2000      	movs	r0, #0
 800027c:	f000 fc38 	bl	8000af0 <BSP_COM_Init>
 8000280:	1e03      	subs	r3, r0, #0
 8000282:	d001      	beq.n	8000288 <main+0x54>
  {
    Error_Handler();
 8000284:	f000 f950 	bl	8000528 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000288:	4b09      	ldr	r3, [pc, #36]	@ (80002b0 <main+0x7c>)
 800028a:	0018      	movs	r0, r3
 800028c:	f002 fef6 	bl	800307c <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000290:	2000      	movs	r0, #0
 8000292:	f000 fb29 	bl	80008e8 <BSP_LED_On>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000296:	4b07      	ldr	r3, [pc, #28]	@ (80002b4 <main+0x80>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	2b01      	cmp	r3, #1
 800029c:	d1fb      	bne.n	8000296 <main+0x62>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 800029e:	4b05      	ldr	r3, [pc, #20]	@ (80002b4 <main+0x80>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 80002a4:	2000      	movs	r0, #0
 80002a6:	f000 fb5d 	bl	8000964 <BSP_LED_Toggle>
    if (BspButtonState == BUTTON_PRESSED)
 80002aa:	e7f4      	b.n	8000296 <main+0x62>
 80002ac:	2000009c 	.word	0x2000009c
 80002b0:	08003dd0 	.word	0x08003dd0
 80002b4:	200000ac 	.word	0x200000ac

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b08d      	sub	sp, #52	@ 0x34
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	2414      	movs	r4, #20
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	0018      	movs	r0, r3
 80002c4:	231c      	movs	r3, #28
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f002 ff33 	bl	8003134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ce:	003b      	movs	r3, r7
 80002d0:	0018      	movs	r0, r3
 80002d2:	2314      	movs	r3, #20
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f002 ff2c 	bl	8003134 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	2201      	movs	r2, #1
 80002e0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e2:	193b      	adds	r3, r7, r4
 80002e4:	2280      	movs	r2, #128	@ 0x80
 80002e6:	0252      	lsls	r2, r2, #9
 80002e8:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	193b      	adds	r3, r7, r4
 80002ec:	0018      	movs	r0, r3
 80002ee:	f001 fcef 	bl	8001cd0 <HAL_RCC_OscConfig>
 80002f2:	1e03      	subs	r3, r0, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x42>
  {
    Error_Handler();
 80002f6:	f000 f917 	bl	8000528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fa:	003b      	movs	r3, r7
 80002fc:	2207      	movs	r2, #7
 80002fe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000300:	003b      	movs	r3, r7
 8000302:	2201      	movs	r2, #1
 8000304:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000306:	003b      	movs	r3, r7
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800030c:	003b      	movs	r3, r7
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000312:	003b      	movs	r3, r7
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000318:	003b      	movs	r3, r7
 800031a:	2101      	movs	r1, #1
 800031c:	0018      	movs	r0, r3
 800031e:	f001 febb 	bl	8002098 <HAL_RCC_ClockConfig>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000326:	f000 f8ff 	bl	8000528 <Error_Handler>
  }
}
 800032a:	46c0      	nop			@ (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	b00d      	add	sp, #52	@ 0x34
 8000330:	bd90      	pop	{r4, r7, pc}
	...

08000334 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	0018      	movs	r0, r3
 800033e:	230c      	movs	r3, #12
 8000340:	001a      	movs	r2, r3
 8000342:	2100      	movs	r1, #0
 8000344:	f002 fef6 	bl	8003134 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000348:	4b2f      	ldr	r3, [pc, #188]	@ (8000408 <MX_ADC1_Init+0xd4>)
 800034a:	4a30      	ldr	r2, [pc, #192]	@ (800040c <MX_ADC1_Init+0xd8>)
 800034c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800034e:	4b2e      	ldr	r3, [pc, #184]	@ (8000408 <MX_ADC1_Init+0xd4>)
 8000350:	2280      	movs	r2, #128	@ 0x80
 8000352:	05d2      	lsls	r2, r2, #23
 8000354:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000356:	4b2c      	ldr	r3, [pc, #176]	@ (8000408 <MX_ADC1_Init+0xd4>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800035c:	4b2a      	ldr	r3, [pc, #168]	@ (8000408 <MX_ADC1_Init+0xd4>)
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8000362:	4b29      	ldr	r3, [pc, #164]	@ (8000408 <MX_ADC1_Init+0xd4>)
 8000364:	2280      	movs	r2, #128	@ 0x80
 8000366:	0612      	lsls	r2, r2, #24
 8000368:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800036a:	4b27      	ldr	r3, [pc, #156]	@ (8000408 <MX_ADC1_Init+0xd4>)
 800036c:	2204      	movs	r2, #4
 800036e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000370:	4b25      	ldr	r3, [pc, #148]	@ (8000408 <MX_ADC1_Init+0xd4>)
 8000372:	2200      	movs	r2, #0
 8000374:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000376:	4b24      	ldr	r3, [pc, #144]	@ (8000408 <MX_ADC1_Init+0xd4>)
 8000378:	2200      	movs	r2, #0
 800037a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800037c:	4b22      	ldr	r3, [pc, #136]	@ (8000408 <MX_ADC1_Init+0xd4>)
 800037e:	2201      	movs	r2, #1
 8000380:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000382:	4b21      	ldr	r3, [pc, #132]	@ (8000408 <MX_ADC1_Init+0xd4>)
 8000384:	2201      	movs	r2, #1
 8000386:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000388:	4b1f      	ldr	r3, [pc, #124]	@ (8000408 <MX_ADC1_Init+0xd4>)
 800038a:	2200      	movs	r2, #0
 800038c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800038e:	4b1e      	ldr	r3, [pc, #120]	@ (8000408 <MX_ADC1_Init+0xd4>)
 8000390:	2200      	movs	r2, #0
 8000392:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000394:	4b1c      	ldr	r3, [pc, #112]	@ (8000408 <MX_ADC1_Init+0xd4>)
 8000396:	222c      	movs	r2, #44	@ 0x2c
 8000398:	2100      	movs	r1, #0
 800039a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800039c:	4b1a      	ldr	r3, [pc, #104]	@ (8000408 <MX_ADC1_Init+0xd4>)
 800039e:	2200      	movs	r2, #0
 80003a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80003a2:	4b19      	ldr	r3, [pc, #100]	@ (8000408 <MX_ADC1_Init+0xd4>)
 80003a4:	2207      	movs	r2, #7
 80003a6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80003a8:	4b17      	ldr	r3, [pc, #92]	@ (8000408 <MX_ADC1_Init+0xd4>)
 80003aa:	223c      	movs	r2, #60	@ 0x3c
 80003ac:	2100      	movs	r1, #0
 80003ae:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80003b0:	4b15      	ldr	r3, [pc, #84]	@ (8000408 <MX_ADC1_Init+0xd4>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003b6:	4b14      	ldr	r3, [pc, #80]	@ (8000408 <MX_ADC1_Init+0xd4>)
 80003b8:	0018      	movs	r0, r3
 80003ba:	f000 fdf7 	bl	8000fac <HAL_ADC_Init>
 80003be:	1e03      	subs	r3, r0, #0
 80003c0:	d001      	beq.n	80003c6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80003c2:	f000 f8b1 	bl	8000528 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2201      	movs	r2, #1
 80003ca:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2201      	movs	r2, #1
 80003d0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003d2:	1d3a      	adds	r2, r7, #4
 80003d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000408 <MX_ADC1_Init+0xd4>)
 80003d6:	0011      	movs	r1, r2
 80003d8:	0018      	movs	r0, r3
 80003da:	f000 ff8d 	bl	80012f8 <HAL_ADC_ConfigChannel>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80003e2:	f000 f8a1 	bl	8000528 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	4a09      	ldr	r2, [pc, #36]	@ (8000410 <MX_ADC1_Init+0xdc>)
 80003ea:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ec:	1d3a      	adds	r2, r7, #4
 80003ee:	4b06      	ldr	r3, [pc, #24]	@ (8000408 <MX_ADC1_Init+0xd4>)
 80003f0:	0011      	movs	r1, r2
 80003f2:	0018      	movs	r0, r3
 80003f4:	f000 ff80 	bl	80012f8 <HAL_ADC_ConfigChannel>
 80003f8:	1e03      	subs	r3, r0, #0
 80003fa:	d001      	beq.n	8000400 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80003fc:	f000 f894 	bl	8000528 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000400:	46c0      	nop			@ (mov r8, r8)
 8000402:	46bd      	mov	sp, r7
 8000404:	b004      	add	sp, #16
 8000406:	bd80      	pop	{r7, pc}
 8000408:	200000b0 	.word	0x200000b0
 800040c:	40012400 	.word	0x40012400
 8000410:	04000002 	.word	0x04000002

08000414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b08b      	sub	sp, #44	@ 0x2c
 8000418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	2414      	movs	r4, #20
 800041c:	193b      	adds	r3, r7, r4
 800041e:	0018      	movs	r0, r3
 8000420:	2314      	movs	r3, #20
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f002 fe85 	bl	8003134 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042a:	4b33      	ldr	r3, [pc, #204]	@ (80004f8 <MX_GPIO_Init+0xe4>)
 800042c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800042e:	4b32      	ldr	r3, [pc, #200]	@ (80004f8 <MX_GPIO_Init+0xe4>)
 8000430:	2104      	movs	r1, #4
 8000432:	430a      	orrs	r2, r1
 8000434:	635a      	str	r2, [r3, #52]	@ 0x34
 8000436:	4b30      	ldr	r3, [pc, #192]	@ (80004f8 <MX_GPIO_Init+0xe4>)
 8000438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800043a:	2204      	movs	r2, #4
 800043c:	4013      	ands	r3, r2
 800043e:	613b      	str	r3, [r7, #16]
 8000440:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000442:	4b2d      	ldr	r3, [pc, #180]	@ (80004f8 <MX_GPIO_Init+0xe4>)
 8000444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000446:	4b2c      	ldr	r3, [pc, #176]	@ (80004f8 <MX_GPIO_Init+0xe4>)
 8000448:	2120      	movs	r1, #32
 800044a:	430a      	orrs	r2, r1
 800044c:	635a      	str	r2, [r3, #52]	@ 0x34
 800044e:	4b2a      	ldr	r3, [pc, #168]	@ (80004f8 <MX_GPIO_Init+0xe4>)
 8000450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000452:	2220      	movs	r2, #32
 8000454:	4013      	ands	r3, r2
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045a:	4b27      	ldr	r3, [pc, #156]	@ (80004f8 <MX_GPIO_Init+0xe4>)
 800045c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800045e:	4b26      	ldr	r3, [pc, #152]	@ (80004f8 <MX_GPIO_Init+0xe4>)
 8000460:	2101      	movs	r1, #1
 8000462:	430a      	orrs	r2, r1
 8000464:	635a      	str	r2, [r3, #52]	@ 0x34
 8000466:	4b24      	ldr	r3, [pc, #144]	@ (80004f8 <MX_GPIO_Init+0xe4>)
 8000468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800046a:	2201      	movs	r2, #1
 800046c:	4013      	ands	r3, r2
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000472:	4b21      	ldr	r3, [pc, #132]	@ (80004f8 <MX_GPIO_Init+0xe4>)
 8000474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000476:	4b20      	ldr	r3, [pc, #128]	@ (80004f8 <MX_GPIO_Init+0xe4>)
 8000478:	2102      	movs	r1, #2
 800047a:	430a      	orrs	r2, r1
 800047c:	635a      	str	r2, [r3, #52]	@ 0x34
 800047e:	4b1e      	ldr	r3, [pc, #120]	@ (80004f8 <MX_GPIO_Init+0xe4>)
 8000480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000482:	2202      	movs	r2, #2
 8000484:	4013      	ands	r3, r2
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(x_min_GPIO_Port, x_min_Pin, GPIO_PIN_RESET);
 800048a:	23a0      	movs	r3, #160	@ 0xa0
 800048c:	05db      	lsls	r3, r3, #23
 800048e:	2200      	movs	r2, #0
 8000490:	2180      	movs	r1, #128	@ 0x80
 8000492:	0018      	movs	r0, r3
 8000494:	f001 fbe4 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, x_plus_Pin|y_min_Pin|y_plus_Pin, GPIO_PIN_RESET);
 8000498:	4b18      	ldr	r3, [pc, #96]	@ (80004fc <MX_GPIO_Init+0xe8>)
 800049a:	2200      	movs	r2, #0
 800049c:	2107      	movs	r1, #7
 800049e:	0018      	movs	r0, r3
 80004a0:	f001 fbde 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : x_min_Pin */
  GPIO_InitStruct.Pin = x_min_Pin;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2280      	movs	r2, #128	@ 0x80
 80004a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	193b      	adds	r3, r7, r4
 80004ac:	2201      	movs	r2, #1
 80004ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2200      	movs	r2, #0
 80004ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(x_min_GPIO_Port, &GPIO_InitStruct);
 80004bc:	193a      	adds	r2, r7, r4
 80004be:	23a0      	movs	r3, #160	@ 0xa0
 80004c0:	05db      	lsls	r3, r3, #23
 80004c2:	0011      	movs	r1, r2
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 fa59 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : x_plus_Pin y_min_Pin y_plus_Pin */
  GPIO_InitStruct.Pin = x_plus_Pin|y_min_Pin|y_plus_Pin;
 80004ca:	0021      	movs	r1, r4
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2207      	movs	r2, #7
 80004d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2201      	movs	r2, #1
 80004d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2200      	movs	r2, #0
 80004e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	4a05      	ldr	r2, [pc, #20]	@ (80004fc <MX_GPIO_Init+0xe8>)
 80004e8:	0019      	movs	r1, r3
 80004ea:	0010      	movs	r0, r2
 80004ec:	f001 fa46 	bl	800197c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004f0:	46c0      	nop			@ (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b00b      	add	sp, #44	@ 0x2c
 80004f6:	bd90      	pop	{r4, r7, pc}
 80004f8:	40021000 	.word	0x40021000
 80004fc:	50000400 	.word	0x50000400

08000500 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	0002      	movs	r2, r0
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	701a      	strb	r2, [r3, #0]
  if (Button == BUTTON_USER)
 800050c:	1dfb      	adds	r3, r7, #7
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d102      	bne.n	800051a <BSP_PB_Callback+0x1a>
  {
    BspButtonState = BUTTON_PRESSED;
 8000514:	4b03      	ldr	r3, [pc, #12]	@ (8000524 <BSP_PB_Callback+0x24>)
 8000516:	2201      	movs	r2, #1
 8000518:	601a      	str	r2, [r3, #0]
  }
}
 800051a:	46c0      	nop			@ (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	b002      	add	sp, #8
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			@ (mov r8, r8)
 8000524:	200000ac 	.word	0x200000ac

08000528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800052c:	b672      	cpsid	i
}
 800052e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000530:	46c0      	nop			@ (mov r8, r8)
 8000532:	e7fd      	b.n	8000530 <Error_Handler+0x8>

08000534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053a:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <HAL_MspInit+0x44>)
 800053c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800053e:	4b0e      	ldr	r3, [pc, #56]	@ (8000578 <HAL_MspInit+0x44>)
 8000540:	2101      	movs	r1, #1
 8000542:	430a      	orrs	r2, r1
 8000544:	641a      	str	r2, [r3, #64]	@ 0x40
 8000546:	4b0c      	ldr	r3, [pc, #48]	@ (8000578 <HAL_MspInit+0x44>)
 8000548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800054a:	2201      	movs	r2, #1
 800054c:	4013      	ands	r3, r2
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <HAL_MspInit+0x44>)
 8000554:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000556:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <HAL_MspInit+0x44>)
 8000558:	2180      	movs	r1, #128	@ 0x80
 800055a:	0549      	lsls	r1, r1, #21
 800055c:	430a      	orrs	r2, r1
 800055e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000560:	4b05      	ldr	r3, [pc, #20]	@ (8000578 <HAL_MspInit+0x44>)
 8000562:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000564:	2380      	movs	r3, #128	@ 0x80
 8000566:	055b      	lsls	r3, r3, #21
 8000568:	4013      	ands	r3, r2
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	40021000 	.word	0x40021000

0800057c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b091      	sub	sp, #68	@ 0x44
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	232c      	movs	r3, #44	@ 0x2c
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	0018      	movs	r0, r3
 800058a:	2314      	movs	r3, #20
 800058c:	001a      	movs	r2, r3
 800058e:	2100      	movs	r1, #0
 8000590:	f002 fdd0 	bl	8003134 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000594:	2410      	movs	r4, #16
 8000596:	193b      	adds	r3, r7, r4
 8000598:	0018      	movs	r0, r3
 800059a:	231c      	movs	r3, #28
 800059c:	001a      	movs	r2, r3
 800059e:	2100      	movs	r1, #0
 80005a0:	f002 fdc8 	bl	8003134 <memset>
  if(hadc->Instance==ADC1)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a1f      	ldr	r2, [pc, #124]	@ (8000628 <HAL_ADC_MspInit+0xac>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d138      	bne.n	8000620 <HAL_ADC_MspInit+0xa4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005ae:	193b      	adds	r3, r7, r4
 80005b0:	2220      	movs	r2, #32
 80005b2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	2200      	movs	r2, #0
 80005b8:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 fef9 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 80005c6:	f7ff ffaf 	bl	8000528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005ca:	4b18      	ldr	r3, [pc, #96]	@ (800062c <HAL_ADC_MspInit+0xb0>)
 80005cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005ce:	4b17      	ldr	r3, [pc, #92]	@ (800062c <HAL_ADC_MspInit+0xb0>)
 80005d0:	2180      	movs	r1, #128	@ 0x80
 80005d2:	0349      	lsls	r1, r1, #13
 80005d4:	430a      	orrs	r2, r1
 80005d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80005d8:	4b14      	ldr	r3, [pc, #80]	@ (800062c <HAL_ADC_MspInit+0xb0>)
 80005da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005dc:	2380      	movs	r3, #128	@ 0x80
 80005de:	035b      	lsls	r3, r3, #13
 80005e0:	4013      	ands	r3, r2
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <HAL_ADC_MspInit+0xb0>)
 80005e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005ea:	4b10      	ldr	r3, [pc, #64]	@ (800062c <HAL_ADC_MspInit+0xb0>)
 80005ec:	2101      	movs	r1, #1
 80005ee:	430a      	orrs	r2, r1
 80005f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80005f2:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <HAL_ADC_MspInit+0xb0>)
 80005f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005f6:	2201      	movs	r2, #1
 80005f8:	4013      	ands	r3, r2
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005fe:	212c      	movs	r1, #44	@ 0x2c
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2203      	movs	r2, #3
 8000604:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2203      	movs	r2, #3
 800060a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	187a      	adds	r2, r7, r1
 8000614:	23a0      	movs	r3, #160	@ 0xa0
 8000616:	05db      	lsls	r3, r3, #23
 8000618:	0011      	movs	r1, r2
 800061a:	0018      	movs	r0, r3
 800061c:	f001 f9ae 	bl	800197c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000620:	46c0      	nop			@ (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b011      	add	sp, #68	@ 0x44
 8000626:	bd90      	pop	{r4, r7, pc}
 8000628:	40012400 	.word	0x40012400
 800062c:	40021000 	.word	0x40021000

08000630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	e7fd      	b.n	8000634 <NMI_Handler+0x4>

08000638 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063c:	46c0      	nop			@ (mov r8, r8)
 800063e:	e7fd      	b.n	800063c <HardFault_Handler+0x4>

08000640 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000644:	46c0      	nop			@ (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000658:	f000 fb8e 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800065c:	46c0      	nop			@ (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000666:	2000      	movs	r0, #0
 8000668:	f000 fa2a 	bl	8000ac0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800066c:	46c0      	nop			@ (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	b086      	sub	sp, #24
 8000676:	af00      	add	r7, sp, #0
 8000678:	60f8      	str	r0, [r7, #12]
 800067a:	60b9      	str	r1, [r7, #8]
 800067c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	e00a      	b.n	800069a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000684:	e000      	b.n	8000688 <_read+0x16>
 8000686:	bf00      	nop
 8000688:	0001      	movs	r1, r0
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	1c5a      	adds	r2, r3, #1
 800068e:	60ba      	str	r2, [r7, #8]
 8000690:	b2ca      	uxtb	r2, r1
 8000692:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	3301      	adds	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
 800069a:	697a      	ldr	r2, [r7, #20]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	429a      	cmp	r2, r3
 80006a0:	dbf0      	blt.n	8000684 <_read+0x12>
  }

  return len;
 80006a2:	687b      	ldr	r3, [r7, #4]
}
 80006a4:	0018      	movs	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b006      	add	sp, #24
 80006aa:	bd80      	pop	{r7, pc}

080006ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	e009      	b.n	80006d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	1c5a      	adds	r2, r3, #1
 80006c2:	60ba      	str	r2, [r7, #8]
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	0018      	movs	r0, r3
 80006c8:	f000 fa7a 	bl	8000bc0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	3301      	adds	r3, #1
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	697a      	ldr	r2, [r7, #20]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	dbf1      	blt.n	80006be <_write+0x12>
  }
  return len;
 80006da:	687b      	ldr	r3, [r7, #4]
}
 80006dc:	0018      	movs	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	b006      	add	sp, #24
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <_close>:

int _close(int file)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	425b      	negs	r3, r3
}
 80006f0:	0018      	movs	r0, r3
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b002      	add	sp, #8
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	2280      	movs	r2, #128	@ 0x80
 8000706:	0192      	lsls	r2, r2, #6
 8000708:	605a      	str	r2, [r3, #4]
  return 0;
 800070a:	2300      	movs	r3, #0
}
 800070c:	0018      	movs	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	b002      	add	sp, #8
 8000712:	bd80      	pop	{r7, pc}

08000714 <_isatty>:

int _isatty(int file)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800071c:	2301      	movs	r3, #1
}
 800071e:	0018      	movs	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	b002      	add	sp, #8
 8000724:	bd80      	pop	{r7, pc}

08000726 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b084      	sub	sp, #16
 800072a:	af00      	add	r7, sp, #0
 800072c:	60f8      	str	r0, [r7, #12]
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000732:	2300      	movs	r3, #0
}
 8000734:	0018      	movs	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	b004      	add	sp, #16
 800073a:	bd80      	pop	{r7, pc}

0800073c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000744:	4a14      	ldr	r2, [pc, #80]	@ (8000798 <_sbrk+0x5c>)
 8000746:	4b15      	ldr	r3, [pc, #84]	@ (800079c <_sbrk+0x60>)
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000750:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <_sbrk+0x64>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d102      	bne.n	800075e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000758:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <_sbrk+0x64>)
 800075a:	4a12      	ldr	r2, [pc, #72]	@ (80007a4 <_sbrk+0x68>)
 800075c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <_sbrk+0x64>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	18d3      	adds	r3, r2, r3
 8000766:	693a      	ldr	r2, [r7, #16]
 8000768:	429a      	cmp	r2, r3
 800076a:	d207      	bcs.n	800077c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800076c:	f002 fd38 	bl	80031e0 <__errno>
 8000770:	0003      	movs	r3, r0
 8000772:	220c      	movs	r2, #12
 8000774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000776:	2301      	movs	r3, #1
 8000778:	425b      	negs	r3, r3
 800077a:	e009      	b.n	8000790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800077c:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <_sbrk+0x64>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000782:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <_sbrk+0x64>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	18d2      	adds	r2, r2, r3
 800078a:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <_sbrk+0x64>)
 800078c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800078e:	68fb      	ldr	r3, [r7, #12]
}
 8000790:	0018      	movs	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	b006      	add	sp, #24
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20003000 	.word	0x20003000
 800079c:	00000400 	.word	0x00000400
 80007a0:	20000114 	.word	0x20000114
 80007a4:	20000310 	.word	0x20000310

080007a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007ac:	4b03      	ldr	r3, [pc, #12]	@ (80007bc <SystemInit+0x14>)
 80007ae:	2280      	movs	r2, #128	@ 0x80
 80007b0:	0512      	lsls	r2, r2, #20
 80007b2:	609a      	str	r2, [r3, #8]
#endif
}
 80007b4:	46c0      	nop			@ (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007c0:	480d      	ldr	r0, [pc, #52]	@ (80007f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007c4:	f7ff fff0 	bl	80007a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007ca:	e003      	b.n	80007d4 <LoopCopyDataInit>

080007cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007cc:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80007ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007d2:	3104      	adds	r1, #4

080007d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007d4:	480a      	ldr	r0, [pc, #40]	@ (8000800 <LoopForever+0xa>)
  ldr r3, =_edata
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <LoopForever+0xe>)
  adds r2, r0, r1
 80007d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007dc:	d3f6      	bcc.n	80007cc <CopyDataInit>
  ldr r2, =_sbss
 80007de:	4a0a      	ldr	r2, [pc, #40]	@ (8000808 <LoopForever+0x12>)
  b LoopFillZerobss
 80007e0:	e002      	b.n	80007e8 <LoopFillZerobss>

080007e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  str  r3, [r2]
 80007e4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e6:	3204      	adds	r2, #4

080007e8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80007e8:	4b08      	ldr	r3, [pc, #32]	@ (800080c <LoopForever+0x16>)
  cmp r2, r3
 80007ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007ec:	d3f9      	bcc.n	80007e2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80007ee:	f002 fcfd 	bl	80031ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007f2:	f7ff fd1f 	bl	8000234 <main>

080007f6 <LoopForever>:

LoopForever:
    b LoopForever
 80007f6:	e7fe      	b.n	80007f6 <LoopForever>
  ldr   r0, =_estack
 80007f8:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 80007fc:	08003ea8 	.word	0x08003ea8
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000804:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8000808:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 800080c:	2000030c 	.word	0x2000030c

08000810 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC1_IRQHandler>
	...

08000814 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	@ 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	0002      	movs	r2, r0
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 8000824:	1dfb      	adds	r3, r7, #7
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d007      	beq.n	800083c <BSP_LED_Init+0x28>
      && (Led != LED2))
 800082c:	1dfb      	adds	r3, r7, #7
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d003      	beq.n	800083c <BSP_LED_Init+0x28>
#else
  if (Led != LED4)
#endif /* defined (USE_NUCLEO_64) */
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000834:	2302      	movs	r3, #2
 8000836:	425b      	negs	r3, r3
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
 800083a:	e04a      	b.n	80008d2 <BSP_LED_Init+0xbe>
  }
  else
  {
    /* Enable the GPIO LED Clock */
#if defined (USE_NUCLEO_64)
    if (Led == LED1)
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d10c      	bne.n	800085e <BSP_LED_Init+0x4a>
    {
      LED1_GPIO_CLK_ENABLE();
 8000844:	4b25      	ldr	r3, [pc, #148]	@ (80008dc <BSP_LED_Init+0xc8>)
 8000846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000848:	4b24      	ldr	r3, [pc, #144]	@ (80008dc <BSP_LED_Init+0xc8>)
 800084a:	2101      	movs	r1, #1
 800084c:	430a      	orrs	r2, r1
 800084e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000850:	4b22      	ldr	r3, [pc, #136]	@ (80008dc <BSP_LED_Init+0xc8>)
 8000852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000854:	2201      	movs	r2, #1
 8000856:	4013      	ands	r3, r2
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	e00b      	b.n	8000876 <BSP_LED_Init+0x62>
    }
    else
    {
      LED2_GPIO_CLK_ENABLE();
 800085e:	4b1f      	ldr	r3, [pc, #124]	@ (80008dc <BSP_LED_Init+0xc8>)
 8000860:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000862:	4b1e      	ldr	r3, [pc, #120]	@ (80008dc <BSP_LED_Init+0xc8>)
 8000864:	2104      	movs	r1, #4
 8000866:	430a      	orrs	r2, r1
 8000868:	635a      	str	r2, [r3, #52]	@ 0x34
 800086a:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <BSP_LED_Init+0xc8>)
 800086c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800086e:	2204      	movs	r2, #4
 8000870:	4013      	ands	r3, r2
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
      LED4_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_64) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	781a      	ldrb	r2, [r3, #0]
 800087a:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <BSP_LED_Init+0xcc>)
 800087c:	0052      	lsls	r2, r2, #1
 800087e:	5ad3      	ldrh	r3, [r2, r3]
 8000880:	001a      	movs	r2, r3
 8000882:	2110      	movs	r1, #16
 8000884:	187b      	adds	r3, r7, r1
 8000886:	601a      	str	r2, [r3, #0]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2201      	movs	r2, #1
 800088c:	605a      	str	r2, [r3, #4]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2203      	movs	r2, #3
 8000898:	60da      	str	r2, [r3, #12]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	781a      	ldrb	r2, [r3, #0]
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <BSP_LED_Init+0xd0>)
 80008a0:	0092      	lsls	r2, r2, #2
 80008a2:	58d3      	ldr	r3, [r2, r3]
 80008a4:	187a      	adds	r2, r7, r1
 80008a6:	0011      	movs	r1, r2
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 f867 	bl	800197c <HAL_GPIO_Init>
#if defined (USE_NUCLEO_64)
    if (Led == LED2)
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d10d      	bne.n	80008d2 <BSP_LED_Init+0xbe>
    {
     HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	781a      	ldrb	r2, [r3, #0]
 80008ba:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <BSP_LED_Init+0xd0>)
 80008bc:	0092      	lsls	r2, r2, #2
 80008be:	58d0      	ldr	r0, [r2, r3]
 80008c0:	1dfb      	adds	r3, r7, #7
 80008c2:	781a      	ldrb	r2, [r3, #0]
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <BSP_LED_Init+0xcc>)
 80008c6:	0052      	lsls	r2, r2, #1
 80008c8:	5ad3      	ldrh	r3, [r2, r3]
 80008ca:	2201      	movs	r2, #1
 80008cc:	0019      	movs	r1, r3
 80008ce:	f001 f9c7 	bl	8001c60 <HAL_GPIO_WritePin>
    }
#endif
  }
  return ret;
 80008d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80008d4:	0018      	movs	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b00a      	add	sp, #40	@ 0x28
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40021000 	.word	0x40021000
 80008e0:	08003e4c 	.word	0x08003e4c
 80008e4:	20000008 	.word	0x20000008

080008e8 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	0002      	movs	r2, r0
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 80008f8:	1dfb      	adds	r3, r7, #7
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d007      	beq.n	8000910 <BSP_LED_On+0x28>
      && (Led != LED2))
 8000900:	1dfb      	adds	r3, r7, #7
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d003      	beq.n	8000910 <BSP_LED_On+0x28>
#else
  if (Led != LED4)
#endif /* defined (USE_NUCLEO_64) */
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000908:	2302      	movs	r3, #2
 800090a:	425b      	negs	r3, r3
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	e020      	b.n	8000952 <BSP_LED_On+0x6a>
  }
  else
  {
#if defined (USE_NUCLEO_64)
    if (Led == LED1)
 8000910:	1dfb      	adds	r3, r7, #7
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d10e      	bne.n	8000936 <BSP_LED_On+0x4e>
    {
      HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000918:	1dfb      	adds	r3, r7, #7
 800091a:	781a      	ldrb	r2, [r3, #0]
 800091c:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <BSP_LED_On+0x74>)
 800091e:	0092      	lsls	r2, r2, #2
 8000920:	58d0      	ldr	r0, [r2, r3]
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <BSP_LED_On+0x78>)
 8000928:	0052      	lsls	r2, r2, #1
 800092a:	5ad3      	ldrh	r3, [r2, r3]
 800092c:	2201      	movs	r2, #1
 800092e:	0019      	movs	r1, r3
 8000930:	f001 f996 	bl	8001c60 <HAL_GPIO_WritePin>
 8000934:	e00d      	b.n	8000952 <BSP_LED_On+0x6a>
    }
    else
    {
      HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	781a      	ldrb	r2, [r3, #0]
 800093a:	4b08      	ldr	r3, [pc, #32]	@ (800095c <BSP_LED_On+0x74>)
 800093c:	0092      	lsls	r2, r2, #2
 800093e:	58d0      	ldr	r0, [r2, r3]
 8000940:	1dfb      	adds	r3, r7, #7
 8000942:	781a      	ldrb	r2, [r3, #0]
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <BSP_LED_On+0x78>)
 8000946:	0052      	lsls	r2, r2, #1
 8000948:	5ad3      	ldrh	r3, [r2, r3]
 800094a:	2200      	movs	r2, #0
 800094c:	0019      	movs	r1, r3
 800094e:	f001 f987 	bl	8001c60 <HAL_GPIO_WritePin>

     HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
#endif
  }

  return ret;
 8000952:	68fb      	ldr	r3, [r7, #12]
}
 8000954:	0018      	movs	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	b004      	add	sp, #16
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000008 	.word	0x20000008
 8000960:	08003e4c 	.word	0x08003e4c

08000964 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	0002      	movs	r2, r0
 800096c:	1dfb      	adds	r3, r7, #7
 800096e:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 8000974:	1dfb      	adds	r3, r7, #7
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d007      	beq.n	800098c <BSP_LED_Toggle+0x28>
      && (Led != LED2))
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d003      	beq.n	800098c <BSP_LED_Toggle+0x28>
#else
  if (Led != LED4)
#endif /* defined (USE_NUCLEO_64) */
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000984:	2302      	movs	r3, #2
 8000986:	425b      	negs	r3, r3
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	e00c      	b.n	80009a6 <BSP_LED_Toggle+0x42>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	781a      	ldrb	r2, [r3, #0]
 8000990:	4b07      	ldr	r3, [pc, #28]	@ (80009b0 <BSP_LED_Toggle+0x4c>)
 8000992:	0092      	lsls	r2, r2, #2
 8000994:	58d0      	ldr	r0, [r2, r3]
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	781a      	ldrb	r2, [r3, #0]
 800099a:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <BSP_LED_Toggle+0x50>)
 800099c:	0052      	lsls	r2, r2, #1
 800099e:	5ad3      	ldrh	r3, [r2, r3]
 80009a0:	0019      	movs	r1, r3
 80009a2:	f001 f97a 	bl	8001c9a <HAL_GPIO_TogglePin>
  }

  return ret;
 80009a6:	68fb      	ldr	r3, [r7, #12]
}
 80009a8:	0018      	movs	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b004      	add	sp, #16
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000008 	.word	0x20000008
 80009b4:	08003e4c 	.word	0x08003e4c

080009b8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
 80009be:	0002      	movs	r2, r0
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	701a      	strb	r2, [r3, #0]
 80009c4:	1dbb      	adds	r3, r7, #6
 80009c6:	1c0a      	adds	r2, r1, #0
 80009c8:	701a      	strb	r2, [r3, #0]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80009ca:	4b36      	ldr	r3, [pc, #216]	@ (8000aa4 <BSP_PB_Init+0xec>)
 80009cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009ce:	4b35      	ldr	r3, [pc, #212]	@ (8000aa4 <BSP_PB_Init+0xec>)
 80009d0:	2104      	movs	r1, #4
 80009d2:	430a      	orrs	r2, r1
 80009d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80009d6:	4b33      	ldr	r3, [pc, #204]	@ (8000aa4 <BSP_PB_Init+0xec>)
 80009d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009da:	2204      	movs	r2, #4
 80009dc:	4013      	ands	r3, r2
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80009e2:	2380      	movs	r3, #128	@ 0x80
 80009e4:	019b      	lsls	r3, r3, #6
 80009e6:	001a      	movs	r2, r3
 80009e8:	210c      	movs	r1, #12
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2201      	movs	r2, #1
 80009f2:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2202      	movs	r2, #2
 80009f8:	60da      	str	r2, [r3, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80009fa:	1dbb      	adds	r3, r7, #6
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d10d      	bne.n	8000a1e <BSP_PB_Init+0x66>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	781a      	ldrb	r2, [r3, #0]
 8000a0c:	4b26      	ldr	r3, [pc, #152]	@ (8000aa8 <BSP_PB_Init+0xf0>)
 8000a0e:	0092      	lsls	r2, r2, #2
 8000a10:	58d3      	ldr	r3, [r2, r3]
 8000a12:	187a      	adds	r2, r7, r1
 8000a14:	0011      	movs	r1, r2
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 ffb0 	bl	800197c <HAL_GPIO_Init>
 8000a1c:	e03c      	b.n	8000a98 <BSP_PB_Init+0xe0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8000a1e:	210c      	movs	r1, #12
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	4a22      	ldr	r2, [pc, #136]	@ (8000aac <BSP_PB_Init+0xf4>)
 8000a24:	605a      	str	r2, [r3, #4]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa8 <BSP_PB_Init+0xf0>)
 8000a2c:	0092      	lsls	r2, r2, #2
 8000a2e:	58d3      	ldr	r3, [r2, r3]
 8000a30:	187a      	adds	r2, r7, r1
 8000a32:	0011      	movs	r1, r2
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 ffa1 	bl	800197c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	781a      	ldrb	r2, [r3, #0]
 8000a3e:	0013      	movs	r3, r2
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	189b      	adds	r3, r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab0 <BSP_PB_Init+0xf8>)
 8000a48:	1898      	adds	r0, r3, r2
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781a      	ldrb	r2, [r3, #0]
 8000a4e:	4b19      	ldr	r3, [pc, #100]	@ (8000ab4 <BSP_PB_Init+0xfc>)
 8000a50:	0092      	lsls	r2, r2, #2
 8000a52:	58d3      	ldr	r3, [r2, r3]
 8000a54:	0019      	movs	r1, r3
 8000a56:	f000 ff35 	bl	80018c4 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	781a      	ldrb	r2, [r3, #0]
 8000a5e:	0013      	movs	r3, r2
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	189b      	adds	r3, r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4a12      	ldr	r2, [pc, #72]	@ (8000ab0 <BSP_PB_Init+0xf8>)
 8000a68:	1898      	adds	r0, r3, r2
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781a      	ldrb	r2, [r3, #0]
 8000a6e:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <BSP_PB_Init+0x100>)
 8000a70:	0092      	lsls	r2, r2, #2
 8000a72:	58d3      	ldr	r3, [r2, r3]
 8000a74:	001a      	movs	r2, r3
 8000a76:	2100      	movs	r1, #0
 8000a78:	f000 fef2 	bl	8001860 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000a7c:	2007      	movs	r0, #7
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781a      	ldrb	r2, [r3, #0]
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <BSP_PB_Init+0x104>)
 8000a84:	0092      	lsls	r2, r2, #2
 8000a86:	58d3      	ldr	r3, [r2, r3]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	0019      	movs	r1, r3
 8000a8c:	f000 feb6 	bl	80017fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000a90:	2307      	movs	r3, #7
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 fec7 	bl	8001826 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b008      	add	sp, #32
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			@ (mov r8, r8)
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	20000010 	.word	0x20000010
 8000aac:	10210000 	.word	0x10210000
 8000ab0:	20000118 	.word	0x20000118
 8000ab4:	08003e50 	.word	0x08003e50
 8000ab8:	20000014 	.word	0x20000014
 8000abc:	20000018 	.word	0x20000018

08000ac0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	0002      	movs	r2, r0
 8000ac8:	1dfb      	adds	r3, r7, #7
 8000aca:	701a      	strb	r2, [r3, #0]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000acc:	1dfb      	adds	r3, r7, #7
 8000ace:	781a      	ldrb	r2, [r3, #0]
 8000ad0:	0013      	movs	r3, r2
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	189b      	adds	r3, r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4a04      	ldr	r2, [pc, #16]	@ (8000aec <BSP_PB_IRQHandler+0x2c>)
 8000ada:	189b      	adds	r3, r3, r2
 8000adc:	0018      	movs	r0, r3
 8000ade:	f000 ff03 	bl	80018e8 <HAL_EXTI_IRQHandler>
}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b002      	add	sp, #8
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	20000118 	.word	0x20000118

08000af0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	0002      	movs	r2, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d003      	beq.n	8000b12 <BSP_COM_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	425b      	negs	r3, r3
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	e018      	b.n	8000b44 <BSP_COM_Init+0x54>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2294      	movs	r2, #148	@ 0x94
 8000b18:	435a      	muls	r2, r3
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b50 <BSP_COM_Init+0x60>)
 8000b1c:	18d3      	adds	r3, r2, r3
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 f870 	bl	8000c04 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART2_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2294      	movs	r2, #148	@ 0x94
 8000b2a:	435a      	muls	r2, r3
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <BSP_COM_Init+0x60>)
 8000b2e:	18d3      	adds	r3, r2, r3
 8000b30:	683a      	ldr	r2, [r7, #0]
 8000b32:	0011      	movs	r1, r2
 8000b34:	0018      	movs	r0, r3
 8000b36:	f000 f80d 	bl	8000b54 <MX_USART2_Init>
 8000b3a:	1e03      	subs	r3, r0, #0
 8000b3c:	d002      	beq.n	8000b44 <BSP_COM_Init+0x54>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000b3e:	2304      	movs	r3, #4
 8000b40:	425b      	negs	r3, r3
 8000b42:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000b44:	68fb      	ldr	r3, [r7, #12]
}
 8000b46:	0018      	movs	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b004      	add	sp, #16
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	20000124 	.word	0x20000124

08000b54 <MX_USART2_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART2_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8000b5e:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <MX_USART2_Init+0x68>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	220c      	movs	r2, #12
 8000b72:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	895b      	ldrh	r3, [r3, #10]
 8000b78:	001a      	movs	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	891b      	ldrh	r3, [r3, #8]
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	899b      	ldrh	r3, [r3, #12]
 8000b94:	001a      	movs	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2280      	movs	r2, #128	@ 0x80
 8000b9e:	0212      	lsls	r2, r2, #8
 8000ba0:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	0018      	movs	r0, r3
 8000bac:	f001 fcee 	bl	800258c <HAL_UART_Init>
 8000bb0:	0003      	movs	r3, r0
}
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b002      	add	sp, #8
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	20000004 	.word	0x20000004

08000bc0 <__io_putchar>:
/**
  * @brief  Redirect console output to COM
  */

PUTCHAR_PROTOTYPE
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8000bc8:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <__io_putchar+0x2c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	001a      	movs	r2, r3
 8000bce:	2394      	movs	r3, #148	@ 0x94
 8000bd0:	435a      	muls	r2, r3
 8000bd2:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <__io_putchar+0x30>)
 8000bd4:	18d0      	adds	r0, r2, r3
 8000bd6:	23fa      	movs	r3, #250	@ 0xfa
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	1d39      	adds	r1, r7, #4
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f001 fd33 	bl	8002648 <HAL_UART_Transmit>
  return ch;
 8000be2:	687b      	ldr	r3, [r7, #4]
}
 8000be4:	0018      	movs	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b002      	add	sp, #8
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200001b8 	.word	0x200001b8
 8000bf0:	20000124 	.word	0x20000124

08000bf4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff fc81 	bl	8000500 <BSP_PB_Callback>
}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b08b      	sub	sp, #44	@ 0x2c
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000c0c:	4b28      	ldr	r3, [pc, #160]	@ (8000cb0 <COM1_MspInit+0xac>)
 8000c0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c10:	4b27      	ldr	r3, [pc, #156]	@ (8000cb0 <COM1_MspInit+0xac>)
 8000c12:	2101      	movs	r1, #1
 8000c14:	430a      	orrs	r2, r1
 8000c16:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c18:	4b25      	ldr	r3, [pc, #148]	@ (8000cb0 <COM1_MspInit+0xac>)
 8000c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000c24:	4b22      	ldr	r3, [pc, #136]	@ (8000cb0 <COM1_MspInit+0xac>)
 8000c26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c28:	4b21      	ldr	r3, [pc, #132]	@ (8000cb0 <COM1_MspInit+0xac>)
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c30:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb0 <COM1_MspInit+0xac>)
 8000c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c34:	2201      	movs	r2, #1
 8000c36:	4013      	ands	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb0 <COM1_MspInit+0xac>)
 8000c3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c40:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <COM1_MspInit+0xac>)
 8000c42:	2180      	movs	r1, #128	@ 0x80
 8000c44:	0289      	lsls	r1, r1, #10
 8000c46:	430a      	orrs	r2, r1
 8000c48:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c4a:	4b19      	ldr	r3, [pc, #100]	@ (8000cb0 <COM1_MspInit+0xac>)
 8000c4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c4e:	2380      	movs	r3, #128	@ 0x80
 8000c50:	029b      	lsls	r3, r3, #10
 8000c52:	4013      	ands	r3, r2
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000c58:	2414      	movs	r4, #20
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	2204      	movs	r2, #4
 8000c5e:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	2202      	movs	r2, #2
 8000c64:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	2202      	movs	r2, #2
 8000c6a:	60da      	str	r2, [r3, #12]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	2201      	movs	r2, #1
 8000c70:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	2201      	movs	r2, #1
 8000c76:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000c78:	193a      	adds	r2, r7, r4
 8000c7a:	23a0      	movs	r3, #160	@ 0xa0
 8000c7c:	05db      	lsls	r3, r3, #23
 8000c7e:	0011      	movs	r1, r2
 8000c80:	0018      	movs	r0, r3
 8000c82:	f000 fe7b 	bl	800197c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	2208      	movs	r2, #8
 8000c8a:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000c8c:	193b      	adds	r3, r7, r4
 8000c8e:	2202      	movs	r2, #2
 8000c90:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	2201      	movs	r2, #1
 8000c96:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000c98:	193a      	adds	r2, r7, r4
 8000c9a:	23a0      	movs	r3, #160	@ 0xa0
 8000c9c:	05db      	lsls	r3, r3, #23
 8000c9e:	0011      	movs	r1, r2
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f000 fe6b 	bl	800197c <HAL_GPIO_Init>
}
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b00b      	add	sp, #44	@ 0x2c
 8000cac:	bd90      	pop	{r4, r7, pc}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f80f 	bl	8000ce4 <HAL_InitTick>
 8000cc6:	1e03      	subs	r3, r0, #0
 8000cc8:	d003      	beq.n	8000cd2 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	2201      	movs	r2, #1
 8000cce:	701a      	strb	r2, [r3, #0]
 8000cd0:	e001      	b.n	8000cd6 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cd2:	f7ff fc2f 	bl	8000534 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	781b      	ldrb	r3, [r3, #0]
}
 8000cda:	0018      	movs	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b002      	add	sp, #8
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cec:	230f      	movs	r3, #15
 8000cee:	18fb      	adds	r3, r7, r3
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d6c <HAL_InitTick+0x88>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d02b      	beq.n	8000d54 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d70 <HAL_InitTick+0x8c>)
 8000cfe:	681c      	ldr	r4, [r3, #0]
 8000d00:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <HAL_InitTick+0x88>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	0019      	movs	r1, r3
 8000d06:	23fa      	movs	r3, #250	@ 0xfa
 8000d08:	0098      	lsls	r0, r3, #2
 8000d0a:	f7ff fa07 	bl	800011c <__udivsi3>
 8000d0e:	0003      	movs	r3, r0
 8000d10:	0019      	movs	r1, r3
 8000d12:	0020      	movs	r0, r4
 8000d14:	f7ff fa02 	bl	800011c <__udivsi3>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f000 fd93 	bl	8001846 <HAL_SYSTICK_Config>
 8000d20:	1e03      	subs	r3, r0, #0
 8000d22:	d112      	bne.n	8000d4a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	d80a      	bhi.n	8000d40 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	425b      	negs	r3, r3
 8000d30:	2200      	movs	r2, #0
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 fd62 	bl	80017fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d38:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <HAL_InitTick+0x90>)
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	e00d      	b.n	8000d5c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d40:	230f      	movs	r3, #15
 8000d42:	18fb      	adds	r3, r7, r3
 8000d44:	2201      	movs	r2, #1
 8000d46:	701a      	strb	r2, [r3, #0]
 8000d48:	e008      	b.n	8000d5c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
 8000d52:	e003      	b.n	8000d5c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d54:	230f      	movs	r3, #15
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	2201      	movs	r2, #1
 8000d5a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	781b      	ldrb	r3, [r3, #0]
}
 8000d62:	0018      	movs	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b005      	add	sp, #20
 8000d68:	bd90      	pop	{r4, r7, pc}
 8000d6a:	46c0      	nop			@ (mov r8, r8)
 8000d6c:	20000020 	.word	0x20000020
 8000d70:	20000000 	.word	0x20000000
 8000d74:	2000001c 	.word	0x2000001c

08000d78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d7c:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <HAL_IncTick+0x1c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	001a      	movs	r2, r3
 8000d82:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <HAL_IncTick+0x20>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	18d2      	adds	r2, r2, r3
 8000d88:	4b03      	ldr	r3, [pc, #12]	@ (8000d98 <HAL_IncTick+0x20>)
 8000d8a:	601a      	str	r2, [r3, #0]
}
 8000d8c:	46c0      	nop			@ (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			@ (mov r8, r8)
 8000d94:	20000020 	.word	0x20000020
 8000d98:	200001bc 	.word	0x200001bc

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b02      	ldr	r3, [pc, #8]	@ (8000dac <HAL_GetTick+0x10>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	0018      	movs	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	200001bc 	.word	0x200001bc

08000db0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a05      	ldr	r2, [pc, #20]	@ (8000dd4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	601a      	str	r2, [r3, #0]
}
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b002      	add	sp, #8
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	ff3fffff 	.word	0xff3fffff

08000dd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	23c0      	movs	r3, #192	@ 0xc0
 8000de6:	041b      	lsls	r3, r3, #16
 8000de8:	4013      	ands	r3, r2
}
 8000dea:	0018      	movs	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b002      	add	sp, #8
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b084      	sub	sp, #16
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	60f8      	str	r0, [r7, #12]
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	2104      	movs	r1, #4
 8000e06:	400a      	ands	r2, r1
 8000e08:	2107      	movs	r1, #7
 8000e0a:	4091      	lsls	r1, r2
 8000e0c:	000a      	movs	r2, r1
 8000e0e:	43d2      	mvns	r2, r2
 8000e10:	401a      	ands	r2, r3
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	2104      	movs	r1, #4
 8000e16:	400b      	ands	r3, r1
 8000e18:	6879      	ldr	r1, [r7, #4]
 8000e1a:	4099      	lsls	r1, r3
 8000e1c:	000b      	movs	r3, r1
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000e24:	46c0      	nop			@ (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b004      	add	sp, #16
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	2104      	movs	r1, #4
 8000e3e:	400a      	ands	r2, r1
 8000e40:	2107      	movs	r1, #7
 8000e42:	4091      	lsls	r1, r2
 8000e44:	000a      	movs	r2, r1
 8000e46:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e4e:	40da      	lsrs	r2, r3
 8000e50:	0013      	movs	r3, r2
}
 8000e52:	0018      	movs	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b002      	add	sp, #8
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b084      	sub	sp, #16
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	60f8      	str	r0, [r7, #12]
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	211f      	movs	r1, #31
 8000e6e:	400a      	ands	r2, r1
 8000e70:	210f      	movs	r1, #15
 8000e72:	4091      	lsls	r1, r2
 8000e74:	000a      	movs	r2, r1
 8000e76:	43d2      	mvns	r2, r2
 8000e78:	401a      	ands	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	0e9b      	lsrs	r3, r3, #26
 8000e7e:	210f      	movs	r1, #15
 8000e80:	4019      	ands	r1, r3
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	201f      	movs	r0, #31
 8000e86:	4003      	ands	r3, r0
 8000e88:	4099      	lsls	r1, r3
 8000e8a:	000b      	movs	r3, r1
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b004      	add	sp, #16
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	025b      	lsls	r3, r3, #9
 8000eac:	0a5b      	lsrs	r3, r3, #9
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000eb4:	46c0      	nop			@ (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b002      	add	sp, #8
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eca:	683a      	ldr	r2, [r7, #0]
 8000ecc:	0252      	lsls	r2, r2, #9
 8000ece:	0a52      	lsrs	r2, r2, #9
 8000ed0:	43d2      	mvns	r2, r2
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ed8:	46c0      	nop			@ (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b002      	add	sp, #8
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	68ba      	ldr	r2, [r7, #8]
 8000ef2:	0212      	lsls	r2, r2, #8
 8000ef4:	43d2      	mvns	r2, r2
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	400b      	ands	r3, r1
 8000f00:	4904      	ldr	r1, [pc, #16]	@ (8000f14 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000f02:	400b      	ands	r3, r1
 8000f04:	431a      	orrs	r2, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b004      	add	sp, #16
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	7fffff00 	.word	0x7fffff00

08000f18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	4a05      	ldr	r2, [pc, #20]	@ (8000f3c <LL_ADC_EnableInternalRegulator+0x24>)
 8000f26:	4013      	ands	r3, r2
 8000f28:	2280      	movs	r2, #128	@ 0x80
 8000f2a:	0552      	lsls	r2, r2, #21
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f32:	46c0      	nop			@ (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b002      	add	sp, #8
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	6fffffe8 	.word	0x6fffffe8

08000f40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	2380      	movs	r3, #128	@ 0x80
 8000f4e:	055b      	lsls	r3, r3, #21
 8000f50:	401a      	ands	r2, r3
 8000f52:	2380      	movs	r3, #128	@ 0x80
 8000f54:	055b      	lsls	r3, r3, #21
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d101      	bne.n	8000f5e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e000      	b.n	8000f60 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b002      	add	sp, #8
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	2201      	movs	r2, #1
 8000f76:	4013      	ands	r3, r2
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d101      	bne.n	8000f80 <LL_ADC_IsEnabled+0x18>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e000      	b.n	8000f82 <LL_ADC_IsEnabled+0x1a>
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	0018      	movs	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b002      	add	sp, #8
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	2204      	movs	r2, #4
 8000f98:	4013      	ands	r3, r2
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	d101      	bne.n	8000fa2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb4:	231f      	movs	r3, #31
 8000fb6:	18fb      	adds	r3, r7, r3
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e17e      	b.n	80012d0 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10a      	bne.n	8000ff0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff facd 	bl	800057c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2254      	movs	r2, #84	@ 0x54
 8000fec:	2100      	movs	r1, #0
 8000fee:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f7ff ffa3 	bl	8000f40 <LL_ADC_IsInternalRegulatorEnabled>
 8000ffa:	1e03      	subs	r3, r0, #0
 8000ffc:	d114      	bne.n	8001028 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff ff88 	bl	8000f18 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001008:	4bb3      	ldr	r3, [pc, #716]	@ (80012d8 <HAL_ADC_Init+0x32c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	49b3      	ldr	r1, [pc, #716]	@ (80012dc <HAL_ADC_Init+0x330>)
 800100e:	0018      	movs	r0, r3
 8001010:	f7ff f884 	bl	800011c <__udivsi3>
 8001014:	0003      	movs	r3, r0
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800101a:	e002      	b.n	8001022 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3b01      	subs	r3, #1
 8001020:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1f9      	bne.n	800101c <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	0018      	movs	r0, r3
 800102e:	f7ff ff87 	bl	8000f40 <LL_ADC_IsInternalRegulatorEnabled>
 8001032:	1e03      	subs	r3, r0, #0
 8001034:	d10f      	bne.n	8001056 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103a:	2210      	movs	r2, #16
 800103c:	431a      	orrs	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001046:	2201      	movs	r2, #1
 8001048:	431a      	orrs	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800104e:	231f      	movs	r3, #31
 8001050:	18fb      	adds	r3, r7, r3
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	0018      	movs	r0, r3
 800105c:	f7ff ff95 	bl	8000f8a <LL_ADC_REG_IsConversionOngoing>
 8001060:	0003      	movs	r3, r0
 8001062:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001068:	2210      	movs	r2, #16
 800106a:	4013      	ands	r3, r2
 800106c:	d000      	beq.n	8001070 <HAL_ADC_Init+0xc4>
 800106e:	e122      	b.n	80012b6 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d000      	beq.n	8001078 <HAL_ADC_Init+0xcc>
 8001076:	e11e      	b.n	80012b6 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107c:	4a98      	ldr	r2, [pc, #608]	@ (80012e0 <HAL_ADC_Init+0x334>)
 800107e:	4013      	ands	r3, r2
 8001080:	2202      	movs	r2, #2
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	0018      	movs	r0, r3
 800108e:	f7ff ff6b 	bl	8000f68 <LL_ADC_IsEnabled>
 8001092:	1e03      	subs	r3, r0, #0
 8001094:	d000      	beq.n	8001098 <HAL_ADC_Init+0xec>
 8001096:	e0ad      	b.n	80011f4 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7e1b      	ldrb	r3, [r3, #24]
 80010a0:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80010a2:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7e5b      	ldrb	r3, [r3, #25]
 80010a8:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80010aa:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7e9b      	ldrb	r3, [r3, #26]
 80010b0:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80010b2:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <HAL_ADC_Init+0x116>
 80010bc:	2380      	movs	r3, #128	@ 0x80
 80010be:	015b      	lsls	r3, r3, #5
 80010c0:	e000      	b.n	80010c4 <HAL_ADC_Init+0x118>
 80010c2:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80010c4:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80010ca:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	da04      	bge.n	80010de <HAL_ADC_Init+0x132>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	085b      	lsrs	r3, r3, #1
 80010dc:	e001      	b.n	80010e2 <HAL_ADC_Init+0x136>
 80010de:	2380      	movs	r3, #128	@ 0x80
 80010e0:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80010e2:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	212c      	movs	r1, #44	@ 0x2c
 80010e8:	5c5b      	ldrb	r3, [r3, r1]
 80010ea:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80010ec:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2220      	movs	r2, #32
 80010f8:	5c9b      	ldrb	r3, [r3, r2]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d115      	bne.n	800112a <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7e9b      	ldrb	r3, [r3, #26]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d105      	bne.n	8001112 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	2280      	movs	r2, #128	@ 0x80
 800110a:	0252      	lsls	r2, r2, #9
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
 8001110:	e00b      	b.n	800112a <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001116:	2220      	movs	r2, #32
 8001118:	431a      	orrs	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001122:	2201      	movs	r2, #1
 8001124:	431a      	orrs	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00a      	beq.n	8001148 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001136:	23e0      	movs	r3, #224	@ 0xe0
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001140:	4313      	orrs	r3, r2
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	4a65      	ldr	r2, [pc, #404]	@ (80012e4 <HAL_ADC_Init+0x338>)
 8001150:	4013      	ands	r3, r2
 8001152:	0019      	movs	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	430a      	orrs	r2, r1
 800115c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	0f9b      	lsrs	r3, r3, #30
 8001164:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800116a:	4313      	orrs	r3, r2
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	4313      	orrs	r3, r2
 8001170:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	223c      	movs	r2, #60	@ 0x3c
 8001176:	5c9b      	ldrb	r3, [r3, r2]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d111      	bne.n	80011a0 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	0f9b      	lsrs	r3, r3, #30
 8001182:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001188:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 800118e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001194:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	4313      	orrs	r3, r2
 800119a:	2201      	movs	r2, #1
 800119c:	4313      	orrs	r3, r2
 800119e:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	4a50      	ldr	r2, [pc, #320]	@ (80012e8 <HAL_ADC_Init+0x33c>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	0019      	movs	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	23c0      	movs	r3, #192	@ 0xc0
 80011bc:	061b      	lsls	r3, r3, #24
 80011be:	429a      	cmp	r2, r3
 80011c0:	d018      	beq.n	80011f4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80011c6:	2380      	movs	r3, #128	@ 0x80
 80011c8:	05db      	lsls	r3, r3, #23
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d012      	beq.n	80011f4 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80011d2:	2380      	movs	r3, #128	@ 0x80
 80011d4:	061b      	lsls	r3, r3, #24
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d00c      	beq.n	80011f4 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80011da:	4b44      	ldr	r3, [pc, #272]	@ (80012ec <HAL_ADC_Init+0x340>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a44      	ldr	r2, [pc, #272]	@ (80012f0 <HAL_ADC_Init+0x344>)
 80011e0:	4013      	ands	r3, r2
 80011e2:	0019      	movs	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	23f0      	movs	r3, #240	@ 0xf0
 80011ea:	039b      	lsls	r3, r3, #14
 80011ec:	401a      	ands	r2, r3
 80011ee:	4b3f      	ldr	r3, [pc, #252]	@ (80012ec <HAL_ADC_Init+0x340>)
 80011f0:	430a      	orrs	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011fc:	001a      	movs	r2, r3
 80011fe:	2100      	movs	r1, #0
 8001200:	f7ff fdf7 	bl	8000df2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6818      	ldr	r0, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800120c:	4939      	ldr	r1, [pc, #228]	@ (80012f4 <HAL_ADC_Init+0x348>)
 800120e:	001a      	movs	r2, r3
 8001210:	f7ff fdef 	bl	8000df2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d109      	bne.n	8001230 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2110      	movs	r1, #16
 8001228:	4249      	negs	r1, r1
 800122a:	430a      	orrs	r2, r1
 800122c:	629a      	str	r2, [r3, #40]	@ 0x28
 800122e:	e018      	b.n	8001262 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	2380      	movs	r3, #128	@ 0x80
 8001236:	039b      	lsls	r3, r3, #14
 8001238:	429a      	cmp	r2, r3
 800123a:	d112      	bne.n	8001262 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	3b01      	subs	r3, #1
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	221c      	movs	r2, #28
 800124c:	4013      	ands	r3, r2
 800124e:	2210      	movs	r2, #16
 8001250:	4252      	negs	r2, r2
 8001252:	409a      	lsls	r2, r3
 8001254:	0011      	movs	r1, r2
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2100      	movs	r1, #0
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff fddf 	bl	8000e2c <LL_ADC_GetSamplingTimeCommonChannels>
 800126e:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001274:	429a      	cmp	r2, r3
 8001276:	d10b      	bne.n	8001290 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001282:	2203      	movs	r2, #3
 8001284:	4393      	bics	r3, r2
 8001286:	2201      	movs	r2, #1
 8001288:	431a      	orrs	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800128e:	e01c      	b.n	80012ca <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001294:	2212      	movs	r2, #18
 8001296:	4393      	bics	r3, r2
 8001298:	2210      	movs	r2, #16
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012a4:	2201      	movs	r2, #1
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80012ac:	231f      	movs	r3, #31
 80012ae:	18fb      	adds	r3, r7, r3
 80012b0:	2201      	movs	r2, #1
 80012b2:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80012b4:	e009      	b.n	80012ca <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ba:	2210      	movs	r2, #16
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80012c2:	231f      	movs	r3, #31
 80012c4:	18fb      	adds	r3, r7, r3
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80012ca:	231f      	movs	r3, #31
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	781b      	ldrb	r3, [r3, #0]
}
 80012d0:	0018      	movs	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b008      	add	sp, #32
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000000 	.word	0x20000000
 80012dc:	00030d40 	.word	0x00030d40
 80012e0:	fffffefd 	.word	0xfffffefd
 80012e4:	ffde0201 	.word	0xffde0201
 80012e8:	1ffffc02 	.word	0x1ffffc02
 80012ec:	40012708 	.word	0x40012708
 80012f0:	ffc3ffff 	.word	0xffc3ffff
 80012f4:	7fffff04 	.word	0x7fffff04

080012f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001302:	2317      	movs	r3, #23
 8001304:	18fb      	adds	r3, r7, r3
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2254      	movs	r2, #84	@ 0x54
 8001312:	5c9b      	ldrb	r3, [r3, r2]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d101      	bne.n	800131c <HAL_ADC_ConfigChannel+0x24>
 8001318:	2302      	movs	r3, #2
 800131a:	e1be      	b.n	800169a <HAL_ADC_ConfigChannel+0x3a2>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2254      	movs	r2, #84	@ 0x54
 8001320:	2101      	movs	r1, #1
 8001322:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	0018      	movs	r0, r3
 800132a:	f7ff fe2e 	bl	8000f8a <LL_ADC_REG_IsConversionOngoing>
 800132e:	1e03      	subs	r3, r0, #0
 8001330:	d000      	beq.n	8001334 <HAL_ADC_ConfigChannel+0x3c>
 8001332:	e1a1      	b.n	8001678 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d100      	bne.n	800133e <HAL_ADC_ConfigChannel+0x46>
 800133c:	e152      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691a      	ldr	r2, [r3, #16]
 8001342:	2380      	movs	r3, #128	@ 0x80
 8001344:	061b      	lsls	r3, r3, #24
 8001346:	429a      	cmp	r2, r3
 8001348:	d004      	beq.n	8001354 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800134e:	4ac2      	ldr	r2, [pc, #776]	@ (8001658 <HAL_ADC_ConfigChannel+0x360>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d108      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	0019      	movs	r1, r3
 800135e:	0010      	movs	r0, r2
 8001360:	f7ff fd9b 	bl	8000e9a <LL_ADC_REG_SetSequencerChAdd>
 8001364:	e0ed      	b.n	8001542 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	211f      	movs	r1, #31
 8001370:	400b      	ands	r3, r1
 8001372:	210f      	movs	r1, #15
 8001374:	4099      	lsls	r1, r3
 8001376:	000b      	movs	r3, r1
 8001378:	43db      	mvns	r3, r3
 800137a:	4013      	ands	r3, r2
 800137c:	0019      	movs	r1, r3
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	025b      	lsls	r3, r3, #9
 8001384:	0a5b      	lsrs	r3, r3, #9
 8001386:	d105      	bne.n	8001394 <HAL_ADC_ConfigChannel+0x9c>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	0e9b      	lsrs	r3, r3, #26
 800138e:	221f      	movs	r2, #31
 8001390:	4013      	ands	r3, r2
 8001392:	e0bc      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2201      	movs	r2, #1
 800139a:	4013      	ands	r3, r2
 800139c:	d000      	beq.n	80013a0 <HAL_ADC_ConfigChannel+0xa8>
 800139e:	e0b5      	b.n	800150c <HAL_ADC_ConfigChannel+0x214>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2202      	movs	r2, #2
 80013a6:	4013      	ands	r3, r2
 80013a8:	d000      	beq.n	80013ac <HAL_ADC_ConfigChannel+0xb4>
 80013aa:	e0ad      	b.n	8001508 <HAL_ADC_ConfigChannel+0x210>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2204      	movs	r2, #4
 80013b2:	4013      	ands	r3, r2
 80013b4:	d000      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0xc0>
 80013b6:	e0a5      	b.n	8001504 <HAL_ADC_ConfigChannel+0x20c>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2208      	movs	r2, #8
 80013be:	4013      	ands	r3, r2
 80013c0:	d000      	beq.n	80013c4 <HAL_ADC_ConfigChannel+0xcc>
 80013c2:	e09d      	b.n	8001500 <HAL_ADC_ConfigChannel+0x208>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2210      	movs	r2, #16
 80013ca:	4013      	ands	r3, r2
 80013cc:	d000      	beq.n	80013d0 <HAL_ADC_ConfigChannel+0xd8>
 80013ce:	e095      	b.n	80014fc <HAL_ADC_ConfigChannel+0x204>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2220      	movs	r2, #32
 80013d6:	4013      	ands	r3, r2
 80013d8:	d000      	beq.n	80013dc <HAL_ADC_ConfigChannel+0xe4>
 80013da:	e08d      	b.n	80014f8 <HAL_ADC_ConfigChannel+0x200>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2240      	movs	r2, #64	@ 0x40
 80013e2:	4013      	ands	r3, r2
 80013e4:	d000      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0xf0>
 80013e6:	e085      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x1fc>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2280      	movs	r2, #128	@ 0x80
 80013ee:	4013      	ands	r3, r2
 80013f0:	d000      	beq.n	80013f4 <HAL_ADC_ConfigChannel+0xfc>
 80013f2:	e07d      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x1f8>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	2380      	movs	r3, #128	@ 0x80
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4013      	ands	r3, r2
 80013fe:	d000      	beq.n	8001402 <HAL_ADC_ConfigChannel+0x10a>
 8001400:	e074      	b.n	80014ec <HAL_ADC_ConfigChannel+0x1f4>
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	2380      	movs	r3, #128	@ 0x80
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4013      	ands	r3, r2
 800140c:	d000      	beq.n	8001410 <HAL_ADC_ConfigChannel+0x118>
 800140e:	e06b      	b.n	80014e8 <HAL_ADC_ConfigChannel+0x1f0>
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4013      	ands	r3, r2
 800141a:	d000      	beq.n	800141e <HAL_ADC_ConfigChannel+0x126>
 800141c:	e062      	b.n	80014e4 <HAL_ADC_ConfigChannel+0x1ec>
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	2380      	movs	r3, #128	@ 0x80
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	4013      	ands	r3, r2
 8001428:	d000      	beq.n	800142c <HAL_ADC_ConfigChannel+0x134>
 800142a:	e059      	b.n	80014e0 <HAL_ADC_ConfigChannel+0x1e8>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2380      	movs	r3, #128	@ 0x80
 8001432:	015b      	lsls	r3, r3, #5
 8001434:	4013      	ands	r3, r2
 8001436:	d151      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x1e4>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	2380      	movs	r3, #128	@ 0x80
 800143e:	019b      	lsls	r3, r3, #6
 8001440:	4013      	ands	r3, r2
 8001442:	d149      	bne.n	80014d8 <HAL_ADC_ConfigChannel+0x1e0>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	@ 0x80
 800144a:	01db      	lsls	r3, r3, #7
 800144c:	4013      	ands	r3, r2
 800144e:	d141      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x1dc>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2380      	movs	r3, #128	@ 0x80
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	4013      	ands	r3, r2
 800145a:	d139      	bne.n	80014d0 <HAL_ADC_ConfigChannel+0x1d8>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2380      	movs	r3, #128	@ 0x80
 8001462:	025b      	lsls	r3, r3, #9
 8001464:	4013      	ands	r3, r2
 8001466:	d131      	bne.n	80014cc <HAL_ADC_ConfigChannel+0x1d4>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2380      	movs	r3, #128	@ 0x80
 800146e:	029b      	lsls	r3, r3, #10
 8001470:	4013      	ands	r3, r2
 8001472:	d129      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x1d0>
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2380      	movs	r3, #128	@ 0x80
 800147a:	02db      	lsls	r3, r3, #11
 800147c:	4013      	ands	r3, r2
 800147e:	d121      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1cc>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2380      	movs	r3, #128	@ 0x80
 8001486:	031b      	lsls	r3, r3, #12
 8001488:	4013      	ands	r3, r2
 800148a:	d119      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x1c8>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2380      	movs	r3, #128	@ 0x80
 8001492:	035b      	lsls	r3, r3, #13
 8001494:	4013      	ands	r3, r2
 8001496:	d111      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x1c4>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	039b      	lsls	r3, r3, #14
 80014a0:	4013      	ands	r3, r2
 80014a2:	d109      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x1c0>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	2380      	movs	r3, #128	@ 0x80
 80014aa:	03db      	lsls	r3, r3, #15
 80014ac:	4013      	ands	r3, r2
 80014ae:	d001      	beq.n	80014b4 <HAL_ADC_ConfigChannel+0x1bc>
 80014b0:	2316      	movs	r3, #22
 80014b2:	e02c      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 80014b4:	2300      	movs	r3, #0
 80014b6:	e02a      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 80014b8:	2315      	movs	r3, #21
 80014ba:	e028      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 80014bc:	2314      	movs	r3, #20
 80014be:	e026      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 80014c0:	2313      	movs	r3, #19
 80014c2:	e024      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 80014c4:	2312      	movs	r3, #18
 80014c6:	e022      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 80014c8:	2311      	movs	r3, #17
 80014ca:	e020      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 80014cc:	2310      	movs	r3, #16
 80014ce:	e01e      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 80014d0:	230f      	movs	r3, #15
 80014d2:	e01c      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 80014d4:	230e      	movs	r3, #14
 80014d6:	e01a      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 80014d8:	230d      	movs	r3, #13
 80014da:	e018      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 80014dc:	230c      	movs	r3, #12
 80014de:	e016      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 80014e0:	230b      	movs	r3, #11
 80014e2:	e014      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 80014e4:	230a      	movs	r3, #10
 80014e6:	e012      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 80014e8:	2309      	movs	r3, #9
 80014ea:	e010      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 80014ec:	2308      	movs	r3, #8
 80014ee:	e00e      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 80014f0:	2307      	movs	r3, #7
 80014f2:	e00c      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 80014f4:	2306      	movs	r3, #6
 80014f6:	e00a      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 80014f8:	2305      	movs	r3, #5
 80014fa:	e008      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 80014fc:	2304      	movs	r3, #4
 80014fe:	e006      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 8001500:	2303      	movs	r3, #3
 8001502:	e004      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 8001504:	2302      	movs	r3, #2
 8001506:	e002      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <HAL_ADC_ConfigChannel+0x216>
 800150c:	2300      	movs	r3, #0
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	6852      	ldr	r2, [r2, #4]
 8001512:	201f      	movs	r0, #31
 8001514:	4002      	ands	r2, r0
 8001516:	4093      	lsls	r3, r2
 8001518:	000a      	movs	r2, r1
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	429a      	cmp	r2, r3
 800152e:	d808      	bhi.n	8001542 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6818      	ldr	r0, [r3, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	6859      	ldr	r1, [r3, #4]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	001a      	movs	r2, r3
 800153e:	f7ff fc8c 	bl	8000e5a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6818      	ldr	r0, [r3, #0]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	6819      	ldr	r1, [r3, #0]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	001a      	movs	r2, r3
 8001550:	f7ff fcc6 	bl	8000ee0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db00      	blt.n	800155e <HAL_ADC_ConfigChannel+0x266>
 800155c:	e096      	b.n	800168c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800155e:	4b3f      	ldr	r3, [pc, #252]	@ (800165c <HAL_ADC_ConfigChannel+0x364>)
 8001560:	0018      	movs	r0, r3
 8001562:	f7ff fc39 	bl	8000dd8 <LL_ADC_GetCommonPathInternalCh>
 8001566:	0003      	movs	r3, r0
 8001568:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a3c      	ldr	r2, [pc, #240]	@ (8001660 <HAL_ADC_ConfigChannel+0x368>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d123      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	2380      	movs	r3, #128	@ 0x80
 8001578:	041b      	lsls	r3, r3, #16
 800157a:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800157c:	d11e      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	2280      	movs	r2, #128	@ 0x80
 8001582:	0412      	lsls	r2, r2, #16
 8001584:	4313      	orrs	r3, r2
 8001586:	4a35      	ldr	r2, [pc, #212]	@ (800165c <HAL_ADC_ConfigChannel+0x364>)
 8001588:	0019      	movs	r1, r3
 800158a:	0010      	movs	r0, r2
 800158c:	f7ff fc10 	bl	8000db0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001590:	4b34      	ldr	r3, [pc, #208]	@ (8001664 <HAL_ADC_ConfigChannel+0x36c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4934      	ldr	r1, [pc, #208]	@ (8001668 <HAL_ADC_ConfigChannel+0x370>)
 8001596:	0018      	movs	r0, r3
 8001598:	f7fe fdc0 	bl	800011c <__udivsi3>
 800159c:	0003      	movs	r3, r0
 800159e:	001a      	movs	r2, r3
 80015a0:	0013      	movs	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	189b      	adds	r3, r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	3301      	adds	r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80015ac:	e002      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f9      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015ba:	e067      	b.n	800168c <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a2a      	ldr	r2, [pc, #168]	@ (800166c <HAL_ADC_ConfigChannel+0x374>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d162      	bne.n	800168c <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	03db      	lsls	r3, r3, #15
 80015cc:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80015ce:	d15d      	bne.n	800168c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	2280      	movs	r2, #128	@ 0x80
 80015d4:	03d2      	lsls	r2, r2, #15
 80015d6:	4313      	orrs	r3, r2
 80015d8:	4a20      	ldr	r2, [pc, #128]	@ (800165c <HAL_ADC_ConfigChannel+0x364>)
 80015da:	0019      	movs	r1, r3
 80015dc:	0010      	movs	r0, r2
 80015de:	f7ff fbe7 	bl	8000db0 <LL_ADC_SetCommonPathInternalCh>
 80015e2:	e053      	b.n	800168c <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691a      	ldr	r2, [r3, #16]
 80015e8:	2380      	movs	r3, #128	@ 0x80
 80015ea:	061b      	lsls	r3, r3, #24
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d004      	beq.n	80015fa <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015f4:	4a18      	ldr	r2, [pc, #96]	@ (8001658 <HAL_ADC_ConfigChannel+0x360>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d107      	bne.n	800160a <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	0019      	movs	r1, r3
 8001604:	0010      	movs	r0, r2
 8001606:	f7ff fc59 	bl	8000ebc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	da3c      	bge.n	800168c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001612:	4b12      	ldr	r3, [pc, #72]	@ (800165c <HAL_ADC_ConfigChannel+0x364>)
 8001614:	0018      	movs	r0, r3
 8001616:	f7ff fbdf 	bl	8000dd8 <LL_ADC_GetCommonPathInternalCh>
 800161a:	0003      	movs	r3, r0
 800161c:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a0f      	ldr	r2, [pc, #60]	@ (8001660 <HAL_ADC_ConfigChannel+0x368>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d108      	bne.n	800163a <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4a11      	ldr	r2, [pc, #68]	@ (8001670 <HAL_ADC_ConfigChannel+0x378>)
 800162c:	4013      	ands	r3, r2
 800162e:	4a0b      	ldr	r2, [pc, #44]	@ (800165c <HAL_ADC_ConfigChannel+0x364>)
 8001630:	0019      	movs	r1, r3
 8001632:	0010      	movs	r0, r2
 8001634:	f7ff fbbc 	bl	8000db0 <LL_ADC_SetCommonPathInternalCh>
 8001638:	e028      	b.n	800168c <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a0b      	ldr	r2, [pc, #44]	@ (800166c <HAL_ADC_ConfigChannel+0x374>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d123      	bne.n	800168c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4a0b      	ldr	r2, [pc, #44]	@ (8001674 <HAL_ADC_ConfigChannel+0x37c>)
 8001648:	4013      	ands	r3, r2
 800164a:	4a04      	ldr	r2, [pc, #16]	@ (800165c <HAL_ADC_ConfigChannel+0x364>)
 800164c:	0019      	movs	r1, r3
 800164e:	0010      	movs	r0, r2
 8001650:	f7ff fbae 	bl	8000db0 <LL_ADC_SetCommonPathInternalCh>
 8001654:	e01a      	b.n	800168c <HAL_ADC_ConfigChannel+0x394>
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	80000004 	.word	0x80000004
 800165c:	40012708 	.word	0x40012708
 8001660:	a4000200 	.word	0xa4000200
 8001664:	20000000 	.word	0x20000000
 8001668:	00030d40 	.word	0x00030d40
 800166c:	a8000400 	.word	0xa8000400
 8001670:	ff7fffff 	.word	0xff7fffff
 8001674:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167c:	2220      	movs	r2, #32
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001684:	2317      	movs	r3, #23
 8001686:	18fb      	adds	r3, r7, r3
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2254      	movs	r2, #84	@ 0x54
 8001690:	2100      	movs	r1, #0
 8001692:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001694:	2317      	movs	r3, #23
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	781b      	ldrb	r3, [r3, #0]
}
 800169a:	0018      	movs	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	b006      	add	sp, #24
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	46c0      	nop			@ (mov r8, r8)

080016a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	0002      	movs	r2, r0
 80016ac:	1dfb      	adds	r3, r7, #7
 80016ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016b0:	1dfb      	adds	r3, r7, #7
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80016b6:	d809      	bhi.n	80016cc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b8:	1dfb      	adds	r3, r7, #7
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	001a      	movs	r2, r3
 80016be:	231f      	movs	r3, #31
 80016c0:	401a      	ands	r2, r3
 80016c2:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <__NVIC_EnableIRQ+0x30>)
 80016c4:	2101      	movs	r1, #1
 80016c6:	4091      	lsls	r1, r2
 80016c8:	000a      	movs	r2, r1
 80016ca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80016cc:	46c0      	nop			@ (mov r8, r8)
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b002      	add	sp, #8
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	e000e100 	.word	0xe000e100

080016d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	0002      	movs	r2, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	1dfb      	adds	r3, r7, #7
 80016e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016e6:	1dfb      	adds	r3, r7, #7
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80016ec:	d828      	bhi.n	8001740 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016ee:	4a2f      	ldr	r2, [pc, #188]	@ (80017ac <__NVIC_SetPriority+0xd4>)
 80016f0:	1dfb      	adds	r3, r7, #7
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	b25b      	sxtb	r3, r3
 80016f6:	089b      	lsrs	r3, r3, #2
 80016f8:	33c0      	adds	r3, #192	@ 0xc0
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	589b      	ldr	r3, [r3, r2]
 80016fe:	1dfa      	adds	r2, r7, #7
 8001700:	7812      	ldrb	r2, [r2, #0]
 8001702:	0011      	movs	r1, r2
 8001704:	2203      	movs	r2, #3
 8001706:	400a      	ands	r2, r1
 8001708:	00d2      	lsls	r2, r2, #3
 800170a:	21ff      	movs	r1, #255	@ 0xff
 800170c:	4091      	lsls	r1, r2
 800170e:	000a      	movs	r2, r1
 8001710:	43d2      	mvns	r2, r2
 8001712:	401a      	ands	r2, r3
 8001714:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	019b      	lsls	r3, r3, #6
 800171a:	22ff      	movs	r2, #255	@ 0xff
 800171c:	401a      	ands	r2, r3
 800171e:	1dfb      	adds	r3, r7, #7
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	0018      	movs	r0, r3
 8001724:	2303      	movs	r3, #3
 8001726:	4003      	ands	r3, r0
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800172c:	481f      	ldr	r0, [pc, #124]	@ (80017ac <__NVIC_SetPriority+0xd4>)
 800172e:	1dfb      	adds	r3, r7, #7
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b25b      	sxtb	r3, r3
 8001734:	089b      	lsrs	r3, r3, #2
 8001736:	430a      	orrs	r2, r1
 8001738:	33c0      	adds	r3, #192	@ 0xc0
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800173e:	e031      	b.n	80017a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001740:	4a1b      	ldr	r2, [pc, #108]	@ (80017b0 <__NVIC_SetPriority+0xd8>)
 8001742:	1dfb      	adds	r3, r7, #7
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	0019      	movs	r1, r3
 8001748:	230f      	movs	r3, #15
 800174a:	400b      	ands	r3, r1
 800174c:	3b08      	subs	r3, #8
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3306      	adds	r3, #6
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	18d3      	adds	r3, r2, r3
 8001756:	3304      	adds	r3, #4
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	1dfa      	adds	r2, r7, #7
 800175c:	7812      	ldrb	r2, [r2, #0]
 800175e:	0011      	movs	r1, r2
 8001760:	2203      	movs	r2, #3
 8001762:	400a      	ands	r2, r1
 8001764:	00d2      	lsls	r2, r2, #3
 8001766:	21ff      	movs	r1, #255	@ 0xff
 8001768:	4091      	lsls	r1, r2
 800176a:	000a      	movs	r2, r1
 800176c:	43d2      	mvns	r2, r2
 800176e:	401a      	ands	r2, r3
 8001770:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	019b      	lsls	r3, r3, #6
 8001776:	22ff      	movs	r2, #255	@ 0xff
 8001778:	401a      	ands	r2, r3
 800177a:	1dfb      	adds	r3, r7, #7
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	0018      	movs	r0, r3
 8001780:	2303      	movs	r3, #3
 8001782:	4003      	ands	r3, r0
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001788:	4809      	ldr	r0, [pc, #36]	@ (80017b0 <__NVIC_SetPriority+0xd8>)
 800178a:	1dfb      	adds	r3, r7, #7
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	001c      	movs	r4, r3
 8001790:	230f      	movs	r3, #15
 8001792:	4023      	ands	r3, r4
 8001794:	3b08      	subs	r3, #8
 8001796:	089b      	lsrs	r3, r3, #2
 8001798:	430a      	orrs	r2, r1
 800179a:	3306      	adds	r3, #6
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	18c3      	adds	r3, r0, r3
 80017a0:	3304      	adds	r3, #4
 80017a2:	601a      	str	r2, [r3, #0]
}
 80017a4:	46c0      	nop			@ (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b003      	add	sp, #12
 80017aa:	bd90      	pop	{r4, r7, pc}
 80017ac:	e000e100 	.word	0xe000e100
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	1e5a      	subs	r2, r3, #1
 80017c0:	2380      	movs	r3, #128	@ 0x80
 80017c2:	045b      	lsls	r3, r3, #17
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d301      	bcc.n	80017cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017c8:	2301      	movs	r3, #1
 80017ca:	e010      	b.n	80017ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017cc:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <SysTick_Config+0x44>)
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	3a01      	subs	r2, #1
 80017d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d4:	2301      	movs	r3, #1
 80017d6:	425b      	negs	r3, r3
 80017d8:	2103      	movs	r1, #3
 80017da:	0018      	movs	r0, r3
 80017dc:	f7ff ff7c 	bl	80016d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e0:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <SysTick_Config+0x44>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e6:	4b04      	ldr	r3, [pc, #16]	@ (80017f8 <SysTick_Config+0x44>)
 80017e8:	2207      	movs	r2, #7
 80017ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	0018      	movs	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b002      	add	sp, #8
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	46c0      	nop			@ (mov r8, r8)
 80017f8:	e000e010 	.word	0xe000e010

080017fc <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	210f      	movs	r1, #15
 8001808:	187b      	adds	r3, r7, r1
 800180a:	1c02      	adds	r2, r0, #0
 800180c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	187b      	adds	r3, r7, r1
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b25b      	sxtb	r3, r3
 8001816:	0011      	movs	r1, r2
 8001818:	0018      	movs	r0, r3
 800181a:	f7ff ff5d 	bl	80016d8 <__NVIC_SetPriority>
}
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	46bd      	mov	sp, r7
 8001822:	b004      	add	sp, #16
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	0002      	movs	r2, r0
 800182e:	1dfb      	adds	r3, r7, #7
 8001830:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001832:	1dfb      	adds	r3, r7, #7
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b25b      	sxtb	r3, r3
 8001838:	0018      	movs	r0, r3
 800183a:	f7ff ff33 	bl	80016a4 <__NVIC_EnableIRQ>
}
 800183e:	46c0      	nop			@ (mov r8, r8)
 8001840:	46bd      	mov	sp, r7
 8001842:	b002      	add	sp, #8
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	0018      	movs	r0, r3
 8001852:	f7ff ffaf 	bl	80017b4 <SysTick_Config>
 8001856:	0003      	movs	r3, r0
}
 8001858:	0018      	movs	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	b002      	add	sp, #8
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	200b      	movs	r0, #11
 800186c:	183b      	adds	r3, r7, r0
 800186e:	1c0a      	adds	r2, r1, #0
 8001870:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001872:	2317      	movs	r3, #23
 8001874:	18fb      	adds	r3, r7, r3
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 800187a:	183b      	adds	r3, r7, r0
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d010      	beq.n	80018a4 <HAL_EXTI_RegisterCallback+0x44>
 8001882:	dc13      	bgt.n	80018ac <HAL_EXTI_RegisterCallback+0x4c>
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <HAL_EXTI_RegisterCallback+0x2e>
 8001888:	2b01      	cmp	r3, #1
 800188a:	d007      	beq.n	800189c <HAL_EXTI_RegisterCallback+0x3c>
 800188c:	e00e      	b.n	80018ac <HAL_EXTI_RegisterCallback+0x4c>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	609a      	str	r2, [r3, #8]
      break;
 800189a:	e00c      	b.n	80018b6 <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	605a      	str	r2, [r3, #4]
      break;
 80018a2:	e008      	b.n	80018b6 <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	609a      	str	r2, [r3, #8]
      break;
 80018aa:	e004      	b.n	80018b6 <HAL_EXTI_RegisterCallback+0x56>

    default:
      status = HAL_ERROR;
 80018ac:	2317      	movs	r3, #23
 80018ae:	18fb      	adds	r3, r7, r3
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
      break;
 80018b4:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 80018b6:	2317      	movs	r3, #23
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	781b      	ldrb	r3, [r3, #0]
}
 80018bc:	0018      	movs	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	b006      	add	sp, #24
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e003      	b.n	80018e0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80018de:	2300      	movs	r3, #0
  }
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b002      	add	sp, #8
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	0c1b      	lsrs	r3, r3, #16
 80018f6:	2201      	movs	r2, #1
 80018f8:	4013      	ands	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	221f      	movs	r2, #31
 8001902:	4013      	ands	r3, r2
 8001904:	2201      	movs	r2, #1
 8001906:	409a      	lsls	r2, r3
 8001908:	0013      	movs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	015b      	lsls	r3, r3, #5
 8001910:	4a18      	ldr	r2, [pc, #96]	@ (8001974 <HAL_EXTI_IRQHandler+0x8c>)
 8001912:	4694      	mov	ip, r2
 8001914:	4463      	add	r3, ip
 8001916:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d009      	beq.n	800193c <HAL_EXTI_IRQHandler+0x54>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <HAL_EXTI_IRQHandler+0x54>
    {
      hexti->RisingCallback();
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	015b      	lsls	r3, r3, #5
 8001940:	4a0d      	ldr	r2, [pc, #52]	@ (8001978 <HAL_EXTI_IRQHandler+0x90>)
 8001942:	4694      	mov	ip, r2
 8001944:	4463      	add	r3, ip
 8001946:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d009      	beq.n	800196c <HAL_EXTI_IRQHandler+0x84>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <HAL_EXTI_IRQHandler+0x84>
    {
      hexti->FallingCallback();
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	4798      	blx	r3
    }
  }
}
 800196c:	46c0      	nop			@ (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	b006      	add	sp, #24
 8001972:	bd80      	pop	{r7, pc}
 8001974:	4002180c 	.word	0x4002180c
 8001978:	40021810 	.word	0x40021810

0800197c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800198a:	e153      	b.n	8001c34 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4091      	lsls	r1, r2
 8001996:	000a      	movs	r2, r1
 8001998:	4013      	ands	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d100      	bne.n	80019a4 <HAL_GPIO_Init+0x28>
 80019a2:	e144      	b.n	8001c2e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x38>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b12      	cmp	r3, #18
 80019b2:	d125      	bne.n	8001a00 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	08da      	lsrs	r2, r3, #3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3208      	adds	r2, #8
 80019bc:	0092      	lsls	r2, r2, #2
 80019be:	58d3      	ldr	r3, [r2, r3]
 80019c0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	2207      	movs	r2, #7
 80019c6:	4013      	ands	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	220f      	movs	r2, #15
 80019cc:	409a      	lsls	r2, r3
 80019ce:	0013      	movs	r3, r2
 80019d0:	43da      	mvns	r2, r3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	4013      	ands	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	220f      	movs	r2, #15
 80019de:	401a      	ands	r2, r3
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	2107      	movs	r1, #7
 80019e4:	400b      	ands	r3, r1
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	409a      	lsls	r2, r3
 80019ea:	0013      	movs	r3, r2
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	08da      	lsrs	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3208      	adds	r2, #8
 80019fa:	0092      	lsls	r2, r2, #2
 80019fc:	6979      	ldr	r1, [r7, #20]
 80019fe:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	0013      	movs	r3, r2
 8001a10:	43da      	mvns	r2, r3
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	4013      	ands	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	401a      	ands	r2, r3
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	409a      	lsls	r2, r3
 8001a26:	0013      	movs	r3, r2
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d00b      	beq.n	8001a54 <HAL_GPIO_Init+0xd8>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d007      	beq.n	8001a54 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a48:	2b11      	cmp	r3, #17
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b12      	cmp	r3, #18
 8001a52:	d130      	bne.n	8001ab6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	409a      	lsls	r2, r3
 8001a62:	0013      	movs	r3, r2
 8001a64:	43da      	mvns	r2, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	409a      	lsls	r2, r3
 8001a76:	0013      	movs	r3, r2
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	409a      	lsls	r2, r3
 8001a90:	0013      	movs	r3, r2
 8001a92:	43da      	mvns	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	4013      	ands	r3, r2
 8001a98:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	091b      	lsrs	r3, r3, #4
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	0013      	movs	r3, r2
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d017      	beq.n	8001aee <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	2203      	movs	r2, #3
 8001aca:	409a      	lsls	r2, r3
 8001acc:	0013      	movs	r3, r2
 8001ace:	43da      	mvns	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	0013      	movs	r3, r2
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	2380      	movs	r3, #128	@ 0x80
 8001af4:	055b      	lsls	r3, r3, #21
 8001af6:	4013      	ands	r3, r2
 8001af8:	d100      	bne.n	8001afc <HAL_GPIO_Init+0x180>
 8001afa:	e098      	b.n	8001c2e <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001afc:	4a53      	ldr	r2, [pc, #332]	@ (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3318      	adds	r3, #24
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	589b      	ldr	r3, [r3, r2]
 8001b08:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	4013      	ands	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	220f      	movs	r2, #15
 8001b14:	409a      	lsls	r2, r3
 8001b16:	0013      	movs	r3, r2
 8001b18:	43da      	mvns	r2, r3
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	23a0      	movs	r3, #160	@ 0xa0
 8001b24:	05db      	lsls	r3, r3, #23
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d019      	beq.n	8001b5e <HAL_GPIO_Init+0x1e2>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a48      	ldr	r2, [pc, #288]	@ (8001c50 <HAL_GPIO_Init+0x2d4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d013      	beq.n	8001b5a <HAL_GPIO_Init+0x1de>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a47      	ldr	r2, [pc, #284]	@ (8001c54 <HAL_GPIO_Init+0x2d8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00d      	beq.n	8001b56 <HAL_GPIO_Init+0x1da>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a46      	ldr	r2, [pc, #280]	@ (8001c58 <HAL_GPIO_Init+0x2dc>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d007      	beq.n	8001b52 <HAL_GPIO_Init+0x1d6>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a45      	ldr	r2, [pc, #276]	@ (8001c5c <HAL_GPIO_Init+0x2e0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d101      	bne.n	8001b4e <HAL_GPIO_Init+0x1d2>
 8001b4a:	2305      	movs	r3, #5
 8001b4c:	e008      	b.n	8001b60 <HAL_GPIO_Init+0x1e4>
 8001b4e:	2306      	movs	r3, #6
 8001b50:	e006      	b.n	8001b60 <HAL_GPIO_Init+0x1e4>
 8001b52:	2303      	movs	r3, #3
 8001b54:	e004      	b.n	8001b60 <HAL_GPIO_Init+0x1e4>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e002      	b.n	8001b60 <HAL_GPIO_Init+0x1e4>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_GPIO_Init+0x1e4>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	2103      	movs	r1, #3
 8001b64:	400a      	ands	r2, r1
 8001b66:	00d2      	lsls	r2, r2, #3
 8001b68:	4093      	lsls	r3, r2
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001b70:	4936      	ldr	r1, [pc, #216]	@ (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	089b      	lsrs	r3, r3, #2
 8001b76:	3318      	adds	r3, #24
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001b7e:	4a33      	ldr	r2, [pc, #204]	@ (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001b80:	2380      	movs	r3, #128	@ 0x80
 8001b82:	58d3      	ldr	r3, [r2, r3]
 8001b84:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	43da      	mvns	r2, r3
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	2380      	movs	r3, #128	@ 0x80
 8001b96:	025b      	lsls	r3, r3, #9
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001ba4:	4929      	ldr	r1, [pc, #164]	@ (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001ba6:	2280      	movs	r2, #128	@ 0x80
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001bac:	4a27      	ldr	r2, [pc, #156]	@ (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bae:	2384      	movs	r3, #132	@ 0x84
 8001bb0:	58d3      	ldr	r3, [r2, r3]
 8001bb2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	2380      	movs	r3, #128	@ 0x80
 8001bc4:	029b      	lsls	r3, r3, #10
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001bd2:	491e      	ldr	r1, [pc, #120]	@ (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bd4:	2284      	movs	r2, #132	@ 0x84
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001bda:	4b1c      	ldr	r3, [pc, #112]	@ (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	43da      	mvns	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	4013      	ands	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	2380      	movs	r3, #128	@ 0x80
 8001bf0:	035b      	lsls	r3, r3, #13
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001bfe:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001c04:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	43da      	mvns	r2, r3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	4013      	ands	r3, r2
 8001c12:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	2380      	movs	r3, #128	@ 0x80
 8001c1a:	039b      	lsls	r3, r3, #14
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001c28:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <HAL_GPIO_Init+0x2d0>)
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	3301      	adds	r3, #1
 8001c32:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	40da      	lsrs	r2, r3
 8001c3c:	1e13      	subs	r3, r2, #0
 8001c3e:	d000      	beq.n	8001c42 <HAL_GPIO_Init+0x2c6>
 8001c40:	e6a4      	b.n	800198c <HAL_GPIO_Init+0x10>
  }
}
 8001c42:	46c0      	nop			@ (mov r8, r8)
 8001c44:	46c0      	nop			@ (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b006      	add	sp, #24
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40021800 	.word	0x40021800
 8001c50:	50000400 	.word	0x50000400
 8001c54:	50000800 	.word	0x50000800
 8001c58:	50000c00 	.word	0x50000c00
 8001c5c:	50001400 	.word	0x50001400

08001c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	0008      	movs	r0, r1
 8001c6a:	0011      	movs	r1, r2
 8001c6c:	1cbb      	adds	r3, r7, #2
 8001c6e:	1c02      	adds	r2, r0, #0
 8001c70:	801a      	strh	r2, [r3, #0]
 8001c72:	1c7b      	adds	r3, r7, #1
 8001c74:	1c0a      	adds	r2, r1, #0
 8001c76:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c78:	1c7b      	adds	r3, r7, #1
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c80:	1cbb      	adds	r3, r7, #2
 8001c82:	881a      	ldrh	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c88:	e003      	b.n	8001c92 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c8a:	1cbb      	adds	r3, r7, #2
 8001c8c:	881a      	ldrh	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c92:	46c0      	nop			@ (mov r8, r8)
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b002      	add	sp, #8
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	000a      	movs	r2, r1
 8001ca4:	1cbb      	adds	r3, r7, #2
 8001ca6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cae:	1cbb      	adds	r3, r7, #2
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	041a      	lsls	r2, r3, #16
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	1cb9      	adds	r1, r7, #2
 8001cbe:	8809      	ldrh	r1, [r1, #0]
 8001cc0:	400b      	ands	r3, r1
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	619a      	str	r2, [r3, #24]
}
 8001cc8:	46c0      	nop			@ (mov r8, r8)
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b004      	add	sp, #16
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e1d0      	b.n	8002084 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d100      	bne.n	8001cee <HAL_RCC_OscConfig+0x1e>
 8001cec:	e069      	b.n	8001dc2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cee:	4bc8      	ldr	r3, [pc, #800]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2238      	movs	r2, #56	@ 0x38
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d105      	bne.n	8001d0a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d15d      	bne.n	8001dc2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e1bc      	b.n	8002084 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	2380      	movs	r3, #128	@ 0x80
 8001d10:	025b      	lsls	r3, r3, #9
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_OscConfig+0x56>
 8001d16:	4bbe      	ldr	r3, [pc, #760]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4bbd      	ldr	r3, [pc, #756]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001d1c:	2180      	movs	r1, #128	@ 0x80
 8001d1e:	0249      	lsls	r1, r1, #9
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	e020      	b.n	8001d68 <HAL_RCC_OscConfig+0x98>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	23a0      	movs	r3, #160	@ 0xa0
 8001d2c:	02db      	lsls	r3, r3, #11
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d10e      	bne.n	8001d50 <HAL_RCC_OscConfig+0x80>
 8001d32:	4bb7      	ldr	r3, [pc, #732]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	4bb6      	ldr	r3, [pc, #728]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001d38:	2180      	movs	r1, #128	@ 0x80
 8001d3a:	02c9      	lsls	r1, r1, #11
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	4bb3      	ldr	r3, [pc, #716]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4bb2      	ldr	r3, [pc, #712]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001d46:	2180      	movs	r1, #128	@ 0x80
 8001d48:	0249      	lsls	r1, r1, #9
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	e00b      	b.n	8001d68 <HAL_RCC_OscConfig+0x98>
 8001d50:	4baf      	ldr	r3, [pc, #700]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4bae      	ldr	r3, [pc, #696]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001d56:	49af      	ldr	r1, [pc, #700]	@ (8002014 <HAL_RCC_OscConfig+0x344>)
 8001d58:	400a      	ands	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	4bac      	ldr	r3, [pc, #688]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4bab      	ldr	r3, [pc, #684]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001d62:	49ad      	ldr	r1, [pc, #692]	@ (8002018 <HAL_RCC_OscConfig+0x348>)
 8001d64:	400a      	ands	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d014      	beq.n	8001d9a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7ff f814 	bl	8000d9c <HAL_GetTick>
 8001d74:	0003      	movs	r3, r0
 8001d76:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001d7a:	f7ff f80f 	bl	8000d9c <HAL_GetTick>
 8001d7e:	0002      	movs	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b64      	cmp	r3, #100	@ 0x64
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e17b      	b.n	8002084 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d8c:	4ba0      	ldr	r3, [pc, #640]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	2380      	movs	r3, #128	@ 0x80
 8001d92:	029b      	lsls	r3, r3, #10
 8001d94:	4013      	ands	r3, r2
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0xaa>
 8001d98:	e013      	b.n	8001dc2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9a:	f7fe ffff 	bl	8000d9c <HAL_GetTick>
 8001d9e:	0003      	movs	r3, r0
 8001da0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001da4:	f7fe fffa 	bl	8000d9c <HAL_GetTick>
 8001da8:	0002      	movs	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	@ 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e166      	b.n	8002084 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001db6:	4b96      	ldr	r3, [pc, #600]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	2380      	movs	r3, #128	@ 0x80
 8001dbc:	029b      	lsls	r3, r3, #10
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d100      	bne.n	8001dce <HAL_RCC_OscConfig+0xfe>
 8001dcc:	e086      	b.n	8001edc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dce:	4b90      	ldr	r3, [pc, #576]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2238      	movs	r2, #56	@ 0x38
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d12f      	bne.n	8001e3e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e14c      	b.n	8002084 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dea:	4b89      	ldr	r3, [pc, #548]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4a8b      	ldr	r2, [pc, #556]	@ (800201c <HAL_RCC_OscConfig+0x34c>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	0019      	movs	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	021a      	lsls	r2, r3, #8
 8001dfa:	4b85      	ldr	r3, [pc, #532]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d112      	bne.n	8001e2c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e06:	4b82      	ldr	r3, [pc, #520]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a85      	ldr	r2, [pc, #532]	@ (8002020 <HAL_RCC_OscConfig+0x350>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	0019      	movs	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	4b7e      	ldr	r3, [pc, #504]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001e16:	430a      	orrs	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001e1a:	4b7d      	ldr	r3, [pc, #500]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	0adb      	lsrs	r3, r3, #11
 8001e20:	2207      	movs	r2, #7
 8001e22:	4013      	ands	r3, r2
 8001e24:	4a7f      	ldr	r2, [pc, #508]	@ (8002024 <HAL_RCC_OscConfig+0x354>)
 8001e26:	40da      	lsrs	r2, r3
 8001e28:	4b7f      	ldr	r3, [pc, #508]	@ (8002028 <HAL_RCC_OscConfig+0x358>)
 8001e2a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e2c:	4b7f      	ldr	r3, [pc, #508]	@ (800202c <HAL_RCC_OscConfig+0x35c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0018      	movs	r0, r3
 8001e32:	f7fe ff57 	bl	8000ce4 <HAL_InitTick>
 8001e36:	1e03      	subs	r3, r0, #0
 8001e38:	d050      	beq.n	8001edc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e122      	b.n	8002084 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d030      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e46:	4b72      	ldr	r3, [pc, #456]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a75      	ldr	r2, [pc, #468]	@ (8002020 <HAL_RCC_OscConfig+0x350>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	0019      	movs	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	4b6e      	ldr	r3, [pc, #440]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001e56:	430a      	orrs	r2, r1
 8001e58:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001e5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4b6c      	ldr	r3, [pc, #432]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001e60:	2180      	movs	r1, #128	@ 0x80
 8001e62:	0049      	lsls	r1, r1, #1
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e68:	f7fe ff98 	bl	8000d9c <HAL_GetTick>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001e72:	f7fe ff93 	bl	8000d9c <HAL_GetTick>
 8001e76:	0002      	movs	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e0ff      	b.n	8002084 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e84:	4b62      	ldr	r3, [pc, #392]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	2380      	movs	r3, #128	@ 0x80
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e90:	4b5f      	ldr	r3, [pc, #380]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4a61      	ldr	r2, [pc, #388]	@ (800201c <HAL_RCC_OscConfig+0x34c>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	0019      	movs	r1, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	021a      	lsls	r2, r3, #8
 8001ea0:	4b5b      	ldr	r3, [pc, #364]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	e019      	b.n	8001edc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001ea8:	4b59      	ldr	r3, [pc, #356]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b58      	ldr	r3, [pc, #352]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001eae:	4960      	ldr	r1, [pc, #384]	@ (8002030 <HAL_RCC_OscConfig+0x360>)
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7fe ff72 	bl	8000d9c <HAL_GetTick>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001ebe:	f7fe ff6d 	bl	8000d9c <HAL_GetTick>
 8001ec2:	0002      	movs	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e0d9      	b.n	8002084 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ed0:	4b4f      	ldr	r3, [pc, #316]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	2380      	movs	r3, #128	@ 0x80
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d1f0      	bne.n	8001ebe <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2208      	movs	r2, #8
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d042      	beq.n	8001f6c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001ee6:	4b4a      	ldr	r3, [pc, #296]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2238      	movs	r2, #56	@ 0x38
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b18      	cmp	r3, #24
 8001ef0:	d105      	bne.n	8001efe <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d138      	bne.n	8001f6c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e0c2      	b.n	8002084 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d019      	beq.n	8001f3a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001f06:	4b42      	ldr	r3, [pc, #264]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001f08:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f0a:	4b41      	ldr	r3, [pc, #260]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f12:	f7fe ff43 	bl	8000d9c <HAL_GetTick>
 8001f16:	0003      	movs	r3, r0
 8001f18:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001f1c:	f7fe ff3e 	bl	8000d9c <HAL_GetTick>
 8001f20:	0002      	movs	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e0aa      	b.n	8002084 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001f2e:	4b38      	ldr	r3, [pc, #224]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f32:	2202      	movs	r2, #2
 8001f34:	4013      	ands	r3, r2
 8001f36:	d0f1      	beq.n	8001f1c <HAL_RCC_OscConfig+0x24c>
 8001f38:	e018      	b.n	8001f6c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001f3a:	4b35      	ldr	r3, [pc, #212]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001f3c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f3e:	4b34      	ldr	r3, [pc, #208]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001f40:	2101      	movs	r1, #1
 8001f42:	438a      	bics	r2, r1
 8001f44:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f46:	f7fe ff29 	bl	8000d9c <HAL_GetTick>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001f50:	f7fe ff24 	bl	8000d9c <HAL_GetTick>
 8001f54:	0002      	movs	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e090      	b.n	8002084 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001f62:	4b2b      	ldr	r3, [pc, #172]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f66:	2202      	movs	r2, #2
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d1f1      	bne.n	8001f50 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2204      	movs	r2, #4
 8001f72:	4013      	ands	r3, r2
 8001f74:	d100      	bne.n	8001f78 <HAL_RCC_OscConfig+0x2a8>
 8001f76:	e084      	b.n	8002082 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f78:	230f      	movs	r3, #15
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001f80:	4b23      	ldr	r3, [pc, #140]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2238      	movs	r2, #56	@ 0x38
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b20      	cmp	r3, #32
 8001f8a:	d106      	bne.n	8001f9a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d000      	beq.n	8001f96 <HAL_RCC_OscConfig+0x2c6>
 8001f94:	e075      	b.n	8002082 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e074      	b.n	8002084 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d106      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x2e0>
 8001fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001fa4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001fa8:	2101      	movs	r1, #1
 8001faa:	430a      	orrs	r2, r1
 8001fac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fae:	e01c      	b.n	8001fea <HAL_RCC_OscConfig+0x31a>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d10c      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x302>
 8001fb8:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001fba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fbc:	4b14      	ldr	r3, [pc, #80]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001fbe:	2104      	movs	r1, #4
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fc4:	4b12      	ldr	r3, [pc, #72]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001fc6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fc8:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001fca:	2101      	movs	r1, #1
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fd0:	e00b      	b.n	8001fea <HAL_RCC_OscConfig+0x31a>
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001fd4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001fd8:	2101      	movs	r1, #1
 8001fda:	438a      	bics	r2, r1
 8001fdc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fde:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001fe0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <HAL_RCC_OscConfig+0x340>)
 8001fe4:	2104      	movs	r1, #4
 8001fe6:	438a      	bics	r2, r1
 8001fe8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d028      	beq.n	8002044 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff2:	f7fe fed3 	bl	8000d9c <HAL_GetTick>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001ffa:	e01d      	b.n	8002038 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffc:	f7fe fece 	bl	8000d9c <HAL_GetTick>
 8002000:	0002      	movs	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	4a0b      	ldr	r2, [pc, #44]	@ (8002034 <HAL_RCC_OscConfig+0x364>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d915      	bls.n	8002038 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e039      	b.n	8002084 <HAL_RCC_OscConfig+0x3b4>
 8002010:	40021000 	.word	0x40021000
 8002014:	fffeffff 	.word	0xfffeffff
 8002018:	fffbffff 	.word	0xfffbffff
 800201c:	ffff80ff 	.word	0xffff80ff
 8002020:	ffffc7ff 	.word	0xffffc7ff
 8002024:	02dc6c00 	.word	0x02dc6c00
 8002028:	20000000 	.word	0x20000000
 800202c:	2000001c 	.word	0x2000001c
 8002030:	fffffeff 	.word	0xfffffeff
 8002034:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002038:	4b14      	ldr	r3, [pc, #80]	@ (800208c <HAL_RCC_OscConfig+0x3bc>)
 800203a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800203c:	2202      	movs	r2, #2
 800203e:	4013      	ands	r3, r2
 8002040:	d0dc      	beq.n	8001ffc <HAL_RCC_OscConfig+0x32c>
 8002042:	e013      	b.n	800206c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7fe feaa 	bl	8000d9c <HAL_GetTick>
 8002048:	0003      	movs	r3, r0
 800204a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800204c:	e009      	b.n	8002062 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204e:	f7fe fea5 	bl	8000d9c <HAL_GetTick>
 8002052:	0002      	movs	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	4a0d      	ldr	r2, [pc, #52]	@ (8002090 <HAL_RCC_OscConfig+0x3c0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e010      	b.n	8002084 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002062:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <HAL_RCC_OscConfig+0x3bc>)
 8002064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002066:	2202      	movs	r2, #2
 8002068:	4013      	ands	r3, r2
 800206a:	d1f0      	bne.n	800204e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800206c:	230f      	movs	r3, #15
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d105      	bne.n	8002082 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002076:	4b05      	ldr	r3, [pc, #20]	@ (800208c <HAL_RCC_OscConfig+0x3bc>)
 8002078:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800207a:	4b04      	ldr	r3, [pc, #16]	@ (800208c <HAL_RCC_OscConfig+0x3bc>)
 800207c:	4905      	ldr	r1, [pc, #20]	@ (8002094 <HAL_RCC_OscConfig+0x3c4>)
 800207e:	400a      	ands	r2, r1
 8002080:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	0018      	movs	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	b006      	add	sp, #24
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	00001388 	.word	0x00001388
 8002094:	efffffff 	.word	0xefffffff

08002098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0e9      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020ac:	4b76      	ldr	r3, [pc, #472]	@ (8002288 <HAL_RCC_ClockConfig+0x1f0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2207      	movs	r2, #7
 80020b2:	4013      	ands	r3, r2
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d91e      	bls.n	80020f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ba:	4b73      	ldr	r3, [pc, #460]	@ (8002288 <HAL_RCC_ClockConfig+0x1f0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2207      	movs	r2, #7
 80020c0:	4393      	bics	r3, r2
 80020c2:	0019      	movs	r1, r3
 80020c4:	4b70      	ldr	r3, [pc, #448]	@ (8002288 <HAL_RCC_ClockConfig+0x1f0>)
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020cc:	f7fe fe66 	bl	8000d9c <HAL_GetTick>
 80020d0:	0003      	movs	r3, r0
 80020d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020d4:	e009      	b.n	80020ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80020d6:	f7fe fe61 	bl	8000d9c <HAL_GetTick>
 80020da:	0002      	movs	r2, r0
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	4a6a      	ldr	r2, [pc, #424]	@ (800228c <HAL_RCC_ClockConfig+0x1f4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e0ca      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020ea:	4b67      	ldr	r3, [pc, #412]	@ (8002288 <HAL_RCC_ClockConfig+0x1f0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2207      	movs	r2, #7
 80020f0:	4013      	ands	r3, r2
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d1ee      	bne.n	80020d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2202      	movs	r2, #2
 80020fe:	4013      	ands	r3, r2
 8002100:	d017      	beq.n	8002132 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2204      	movs	r2, #4
 8002108:	4013      	ands	r3, r2
 800210a:	d008      	beq.n	800211e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800210c:	4b60      	ldr	r3, [pc, #384]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4a60      	ldr	r2, [pc, #384]	@ (8002294 <HAL_RCC_ClockConfig+0x1fc>)
 8002112:	401a      	ands	r2, r3
 8002114:	4b5e      	ldr	r3, [pc, #376]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 8002116:	21b0      	movs	r1, #176	@ 0xb0
 8002118:	0109      	lsls	r1, r1, #4
 800211a:	430a      	orrs	r2, r1
 800211c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211e:	4b5c      	ldr	r3, [pc, #368]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	4a5d      	ldr	r2, [pc, #372]	@ (8002298 <HAL_RCC_ClockConfig+0x200>)
 8002124:	4013      	ands	r3, r2
 8002126:	0019      	movs	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	4b58      	ldr	r3, [pc, #352]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 800212e:	430a      	orrs	r2, r1
 8002130:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2201      	movs	r2, #1
 8002138:	4013      	ands	r3, r2
 800213a:	d055      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800213c:	4b54      	ldr	r3, [pc, #336]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	221c      	movs	r2, #28
 8002142:	4393      	bics	r3, r2
 8002144:	0019      	movs	r1, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	4b51      	ldr	r3, [pc, #324]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 800214c:	430a      	orrs	r2, r1
 800214e:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d107      	bne.n	8002168 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002158:	4b4d      	ldr	r3, [pc, #308]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	2380      	movs	r3, #128	@ 0x80
 800215e:	029b      	lsls	r3, r3, #10
 8002160:	4013      	ands	r3, r2
 8002162:	d11f      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e08b      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d107      	bne.n	8002180 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002170:	4b47      	ldr	r3, [pc, #284]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	2380      	movs	r3, #128	@ 0x80
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4013      	ands	r3, r2
 800217a:	d113      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e07f      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d106      	bne.n	8002196 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002188:	4b41      	ldr	r3, [pc, #260]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 800218a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800218c:	2202      	movs	r2, #2
 800218e:	4013      	ands	r3, r2
 8002190:	d108      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e074      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002196:	4b3e      	ldr	r3, [pc, #248]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 8002198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219a:	2202      	movs	r2, #2
 800219c:	4013      	ands	r3, r2
 800219e:	d101      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e06d      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2207      	movs	r2, #7
 80021aa:	4393      	bics	r3, r2
 80021ac:	0019      	movs	r1, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	4b37      	ldr	r3, [pc, #220]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 80021b4:	430a      	orrs	r2, r1
 80021b6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021b8:	f7fe fdf0 	bl	8000d9c <HAL_GetTick>
 80021bc:	0003      	movs	r3, r0
 80021be:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c0:	e009      	b.n	80021d6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80021c2:	f7fe fdeb 	bl	8000d9c <HAL_GetTick>
 80021c6:	0002      	movs	r2, r0
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	4a2f      	ldr	r2, [pc, #188]	@ (800228c <HAL_RCC_ClockConfig+0x1f4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e054      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2238      	movs	r2, #56	@ 0x38
 80021dc:	401a      	ands	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d1ec      	bne.n	80021c2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e8:	4b27      	ldr	r3, [pc, #156]	@ (8002288 <HAL_RCC_ClockConfig+0x1f0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2207      	movs	r2, #7
 80021ee:	4013      	ands	r3, r2
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d21e      	bcs.n	8002234 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b24      	ldr	r3, [pc, #144]	@ (8002288 <HAL_RCC_ClockConfig+0x1f0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2207      	movs	r2, #7
 80021fc:	4393      	bics	r3, r2
 80021fe:	0019      	movs	r1, r3
 8002200:	4b21      	ldr	r3, [pc, #132]	@ (8002288 <HAL_RCC_ClockConfig+0x1f0>)
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002208:	f7fe fdc8 	bl	8000d9c <HAL_GetTick>
 800220c:	0003      	movs	r3, r0
 800220e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002210:	e009      	b.n	8002226 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002212:	f7fe fdc3 	bl	8000d9c <HAL_GetTick>
 8002216:	0002      	movs	r2, r0
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	4a1b      	ldr	r2, [pc, #108]	@ (800228c <HAL_RCC_ClockConfig+0x1f4>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e02c      	b.n	8002280 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002226:	4b18      	ldr	r3, [pc, #96]	@ (8002288 <HAL_RCC_ClockConfig+0x1f0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2207      	movs	r2, #7
 800222c:	4013      	ands	r3, r2
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d1ee      	bne.n	8002212 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2204      	movs	r2, #4
 800223a:	4013      	ands	r3, r2
 800223c:	d009      	beq.n	8002252 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800223e:	4b14      	ldr	r3, [pc, #80]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	4a16      	ldr	r2, [pc, #88]	@ (800229c <HAL_RCC_ClockConfig+0x204>)
 8002244:	4013      	ands	r3, r2
 8002246:	0019      	movs	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	4b10      	ldr	r3, [pc, #64]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 800224e:	430a      	orrs	r2, r1
 8002250:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002252:	f000 f82b 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 8002256:	0001      	movs	r1, r0
 8002258:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <HAL_RCC_ClockConfig+0x1f8>)
 800225a:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	220f      	movs	r2, #15
 8002260:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002262:	4b0f      	ldr	r3, [pc, #60]	@ (80022a0 <HAL_RCC_ClockConfig+0x208>)
 8002264:	0092      	lsls	r2, r2, #2
 8002266:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002268:	221f      	movs	r2, #31
 800226a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800226c:	000a      	movs	r2, r1
 800226e:	40da      	lsrs	r2, r3
 8002270:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <HAL_RCC_ClockConfig+0x20c>)
 8002272:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002274:	4b0c      	ldr	r3, [pc, #48]	@ (80022a8 <HAL_RCC_ClockConfig+0x210>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	0018      	movs	r0, r3
 800227a:	f7fe fd33 	bl	8000ce4 <HAL_InitTick>
 800227e:	0003      	movs	r3, r0
}
 8002280:	0018      	movs	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	b004      	add	sp, #16
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40022000 	.word	0x40022000
 800228c:	00001388 	.word	0x00001388
 8002290:	40021000 	.word	0x40021000
 8002294:	ffff84ff 	.word	0xffff84ff
 8002298:	fffff0ff 	.word	0xfffff0ff
 800229c:	ffff8fff 	.word	0xffff8fff
 80022a0:	08003dec 	.word	0x08003dec
 80022a4:	20000000 	.word	0x20000000
 80022a8:	2000001c 	.word	0x2000001c

080022ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 80022b2:	4b23      	ldr	r3, [pc, #140]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x94>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	2207      	movs	r2, #7
 80022ba:	4013      	ands	r3, r2
 80022bc:	3301      	adds	r3, #1
 80022be:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80022c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x94>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2238      	movs	r2, #56	@ 0x38
 80022c6:	4013      	ands	r3, r2
 80022c8:	d10f      	bne.n	80022ea <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80022ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x94>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	0adb      	lsrs	r3, r3, #11
 80022d0:	2207      	movs	r2, #7
 80022d2:	4013      	ands	r3, r2
 80022d4:	2201      	movs	r2, #1
 80022d6:	409a      	lsls	r2, r3
 80022d8:	0013      	movs	r3, r2
 80022da:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4819      	ldr	r0, [pc, #100]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x98>)
 80022e0:	f7fd ff1c 	bl	800011c <__udivsi3>
 80022e4:	0003      	movs	r3, r0
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	e01e      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80022ea:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x94>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2238      	movs	r2, #56	@ 0x38
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d102      	bne.n	80022fc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022f6:	4b13      	ldr	r3, [pc, #76]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x98>)
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	e015      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80022fc:	4b10      	ldr	r3, [pc, #64]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x94>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2238      	movs	r2, #56	@ 0x38
 8002302:	4013      	ands	r3, r2
 8002304:	2b20      	cmp	r3, #32
 8002306:	d103      	bne.n	8002310 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002308:	2380      	movs	r3, #128	@ 0x80
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	e00b      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x94>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2238      	movs	r2, #56	@ 0x38
 8002316:	4013      	ands	r3, r2
 8002318:	2b18      	cmp	r3, #24
 800231a:	d103      	bne.n	8002324 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800231c:	23fa      	movs	r3, #250	@ 0xfa
 800231e:	01db      	lsls	r3, r3, #7
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	e001      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f7fd fef6 	bl	800011c <__udivsi3>
 8002330:	0003      	movs	r3, r0
 8002332:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8002334:	68fb      	ldr	r3, [r7, #12]
}
 8002336:	0018      	movs	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	b004      	add	sp, #16
 800233c:	bd80      	pop	{r7, pc}
 800233e:	46c0      	nop			@ (mov r8, r8)
 8002340:	40021000 	.word	0x40021000
 8002344:	02dc6c00 	.word	0x02dc6c00

08002348 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800234c:	f7ff ffae 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 8002350:	0001      	movs	r1, r0
 8002352:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <HAL_RCC_GetHCLKFreq+0x30>)
 8002354:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	220f      	movs	r2, #15
 800235a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800235c:	4b07      	ldr	r3, [pc, #28]	@ (800237c <HAL_RCC_GetHCLKFreq+0x34>)
 800235e:	0092      	lsls	r2, r2, #2
 8002360:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002362:	221f      	movs	r2, #31
 8002364:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002366:	000a      	movs	r2, r1
 8002368:	40da      	lsrs	r2, r3
 800236a:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <HAL_RCC_GetHCLKFreq+0x38>)
 800236c:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800236e:	4b04      	ldr	r3, [pc, #16]	@ (8002380 <HAL_RCC_GetHCLKFreq+0x38>)
 8002370:	681b      	ldr	r3, [r3, #0]
}
 8002372:	0018      	movs	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	08003dec 	.word	0x08003dec
 8002380:	20000000 	.word	0x20000000

08002384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002388:	f7ff ffde 	bl	8002348 <HAL_RCC_GetHCLKFreq>
 800238c:	0001      	movs	r1, r0
 800238e:	4b07      	ldr	r3, [pc, #28]	@ (80023ac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	0b1b      	lsrs	r3, r3, #12
 8002394:	2207      	movs	r2, #7
 8002396:	401a      	ands	r2, r3
 8002398:	4b05      	ldr	r3, [pc, #20]	@ (80023b0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800239a:	0092      	lsls	r2, r2, #2
 800239c:	58d3      	ldr	r3, [r2, r3]
 800239e:	221f      	movs	r2, #31
 80023a0:	4013      	ands	r3, r2
 80023a2:	40d9      	lsrs	r1, r3
 80023a4:	000b      	movs	r3, r1
}
 80023a6:	0018      	movs	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	08003e2c 	.word	0x08003e2c

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80023bc:	2313      	movs	r3, #19
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c4:	2312      	movs	r3, #18
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2240      	movs	r2, #64	@ 0x40
 80023d2:	4013      	ands	r3, r2
 80023d4:	d100      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80023d6:	e079      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d8:	2011      	movs	r0, #17
 80023da:	183b      	adds	r3, r7, r0
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e0:	4b63      	ldr	r3, [pc, #396]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023e4:	2380      	movs	r3, #128	@ 0x80
 80023e6:	055b      	lsls	r3, r3, #21
 80023e8:	4013      	ands	r3, r2
 80023ea:	d110      	bne.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ec:	4b60      	ldr	r3, [pc, #384]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023f0:	4b5f      	ldr	r3, [pc, #380]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023f2:	2180      	movs	r1, #128	@ 0x80
 80023f4:	0549      	lsls	r1, r1, #21
 80023f6:	430a      	orrs	r2, r1
 80023f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023fe:	2380      	movs	r3, #128	@ 0x80
 8002400:	055b      	lsls	r3, r3, #21
 8002402:	4013      	ands	r3, r2
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002408:	183b      	adds	r3, r7, r0
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800240e:	4b58      	ldr	r3, [pc, #352]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002410:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002412:	23c0      	movs	r3, #192	@ 0xc0
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4013      	ands	r3, r2
 8002418:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d019      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	429a      	cmp	r2, r3
 8002428:	d014      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800242a:	4b51      	ldr	r3, [pc, #324]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800242c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242e:	4a51      	ldr	r2, [pc, #324]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002430:	4013      	ands	r3, r2
 8002432:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002434:	4b4e      	ldr	r3, [pc, #312]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002436:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002438:	4b4d      	ldr	r3, [pc, #308]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800243a:	2180      	movs	r1, #128	@ 0x80
 800243c:	0249      	lsls	r1, r1, #9
 800243e:	430a      	orrs	r2, r1
 8002440:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002442:	4b4b      	ldr	r3, [pc, #300]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002444:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002446:	4b4a      	ldr	r3, [pc, #296]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002448:	494b      	ldr	r1, [pc, #300]	@ (8002578 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800244a:	400a      	ands	r2, r1
 800244c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800244e:	4b48      	ldr	r3, [pc, #288]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2201      	movs	r2, #1
 8002458:	4013      	ands	r3, r2
 800245a:	d016      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245c:	f7fe fc9e 	bl	8000d9c <HAL_GetTick>
 8002460:	0003      	movs	r3, r0
 8002462:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002464:	e00c      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002466:	f7fe fc99 	bl	8000d9c <HAL_GetTick>
 800246a:	0002      	movs	r2, r0
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	4a42      	ldr	r2, [pc, #264]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d904      	bls.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8002476:	2313      	movs	r3, #19
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	2203      	movs	r2, #3
 800247c:	701a      	strb	r2, [r3, #0]
          break;
 800247e:	e004      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002480:	4b3b      	ldr	r3, [pc, #236]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002484:	2202      	movs	r2, #2
 8002486:	4013      	ands	r3, r2
 8002488:	d0ed      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 800248a:	2313      	movs	r3, #19
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10a      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002494:	4b36      	ldr	r3, [pc, #216]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002498:	4a36      	ldr	r2, [pc, #216]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800249a:	4013      	ands	r3, r2
 800249c:	0019      	movs	r1, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	4b33      	ldr	r3, [pc, #204]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024a4:	430a      	orrs	r2, r1
 80024a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024a8:	e005      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024aa:	2312      	movs	r3, #18
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	2213      	movs	r2, #19
 80024b0:	18ba      	adds	r2, r7, r2
 80024b2:	7812      	ldrb	r2, [r2, #0]
 80024b4:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024b6:	2311      	movs	r3, #17
 80024b8:	18fb      	adds	r3, r7, r3
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d105      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024c6:	492e      	ldr	r1, [pc, #184]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80024c8:	400a      	ands	r2, r1
 80024ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2201      	movs	r2, #1
 80024d2:	4013      	ands	r3, r2
 80024d4:	d009      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024d6:	4b26      	ldr	r3, [pc, #152]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024da:	2203      	movs	r2, #3
 80024dc:	4393      	bics	r3, r2
 80024de:	0019      	movs	r1, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	4b22      	ldr	r3, [pc, #136]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024e6:	430a      	orrs	r2, r1
 80024e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2202      	movs	r2, #2
 80024f0:	4013      	ands	r3, r2
 80024f2:	d009      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f8:	4a22      	ldr	r2, [pc, #136]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	0019      	movs	r1, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	4b1b      	ldr	r3, [pc, #108]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002504:	430a      	orrs	r2, r1
 8002506:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2220      	movs	r2, #32
 800250e:	4013      	ands	r3, r2
 8002510:	d008      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002512:	4b17      	ldr	r3, [pc, #92]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	0899      	lsrs	r1, r3, #2
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695a      	ldr	r2, [r3, #20]
 800251e:	4b14      	ldr	r3, [pc, #80]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002520:	430a      	orrs	r2, r1
 8002522:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2204      	movs	r2, #4
 800252a:	4013      	ands	r3, r2
 800252c:	d009      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800252e:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002532:	4a15      	ldr	r2, [pc, #84]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002534:	4013      	ands	r3, r2
 8002536:	0019      	movs	r1, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800253e:	430a      	orrs	r2, r1
 8002540:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2280      	movs	r2, #128	@ 0x80
 8002548:	4013      	ands	r3, r2
 800254a:	d009      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800254c:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	22e0      	movs	r2, #224	@ 0xe0
 8002552:	4393      	bics	r3, r2
 8002554:	0019      	movs	r1, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800255c:	430a      	orrs	r2, r1
 800255e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002560:	2312      	movs	r3, #18
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	781b      	ldrb	r3, [r3, #0]
}
 8002566:	0018      	movs	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	b006      	add	sp, #24
 800256c:	bd80      	pop	{r7, pc}
 800256e:	46c0      	nop			@ (mov r8, r8)
 8002570:	40021000 	.word	0x40021000
 8002574:	fffffcff 	.word	0xfffffcff
 8002578:	fffeffff 	.word	0xfffeffff
 800257c:	00001388 	.word	0x00001388
 8002580:	efffffff 	.word	0xefffffff
 8002584:	ffffcfff 	.word	0xffffcfff
 8002588:	ffff3fff 	.word	0xffff3fff

0800258c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e046      	b.n	800262c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2288      	movs	r2, #136	@ 0x88
 80025a2:	589b      	ldr	r3, [r3, r2]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d107      	bne.n	80025b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2284      	movs	r2, #132	@ 0x84
 80025ac:	2100      	movs	r1, #0
 80025ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	0018      	movs	r0, r3
 80025b4:	f000 f840 	bl	8002638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2288      	movs	r2, #136	@ 0x88
 80025bc:	2124      	movs	r1, #36	@ 0x24
 80025be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2101      	movs	r1, #1
 80025cc:	438a      	bics	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	0018      	movs	r0, r3
 80025dc:	f000 fa56 	bl	8002a8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	0018      	movs	r0, r3
 80025e4:	f000 f8d4 	bl	8002790 <UART_SetConfig>
 80025e8:	0003      	movs	r3, r0
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e01c      	b.n	800262c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	490d      	ldr	r1, [pc, #52]	@ (8002634 <HAL_UART_Init+0xa8>)
 80025fe:	400a      	ands	r2, r1
 8002600:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	212a      	movs	r1, #42	@ 0x2a
 800260e:	438a      	bics	r2, r1
 8002610:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2101      	movs	r1, #1
 800261e:	430a      	orrs	r2, r1
 8002620:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	0018      	movs	r0, r3
 8002626:	f000 fae5 	bl	8002bf4 <UART_CheckIdleState>
 800262a:	0003      	movs	r3, r0
}
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b002      	add	sp, #8
 8002632:	bd80      	pop	{r7, pc}
 8002634:	ffffb7ff 	.word	0xffffb7ff

08002638 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002640:	46c0      	nop			@ (mov r8, r8)
 8002642:	46bd      	mov	sp, r7
 8002644:	b002      	add	sp, #8
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	@ 0x28
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	1dbb      	adds	r3, r7, #6
 8002656:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2288      	movs	r2, #136	@ 0x88
 800265c:	589b      	ldr	r3, [r3, r2]
 800265e:	2b20      	cmp	r3, #32
 8002660:	d000      	beq.n	8002664 <HAL_UART_Transmit+0x1c>
 8002662:	e090      	b.n	8002786 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_UART_Transmit+0x2a>
 800266a:	1dbb      	adds	r3, r7, #6
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e088      	b.n	8002788 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	2380      	movs	r3, #128	@ 0x80
 800267c:	015b      	lsls	r3, r3, #5
 800267e:	429a      	cmp	r2, r3
 8002680:	d109      	bne.n	8002696 <HAL_UART_Transmit+0x4e>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d105      	bne.n	8002696 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2201      	movs	r2, #1
 800268e:	4013      	ands	r3, r2
 8002690:	d001      	beq.n	8002696 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e078      	b.n	8002788 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2290      	movs	r2, #144	@ 0x90
 800269a:	2100      	movs	r1, #0
 800269c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2288      	movs	r2, #136	@ 0x88
 80026a2:	2121      	movs	r1, #33	@ 0x21
 80026a4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026a6:	f7fe fb79 	bl	8000d9c <HAL_GetTick>
 80026aa:	0003      	movs	r3, r0
 80026ac:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1dba      	adds	r2, r7, #6
 80026b2:	2154      	movs	r1, #84	@ 0x54
 80026b4:	8812      	ldrh	r2, [r2, #0]
 80026b6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1dba      	adds	r2, r7, #6
 80026bc:	2156      	movs	r1, #86	@ 0x56
 80026be:	8812      	ldrh	r2, [r2, #0]
 80026c0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	2380      	movs	r3, #128	@ 0x80
 80026c8:	015b      	lsls	r3, r3, #5
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d108      	bne.n	80026e0 <HAL_UART_Transmit+0x98>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d104      	bne.n	80026e0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	e003      	b.n	80026e8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026e8:	e030      	b.n	800274c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	0013      	movs	r3, r2
 80026f4:	2200      	movs	r2, #0
 80026f6:	2180      	movs	r1, #128	@ 0x80
 80026f8:	f000 fb26 	bl	8002d48 <UART_WaitOnFlagUntilTimeout>
 80026fc:	1e03      	subs	r3, r0, #0
 80026fe:	d005      	beq.n	800270c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2288      	movs	r2, #136	@ 0x88
 8002704:	2120      	movs	r1, #32
 8002706:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e03d      	b.n	8002788 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10b      	bne.n	800272a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	001a      	movs	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	05d2      	lsls	r2, r2, #23
 800271e:	0dd2      	lsrs	r2, r2, #23
 8002720:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	3302      	adds	r3, #2
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	e007      	b.n	800273a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	781a      	ldrb	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	3301      	adds	r3, #1
 8002738:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2256      	movs	r2, #86	@ 0x56
 800273e:	5a9b      	ldrh	r3, [r3, r2]
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b299      	uxth	r1, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2256      	movs	r2, #86	@ 0x56
 800274a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2256      	movs	r2, #86	@ 0x56
 8002750:	5a9b      	ldrh	r3, [r3, r2]
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1c8      	bne.n	80026ea <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	0013      	movs	r3, r2
 8002762:	2200      	movs	r2, #0
 8002764:	2140      	movs	r1, #64	@ 0x40
 8002766:	f000 faef 	bl	8002d48 <UART_WaitOnFlagUntilTimeout>
 800276a:	1e03      	subs	r3, r0, #0
 800276c:	d005      	beq.n	800277a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2288      	movs	r2, #136	@ 0x88
 8002772:	2120      	movs	r1, #32
 8002774:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e006      	b.n	8002788 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2288      	movs	r2, #136	@ 0x88
 800277e:	2120      	movs	r1, #32
 8002780:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	e000      	b.n	8002788 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002786:	2302      	movs	r3, #2
  }
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b008      	add	sp, #32
 800278e:	bd80      	pop	{r7, pc}

08002790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002798:	231e      	movs	r3, #30
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4aab      	ldr	r2, [pc, #684]	@ (8002a6c <UART_SetConfig+0x2dc>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	0019      	movs	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4aa6      	ldr	r2, [pc, #664]	@ (8002a70 <UART_SetConfig+0x2e0>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	0019      	movs	r1, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	4a9d      	ldr	r2, [pc, #628]	@ (8002a74 <UART_SetConfig+0x2e4>)
 80027fe:	4013      	ands	r3, r2
 8002800:	0019      	movs	r1, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	430a      	orrs	r2, r1
 800280a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002812:	220f      	movs	r2, #15
 8002814:	4393      	bics	r3, r2
 8002816:	0019      	movs	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a93      	ldr	r2, [pc, #588]	@ (8002a78 <UART_SetConfig+0x2e8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d127      	bne.n	800287e <UART_SetConfig+0xee>
 800282e:	4b93      	ldr	r3, [pc, #588]	@ (8002a7c <UART_SetConfig+0x2ec>)
 8002830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002832:	2203      	movs	r2, #3
 8002834:	4013      	ands	r3, r2
 8002836:	2b03      	cmp	r3, #3
 8002838:	d017      	beq.n	800286a <UART_SetConfig+0xda>
 800283a:	d81b      	bhi.n	8002874 <UART_SetConfig+0xe4>
 800283c:	2b02      	cmp	r3, #2
 800283e:	d00a      	beq.n	8002856 <UART_SetConfig+0xc6>
 8002840:	d818      	bhi.n	8002874 <UART_SetConfig+0xe4>
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <UART_SetConfig+0xbc>
 8002846:	2b01      	cmp	r3, #1
 8002848:	d00a      	beq.n	8002860 <UART_SetConfig+0xd0>
 800284a:	e013      	b.n	8002874 <UART_SetConfig+0xe4>
 800284c:	231f      	movs	r3, #31
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
 8002854:	e021      	b.n	800289a <UART_SetConfig+0x10a>
 8002856:	231f      	movs	r3, #31
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	2202      	movs	r2, #2
 800285c:	701a      	strb	r2, [r3, #0]
 800285e:	e01c      	b.n	800289a <UART_SetConfig+0x10a>
 8002860:	231f      	movs	r3, #31
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	2204      	movs	r2, #4
 8002866:	701a      	strb	r2, [r3, #0]
 8002868:	e017      	b.n	800289a <UART_SetConfig+0x10a>
 800286a:	231f      	movs	r3, #31
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	2208      	movs	r2, #8
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	e012      	b.n	800289a <UART_SetConfig+0x10a>
 8002874:	231f      	movs	r3, #31
 8002876:	18fb      	adds	r3, r7, r3
 8002878:	2210      	movs	r2, #16
 800287a:	701a      	strb	r2, [r3, #0]
 800287c:	e00d      	b.n	800289a <UART_SetConfig+0x10a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a7f      	ldr	r2, [pc, #508]	@ (8002a80 <UART_SetConfig+0x2f0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d104      	bne.n	8002892 <UART_SetConfig+0x102>
 8002888:	231f      	movs	r3, #31
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
 8002890:	e003      	b.n	800289a <UART_SetConfig+0x10a>
 8002892:	231f      	movs	r3, #31
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	2210      	movs	r2, #16
 8002898:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69da      	ldr	r2, [r3, #28]
 800289e:	2380      	movs	r3, #128	@ 0x80
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d000      	beq.n	80028a8 <UART_SetConfig+0x118>
 80028a6:	e06f      	b.n	8002988 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80028a8:	231f      	movs	r3, #31
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d01f      	beq.n	80028f2 <UART_SetConfig+0x162>
 80028b2:	dc22      	bgt.n	80028fa <UART_SetConfig+0x16a>
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d017      	beq.n	80028e8 <UART_SetConfig+0x158>
 80028b8:	dc1f      	bgt.n	80028fa <UART_SetConfig+0x16a>
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <UART_SetConfig+0x134>
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d005      	beq.n	80028ce <UART_SetConfig+0x13e>
 80028c2:	e01a      	b.n	80028fa <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028c4:	f7ff fd5e 	bl	8002384 <HAL_RCC_GetPCLK1Freq>
 80028c8:	0003      	movs	r3, r0
 80028ca:	61bb      	str	r3, [r7, #24]
        break;
 80028cc:	e01c      	b.n	8002908 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80028ce:	4b6b      	ldr	r3, [pc, #428]	@ (8002a7c <UART_SetConfig+0x2ec>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	2207      	movs	r2, #7
 80028d6:	4013      	ands	r3, r2
 80028d8:	3301      	adds	r3, #1
 80028da:	0019      	movs	r1, r3
 80028dc:	4869      	ldr	r0, [pc, #420]	@ (8002a84 <UART_SetConfig+0x2f4>)
 80028de:	f7fd fc1d 	bl	800011c <__udivsi3>
 80028e2:	0003      	movs	r3, r0
 80028e4:	61bb      	str	r3, [r7, #24]
        break;
 80028e6:	e00f      	b.n	8002908 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028e8:	f7ff fce0 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 80028ec:	0003      	movs	r3, r0
 80028ee:	61bb      	str	r3, [r7, #24]
        break;
 80028f0:	e00a      	b.n	8002908 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028f2:	2380      	movs	r3, #128	@ 0x80
 80028f4:	021b      	lsls	r3, r3, #8
 80028f6:	61bb      	str	r3, [r7, #24]
        break;
 80028f8:	e006      	b.n	8002908 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80028fe:	231e      	movs	r3, #30
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	2201      	movs	r2, #1
 8002904:	701a      	strb	r2, [r3, #0]
        break;
 8002906:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d100      	bne.n	8002910 <UART_SetConfig+0x180>
 800290e:	e097      	b.n	8002a40 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002914:	4b5c      	ldr	r3, [pc, #368]	@ (8002a88 <UART_SetConfig+0x2f8>)
 8002916:	0052      	lsls	r2, r2, #1
 8002918:	5ad3      	ldrh	r3, [r2, r3]
 800291a:	0019      	movs	r1, r3
 800291c:	69b8      	ldr	r0, [r7, #24]
 800291e:	f7fd fbfd 	bl	800011c <__udivsi3>
 8002922:	0003      	movs	r3, r0
 8002924:	005a      	lsls	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	085b      	lsrs	r3, r3, #1
 800292c:	18d2      	adds	r2, r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	0019      	movs	r1, r3
 8002934:	0010      	movs	r0, r2
 8002936:	f7fd fbf1 	bl	800011c <__udivsi3>
 800293a:	0003      	movs	r3, r0
 800293c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b0f      	cmp	r3, #15
 8002942:	d91c      	bls.n	800297e <UART_SetConfig+0x1ee>
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	2380      	movs	r3, #128	@ 0x80
 8002948:	025b      	lsls	r3, r3, #9
 800294a:	429a      	cmp	r2, r3
 800294c:	d217      	bcs.n	800297e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	b29a      	uxth	r2, r3
 8002952:	200e      	movs	r0, #14
 8002954:	183b      	adds	r3, r7, r0
 8002956:	210f      	movs	r1, #15
 8002958:	438a      	bics	r2, r1
 800295a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	085b      	lsrs	r3, r3, #1
 8002960:	b29b      	uxth	r3, r3
 8002962:	2207      	movs	r2, #7
 8002964:	4013      	ands	r3, r2
 8002966:	b299      	uxth	r1, r3
 8002968:	183b      	adds	r3, r7, r0
 800296a:	183a      	adds	r2, r7, r0
 800296c:	8812      	ldrh	r2, [r2, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	183a      	adds	r2, r7, r0
 8002978:	8812      	ldrh	r2, [r2, #0]
 800297a:	60da      	str	r2, [r3, #12]
 800297c:	e060      	b.n	8002a40 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800297e:	231e      	movs	r3, #30
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
 8002986:	e05b      	b.n	8002a40 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002988:	231f      	movs	r3, #31
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b08      	cmp	r3, #8
 8002990:	d01f      	beq.n	80029d2 <UART_SetConfig+0x242>
 8002992:	dc22      	bgt.n	80029da <UART_SetConfig+0x24a>
 8002994:	2b04      	cmp	r3, #4
 8002996:	d017      	beq.n	80029c8 <UART_SetConfig+0x238>
 8002998:	dc1f      	bgt.n	80029da <UART_SetConfig+0x24a>
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <UART_SetConfig+0x214>
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d005      	beq.n	80029ae <UART_SetConfig+0x21e>
 80029a2:	e01a      	b.n	80029da <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029a4:	f7ff fcee 	bl	8002384 <HAL_RCC_GetPCLK1Freq>
 80029a8:	0003      	movs	r3, r0
 80029aa:	61bb      	str	r3, [r7, #24]
        break;
 80029ac:	e01c      	b.n	80029e8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80029ae:	4b33      	ldr	r3, [pc, #204]	@ (8002a7c <UART_SetConfig+0x2ec>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	2207      	movs	r2, #7
 80029b6:	4013      	ands	r3, r2
 80029b8:	3301      	adds	r3, #1
 80029ba:	0019      	movs	r1, r3
 80029bc:	4831      	ldr	r0, [pc, #196]	@ (8002a84 <UART_SetConfig+0x2f4>)
 80029be:	f7fd fbad 	bl	800011c <__udivsi3>
 80029c2:	0003      	movs	r3, r0
 80029c4:	61bb      	str	r3, [r7, #24]
        break;
 80029c6:	e00f      	b.n	80029e8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029c8:	f7ff fc70 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 80029cc:	0003      	movs	r3, r0
 80029ce:	61bb      	str	r3, [r7, #24]
        break;
 80029d0:	e00a      	b.n	80029e8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029d2:	2380      	movs	r3, #128	@ 0x80
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	61bb      	str	r3, [r7, #24]
        break;
 80029d8:	e006      	b.n	80029e8 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029de:	231e      	movs	r3, #30
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]
        break;
 80029e6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d028      	beq.n	8002a40 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029f2:	4b25      	ldr	r3, [pc, #148]	@ (8002a88 <UART_SetConfig+0x2f8>)
 80029f4:	0052      	lsls	r2, r2, #1
 80029f6:	5ad3      	ldrh	r3, [r2, r3]
 80029f8:	0019      	movs	r1, r3
 80029fa:	69b8      	ldr	r0, [r7, #24]
 80029fc:	f7fd fb8e 	bl	800011c <__udivsi3>
 8002a00:	0003      	movs	r3, r0
 8002a02:	001a      	movs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	085b      	lsrs	r3, r3, #1
 8002a0a:	18d2      	adds	r2, r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	0019      	movs	r1, r3
 8002a12:	0010      	movs	r0, r2
 8002a14:	f7fd fb82 	bl	800011c <__udivsi3>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	2b0f      	cmp	r3, #15
 8002a20:	d90a      	bls.n	8002a38 <UART_SetConfig+0x2a8>
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	2380      	movs	r3, #128	@ 0x80
 8002a26:	025b      	lsls	r3, r3, #9
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d205      	bcs.n	8002a38 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	e003      	b.n	8002a40 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002a38:	231e      	movs	r3, #30
 8002a3a:	18fb      	adds	r3, r7, r3
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	226a      	movs	r2, #106	@ 0x6a
 8002a44:	2101      	movs	r1, #1
 8002a46:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2268      	movs	r2, #104	@ 0x68
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002a5c:	231e      	movs	r3, #30
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	781b      	ldrb	r3, [r3, #0]
}
 8002a62:	0018      	movs	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b008      	add	sp, #32
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	cfff69f3 	.word	0xcfff69f3
 8002a70:	ffffcfff 	.word	0xffffcfff
 8002a74:	11fff4ff 	.word	0x11fff4ff
 8002a78:	40013800 	.word	0x40013800
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40004400 	.word	0x40004400
 8002a84:	02dc6c00 	.word	0x02dc6c00
 8002a88:	08003e54 	.word	0x08003e54

08002a8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a98:	2208      	movs	r2, #8
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d00b      	beq.n	8002ab6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4a4a      	ldr	r2, [pc, #296]	@ (8002bd0 <UART_AdvFeatureConfig+0x144>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aba:	2201      	movs	r2, #1
 8002abc:	4013      	ands	r3, r2
 8002abe:	d00b      	beq.n	8002ad8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	4a43      	ldr	r2, [pc, #268]	@ (8002bd4 <UART_AdvFeatureConfig+0x148>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	0019      	movs	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002adc:	2202      	movs	r2, #2
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d00b      	beq.n	8002afa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	4a3b      	ldr	r2, [pc, #236]	@ (8002bd8 <UART_AdvFeatureConfig+0x14c>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afe:	2204      	movs	r2, #4
 8002b00:	4013      	ands	r3, r2
 8002b02:	d00b      	beq.n	8002b1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	4a34      	ldr	r2, [pc, #208]	@ (8002bdc <UART_AdvFeatureConfig+0x150>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	0019      	movs	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b20:	2210      	movs	r2, #16
 8002b22:	4013      	ands	r3, r2
 8002b24:	d00b      	beq.n	8002b3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	4a2c      	ldr	r2, [pc, #176]	@ (8002be0 <UART_AdvFeatureConfig+0x154>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	0019      	movs	r1, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b42:	2220      	movs	r2, #32
 8002b44:	4013      	ands	r3, r2
 8002b46:	d00b      	beq.n	8002b60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	4a25      	ldr	r2, [pc, #148]	@ (8002be4 <UART_AdvFeatureConfig+0x158>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	0019      	movs	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b64:	2240      	movs	r2, #64	@ 0x40
 8002b66:	4013      	ands	r3, r2
 8002b68:	d01d      	beq.n	8002ba6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4a1d      	ldr	r2, [pc, #116]	@ (8002be8 <UART_AdvFeatureConfig+0x15c>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b86:	2380      	movs	r3, #128	@ 0x80
 8002b88:	035b      	lsls	r3, r3, #13
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d10b      	bne.n	8002ba6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4a15      	ldr	r2, [pc, #84]	@ (8002bec <UART_AdvFeatureConfig+0x160>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	0019      	movs	r1, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002baa:	2280      	movs	r2, #128	@ 0x80
 8002bac:	4013      	ands	r3, r2
 8002bae:	d00b      	beq.n	8002bc8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8002bf0 <UART_AdvFeatureConfig+0x164>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	0019      	movs	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	605a      	str	r2, [r3, #4]
  }
}
 8002bc8:	46c0      	nop			@ (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b002      	add	sp, #8
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	ffff7fff 	.word	0xffff7fff
 8002bd4:	fffdffff 	.word	0xfffdffff
 8002bd8:	fffeffff 	.word	0xfffeffff
 8002bdc:	fffbffff 	.word	0xfffbffff
 8002be0:	ffffefff 	.word	0xffffefff
 8002be4:	ffffdfff 	.word	0xffffdfff
 8002be8:	ffefffff 	.word	0xffefffff
 8002bec:	ff9fffff 	.word	0xff9fffff
 8002bf0:	fff7ffff 	.word	0xfff7ffff

08002bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b092      	sub	sp, #72	@ 0x48
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2290      	movs	r2, #144	@ 0x90
 8002c00:	2100      	movs	r1, #0
 8002c02:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c04:	f7fe f8ca 	bl	8000d9c <HAL_GetTick>
 8002c08:	0003      	movs	r3, r0
 8002c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2208      	movs	r2, #8
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d12d      	bne.n	8002c76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c1c:	2280      	movs	r2, #128	@ 0x80
 8002c1e:	0391      	lsls	r1, r2, #14
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	4a47      	ldr	r2, [pc, #284]	@ (8002d40 <UART_CheckIdleState+0x14c>)
 8002c24:	9200      	str	r2, [sp, #0]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f000 f88e 	bl	8002d48 <UART_WaitOnFlagUntilTimeout>
 8002c2c:	1e03      	subs	r3, r0, #0
 8002c2e:	d022      	beq.n	8002c76 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c30:	f3ef 8310 	mrs	r3, PRIMASK
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002c38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c40:	f383 8810 	msr	PRIMASK, r3
}
 8002c44:	46c0      	nop			@ (mov r8, r8)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2180      	movs	r1, #128	@ 0x80
 8002c52:	438a      	bics	r2, r1
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c5c:	f383 8810 	msr	PRIMASK, r3
}
 8002c60:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2288      	movs	r2, #136	@ 0x88
 8002c66:	2120      	movs	r1, #32
 8002c68:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2284      	movs	r2, #132	@ 0x84
 8002c6e:	2100      	movs	r1, #0
 8002c70:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e060      	b.n	8002d38 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d146      	bne.n	8002d12 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c86:	2280      	movs	r2, #128	@ 0x80
 8002c88:	03d1      	lsls	r1, r2, #15
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	4a2c      	ldr	r2, [pc, #176]	@ (8002d40 <UART_CheckIdleState+0x14c>)
 8002c8e:	9200      	str	r2, [sp, #0]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f000 f859 	bl	8002d48 <UART_WaitOnFlagUntilTimeout>
 8002c96:	1e03      	subs	r3, r0, #0
 8002c98:	d03b      	beq.n	8002d12 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ca2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f383 8810 	msr	PRIMASK, r3
}
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4922      	ldr	r1, [pc, #136]	@ (8002d44 <UART_CheckIdleState+0x150>)
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f383 8810 	msr	PRIMASK, r3
}
 8002cca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd0:	61bb      	str	r3, [r7, #24]
  return(result);
 8002cd2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	f383 8810 	msr	PRIMASK, r3
}
 8002ce0:	46c0      	nop			@ (mov r8, r8)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2101      	movs	r1, #1
 8002cee:	438a      	bics	r2, r1
 8002cf0:	609a      	str	r2, [r3, #8]
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	f383 8810 	msr	PRIMASK, r3
}
 8002cfc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	228c      	movs	r2, #140	@ 0x8c
 8002d02:	2120      	movs	r1, #32
 8002d04:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2284      	movs	r2, #132	@ 0x84
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e012      	b.n	8002d38 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2288      	movs	r2, #136	@ 0x88
 8002d16:	2120      	movs	r1, #32
 8002d18:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	228c      	movs	r2, #140	@ 0x8c
 8002d1e:	2120      	movs	r1, #32
 8002d20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2284      	movs	r2, #132	@ 0x84
 8002d32:	2100      	movs	r1, #0
 8002d34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	0018      	movs	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b010      	add	sp, #64	@ 0x40
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	01ffffff 	.word	0x01ffffff
 8002d44:	fffffedf 	.word	0xfffffedf

08002d48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	1dfb      	adds	r3, r7, #7
 8002d56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d58:	e051      	b.n	8002dfe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	d04e      	beq.n	8002dfe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d60:	f7fe f81c 	bl	8000d9c <HAL_GetTick>
 8002d64:	0002      	movs	r2, r0
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d302      	bcc.n	8002d76 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e051      	b.n	8002e1e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2204      	movs	r2, #4
 8002d82:	4013      	ands	r3, r2
 8002d84:	d03b      	beq.n	8002dfe <UART_WaitOnFlagUntilTimeout+0xb6>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b80      	cmp	r3, #128	@ 0x80
 8002d8a:	d038      	beq.n	8002dfe <UART_WaitOnFlagUntilTimeout+0xb6>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b40      	cmp	r3, #64	@ 0x40
 8002d90:	d035      	beq.n	8002dfe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	2208      	movs	r2, #8
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d111      	bne.n	8002dc4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2208      	movs	r2, #8
 8002da6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	0018      	movs	r0, r3
 8002dac:	f000 f83c 	bl	8002e28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2290      	movs	r2, #144	@ 0x90
 8002db4:	2108      	movs	r1, #8
 8002db6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2284      	movs	r2, #132	@ 0x84
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e02c      	b.n	8002e1e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	69da      	ldr	r2, [r3, #28]
 8002dca:	2380      	movs	r3, #128	@ 0x80
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	401a      	ands	r2, r3
 8002dd0:	2380      	movs	r3, #128	@ 0x80
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d112      	bne.n	8002dfe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2280      	movs	r2, #128	@ 0x80
 8002dde:	0112      	lsls	r2, r2, #4
 8002de0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f000 f81f 	bl	8002e28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2290      	movs	r2, #144	@ 0x90
 8002dee:	2120      	movs	r1, #32
 8002df0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2284      	movs	r2, #132	@ 0x84
 8002df6:	2100      	movs	r1, #0
 8002df8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e00f      	b.n	8002e1e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	4013      	ands	r3, r2
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	425a      	negs	r2, r3
 8002e0e:	4153      	adcs	r3, r2
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	001a      	movs	r2, r3
 8002e14:	1dfb      	adds	r3, r7, #7
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d09e      	beq.n	8002d5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	0018      	movs	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b004      	add	sp, #16
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08e      	sub	sp, #56	@ 0x38
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e30:	f3ef 8310 	mrs	r3, PRIMASK
 8002e34:	617b      	str	r3, [r7, #20]
  return(result);
 8002e36:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f383 8810 	msr	PRIMASK, r3
}
 8002e44:	46c0      	nop			@ (mov r8, r8)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4926      	ldr	r1, [pc, #152]	@ (8002eec <UART_EndRxTransfer+0xc4>)
 8002e52:	400a      	ands	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f383 8810 	msr	PRIMASK, r3
}
 8002e60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e62:	f3ef 8310 	mrs	r3, PRIMASK
 8002e66:	623b      	str	r3, [r7, #32]
  return(result);
 8002e68:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	f383 8810 	msr	PRIMASK, r3
}
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	491b      	ldr	r1, [pc, #108]	@ (8002ef0 <UART_EndRxTransfer+0xc8>)
 8002e84:	400a      	ands	r2, r1
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8e:	f383 8810 	msr	PRIMASK, r3
}
 8002e92:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d118      	bne.n	8002ece <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ea2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f383 8810 	msr	PRIMASK, r3
}
 8002eb0:	46c0      	nop			@ (mov r8, r8)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2110      	movs	r1, #16
 8002ebe:	438a      	bics	r2, r1
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f383 8810 	msr	PRIMASK, r3
}
 8002ecc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	228c      	movs	r2, #140	@ 0x8c
 8002ed2:	2120      	movs	r1, #32
 8002ed4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002ee2:	46c0      	nop			@ (mov r8, r8)
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	b00e      	add	sp, #56	@ 0x38
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	46c0      	nop			@ (mov r8, r8)
 8002eec:	fffffedf 	.word	0xfffffedf
 8002ef0:	effffffe 	.word	0xeffffffe

08002ef4 <std>:
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	b510      	push	{r4, lr}
 8002ef8:	0004      	movs	r4, r0
 8002efa:	6003      	str	r3, [r0, #0]
 8002efc:	6043      	str	r3, [r0, #4]
 8002efe:	6083      	str	r3, [r0, #8]
 8002f00:	8181      	strh	r1, [r0, #12]
 8002f02:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f04:	81c2      	strh	r2, [r0, #14]
 8002f06:	6103      	str	r3, [r0, #16]
 8002f08:	6143      	str	r3, [r0, #20]
 8002f0a:	6183      	str	r3, [r0, #24]
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	2208      	movs	r2, #8
 8002f10:	305c      	adds	r0, #92	@ 0x5c
 8002f12:	f000 f90f 	bl	8003134 <memset>
 8002f16:	4b0b      	ldr	r3, [pc, #44]	@ (8002f44 <std+0x50>)
 8002f18:	6224      	str	r4, [r4, #32]
 8002f1a:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f48 <std+0x54>)
 8002f1e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f20:	4b0a      	ldr	r3, [pc, #40]	@ (8002f4c <std+0x58>)
 8002f22:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f24:	4b0a      	ldr	r3, [pc, #40]	@ (8002f50 <std+0x5c>)
 8002f26:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f28:	4b0a      	ldr	r3, [pc, #40]	@ (8002f54 <std+0x60>)
 8002f2a:	429c      	cmp	r4, r3
 8002f2c:	d005      	beq.n	8002f3a <std+0x46>
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f58 <std+0x64>)
 8002f30:	429c      	cmp	r4, r3
 8002f32:	d002      	beq.n	8002f3a <std+0x46>
 8002f34:	4b09      	ldr	r3, [pc, #36]	@ (8002f5c <std+0x68>)
 8002f36:	429c      	cmp	r4, r3
 8002f38:	d103      	bne.n	8002f42 <std+0x4e>
 8002f3a:	0020      	movs	r0, r4
 8002f3c:	3058      	adds	r0, #88	@ 0x58
 8002f3e:	f000 f979 	bl	8003234 <__retarget_lock_init_recursive>
 8002f42:	bd10      	pop	{r4, pc}
 8002f44:	0800309d 	.word	0x0800309d
 8002f48:	080030c5 	.word	0x080030c5
 8002f4c:	080030fd 	.word	0x080030fd
 8002f50:	08003129 	.word	0x08003129
 8002f54:	200001c0 	.word	0x200001c0
 8002f58:	20000228 	.word	0x20000228
 8002f5c:	20000290 	.word	0x20000290

08002f60 <stdio_exit_handler>:
 8002f60:	b510      	push	{r4, lr}
 8002f62:	4a03      	ldr	r2, [pc, #12]	@ (8002f70 <stdio_exit_handler+0x10>)
 8002f64:	4903      	ldr	r1, [pc, #12]	@ (8002f74 <stdio_exit_handler+0x14>)
 8002f66:	4804      	ldr	r0, [pc, #16]	@ (8002f78 <stdio_exit_handler+0x18>)
 8002f68:	f000 f86c 	bl	8003044 <_fwalk_sglue>
 8002f6c:	bd10      	pop	{r4, pc}
 8002f6e:	46c0      	nop			@ (mov r8, r8)
 8002f70:	20000024 	.word	0x20000024
 8002f74:	08003ac5 	.word	0x08003ac5
 8002f78:	20000034 	.word	0x20000034

08002f7c <cleanup_stdio>:
 8002f7c:	6841      	ldr	r1, [r0, #4]
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <cleanup_stdio+0x30>)
 8002f80:	b510      	push	{r4, lr}
 8002f82:	0004      	movs	r4, r0
 8002f84:	4299      	cmp	r1, r3
 8002f86:	d001      	beq.n	8002f8c <cleanup_stdio+0x10>
 8002f88:	f000 fd9c 	bl	8003ac4 <_fflush_r>
 8002f8c:	68a1      	ldr	r1, [r4, #8]
 8002f8e:	4b08      	ldr	r3, [pc, #32]	@ (8002fb0 <cleanup_stdio+0x34>)
 8002f90:	4299      	cmp	r1, r3
 8002f92:	d002      	beq.n	8002f9a <cleanup_stdio+0x1e>
 8002f94:	0020      	movs	r0, r4
 8002f96:	f000 fd95 	bl	8003ac4 <_fflush_r>
 8002f9a:	68e1      	ldr	r1, [r4, #12]
 8002f9c:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <cleanup_stdio+0x38>)
 8002f9e:	4299      	cmp	r1, r3
 8002fa0:	d002      	beq.n	8002fa8 <cleanup_stdio+0x2c>
 8002fa2:	0020      	movs	r0, r4
 8002fa4:	f000 fd8e 	bl	8003ac4 <_fflush_r>
 8002fa8:	bd10      	pop	{r4, pc}
 8002faa:	46c0      	nop			@ (mov r8, r8)
 8002fac:	200001c0 	.word	0x200001c0
 8002fb0:	20000228 	.word	0x20000228
 8002fb4:	20000290 	.word	0x20000290

08002fb8 <global_stdio_init.part.0>:
 8002fb8:	b510      	push	{r4, lr}
 8002fba:	4b09      	ldr	r3, [pc, #36]	@ (8002fe0 <global_stdio_init.part.0+0x28>)
 8002fbc:	4a09      	ldr	r2, [pc, #36]	@ (8002fe4 <global_stdio_init.part.0+0x2c>)
 8002fbe:	2104      	movs	r1, #4
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	4809      	ldr	r0, [pc, #36]	@ (8002fe8 <global_stdio_init.part.0+0x30>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f7ff ff95 	bl	8002ef4 <std>
 8002fca:	2201      	movs	r2, #1
 8002fcc:	2109      	movs	r1, #9
 8002fce:	4807      	ldr	r0, [pc, #28]	@ (8002fec <global_stdio_init.part.0+0x34>)
 8002fd0:	f7ff ff90 	bl	8002ef4 <std>
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	2112      	movs	r1, #18
 8002fd8:	4805      	ldr	r0, [pc, #20]	@ (8002ff0 <global_stdio_init.part.0+0x38>)
 8002fda:	f7ff ff8b 	bl	8002ef4 <std>
 8002fde:	bd10      	pop	{r4, pc}
 8002fe0:	200002f8 	.word	0x200002f8
 8002fe4:	08002f61 	.word	0x08002f61
 8002fe8:	200001c0 	.word	0x200001c0
 8002fec:	20000228 	.word	0x20000228
 8002ff0:	20000290 	.word	0x20000290

08002ff4 <__sfp_lock_acquire>:
 8002ff4:	b510      	push	{r4, lr}
 8002ff6:	4802      	ldr	r0, [pc, #8]	@ (8003000 <__sfp_lock_acquire+0xc>)
 8002ff8:	f000 f91d 	bl	8003236 <__retarget_lock_acquire_recursive>
 8002ffc:	bd10      	pop	{r4, pc}
 8002ffe:	46c0      	nop			@ (mov r8, r8)
 8003000:	20000301 	.word	0x20000301

08003004 <__sfp_lock_release>:
 8003004:	b510      	push	{r4, lr}
 8003006:	4802      	ldr	r0, [pc, #8]	@ (8003010 <__sfp_lock_release+0xc>)
 8003008:	f000 f916 	bl	8003238 <__retarget_lock_release_recursive>
 800300c:	bd10      	pop	{r4, pc}
 800300e:	46c0      	nop			@ (mov r8, r8)
 8003010:	20000301 	.word	0x20000301

08003014 <__sinit>:
 8003014:	b510      	push	{r4, lr}
 8003016:	0004      	movs	r4, r0
 8003018:	f7ff ffec 	bl	8002ff4 <__sfp_lock_acquire>
 800301c:	6a23      	ldr	r3, [r4, #32]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <__sinit+0x14>
 8003022:	f7ff ffef 	bl	8003004 <__sfp_lock_release>
 8003026:	bd10      	pop	{r4, pc}
 8003028:	4b04      	ldr	r3, [pc, #16]	@ (800303c <__sinit+0x28>)
 800302a:	6223      	str	r3, [r4, #32]
 800302c:	4b04      	ldr	r3, [pc, #16]	@ (8003040 <__sinit+0x2c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f6      	bne.n	8003022 <__sinit+0xe>
 8003034:	f7ff ffc0 	bl	8002fb8 <global_stdio_init.part.0>
 8003038:	e7f3      	b.n	8003022 <__sinit+0xe>
 800303a:	46c0      	nop			@ (mov r8, r8)
 800303c:	08002f7d 	.word	0x08002f7d
 8003040:	200002f8 	.word	0x200002f8

08003044 <_fwalk_sglue>:
 8003044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003046:	0014      	movs	r4, r2
 8003048:	2600      	movs	r6, #0
 800304a:	9000      	str	r0, [sp, #0]
 800304c:	9101      	str	r1, [sp, #4]
 800304e:	68a5      	ldr	r5, [r4, #8]
 8003050:	6867      	ldr	r7, [r4, #4]
 8003052:	3f01      	subs	r7, #1
 8003054:	d504      	bpl.n	8003060 <_fwalk_sglue+0x1c>
 8003056:	6824      	ldr	r4, [r4, #0]
 8003058:	2c00      	cmp	r4, #0
 800305a:	d1f8      	bne.n	800304e <_fwalk_sglue+0xa>
 800305c:	0030      	movs	r0, r6
 800305e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003060:	89ab      	ldrh	r3, [r5, #12]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d908      	bls.n	8003078 <_fwalk_sglue+0x34>
 8003066:	220e      	movs	r2, #14
 8003068:	5eab      	ldrsh	r3, [r5, r2]
 800306a:	3301      	adds	r3, #1
 800306c:	d004      	beq.n	8003078 <_fwalk_sglue+0x34>
 800306e:	0029      	movs	r1, r5
 8003070:	9800      	ldr	r0, [sp, #0]
 8003072:	9b01      	ldr	r3, [sp, #4]
 8003074:	4798      	blx	r3
 8003076:	4306      	orrs	r6, r0
 8003078:	3568      	adds	r5, #104	@ 0x68
 800307a:	e7ea      	b.n	8003052 <_fwalk_sglue+0xe>

0800307c <iprintf>:
 800307c:	b40f      	push	{r0, r1, r2, r3}
 800307e:	b507      	push	{r0, r1, r2, lr}
 8003080:	4905      	ldr	r1, [pc, #20]	@ (8003098 <iprintf+0x1c>)
 8003082:	ab04      	add	r3, sp, #16
 8003084:	6808      	ldr	r0, [r1, #0]
 8003086:	cb04      	ldmia	r3!, {r2}
 8003088:	6881      	ldr	r1, [r0, #8]
 800308a:	9301      	str	r3, [sp, #4]
 800308c:	f000 f9fa 	bl	8003484 <_vfiprintf_r>
 8003090:	b003      	add	sp, #12
 8003092:	bc08      	pop	{r3}
 8003094:	b004      	add	sp, #16
 8003096:	4718      	bx	r3
 8003098:	20000030 	.word	0x20000030

0800309c <__sread>:
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	000c      	movs	r4, r1
 80030a0:	250e      	movs	r5, #14
 80030a2:	5f49      	ldrsh	r1, [r1, r5]
 80030a4:	f000 f874 	bl	8003190 <_read_r>
 80030a8:	2800      	cmp	r0, #0
 80030aa:	db03      	blt.n	80030b4 <__sread+0x18>
 80030ac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80030ae:	181b      	adds	r3, r3, r0
 80030b0:	6563      	str	r3, [r4, #84]	@ 0x54
 80030b2:	bd70      	pop	{r4, r5, r6, pc}
 80030b4:	89a3      	ldrh	r3, [r4, #12]
 80030b6:	4a02      	ldr	r2, [pc, #8]	@ (80030c0 <__sread+0x24>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	81a3      	strh	r3, [r4, #12]
 80030bc:	e7f9      	b.n	80030b2 <__sread+0x16>
 80030be:	46c0      	nop			@ (mov r8, r8)
 80030c0:	ffffefff 	.word	0xffffefff

080030c4 <__swrite>:
 80030c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c6:	001f      	movs	r7, r3
 80030c8:	898b      	ldrh	r3, [r1, #12]
 80030ca:	0005      	movs	r5, r0
 80030cc:	000c      	movs	r4, r1
 80030ce:	0016      	movs	r6, r2
 80030d0:	05db      	lsls	r3, r3, #23
 80030d2:	d505      	bpl.n	80030e0 <__swrite+0x1c>
 80030d4:	230e      	movs	r3, #14
 80030d6:	5ec9      	ldrsh	r1, [r1, r3]
 80030d8:	2200      	movs	r2, #0
 80030da:	2302      	movs	r3, #2
 80030dc:	f000 f844 	bl	8003168 <_lseek_r>
 80030e0:	89a3      	ldrh	r3, [r4, #12]
 80030e2:	4a05      	ldr	r2, [pc, #20]	@ (80030f8 <__swrite+0x34>)
 80030e4:	0028      	movs	r0, r5
 80030e6:	4013      	ands	r3, r2
 80030e8:	81a3      	strh	r3, [r4, #12]
 80030ea:	0032      	movs	r2, r6
 80030ec:	230e      	movs	r3, #14
 80030ee:	5ee1      	ldrsh	r1, [r4, r3]
 80030f0:	003b      	movs	r3, r7
 80030f2:	f000 f861 	bl	80031b8 <_write_r>
 80030f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030f8:	ffffefff 	.word	0xffffefff

080030fc <__sseek>:
 80030fc:	b570      	push	{r4, r5, r6, lr}
 80030fe:	000c      	movs	r4, r1
 8003100:	250e      	movs	r5, #14
 8003102:	5f49      	ldrsh	r1, [r1, r5]
 8003104:	f000 f830 	bl	8003168 <_lseek_r>
 8003108:	89a3      	ldrh	r3, [r4, #12]
 800310a:	1c42      	adds	r2, r0, #1
 800310c:	d103      	bne.n	8003116 <__sseek+0x1a>
 800310e:	4a05      	ldr	r2, [pc, #20]	@ (8003124 <__sseek+0x28>)
 8003110:	4013      	ands	r3, r2
 8003112:	81a3      	strh	r3, [r4, #12]
 8003114:	bd70      	pop	{r4, r5, r6, pc}
 8003116:	2280      	movs	r2, #128	@ 0x80
 8003118:	0152      	lsls	r2, r2, #5
 800311a:	4313      	orrs	r3, r2
 800311c:	81a3      	strh	r3, [r4, #12]
 800311e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003120:	e7f8      	b.n	8003114 <__sseek+0x18>
 8003122:	46c0      	nop			@ (mov r8, r8)
 8003124:	ffffefff 	.word	0xffffefff

08003128 <__sclose>:
 8003128:	b510      	push	{r4, lr}
 800312a:	230e      	movs	r3, #14
 800312c:	5ec9      	ldrsh	r1, [r1, r3]
 800312e:	f000 f809 	bl	8003144 <_close_r>
 8003132:	bd10      	pop	{r4, pc}

08003134 <memset>:
 8003134:	0003      	movs	r3, r0
 8003136:	1882      	adds	r2, r0, r2
 8003138:	4293      	cmp	r3, r2
 800313a:	d100      	bne.n	800313e <memset+0xa>
 800313c:	4770      	bx	lr
 800313e:	7019      	strb	r1, [r3, #0]
 8003140:	3301      	adds	r3, #1
 8003142:	e7f9      	b.n	8003138 <memset+0x4>

08003144 <_close_r>:
 8003144:	2300      	movs	r3, #0
 8003146:	b570      	push	{r4, r5, r6, lr}
 8003148:	4d06      	ldr	r5, [pc, #24]	@ (8003164 <_close_r+0x20>)
 800314a:	0004      	movs	r4, r0
 800314c:	0008      	movs	r0, r1
 800314e:	602b      	str	r3, [r5, #0]
 8003150:	f7fd fac8 	bl	80006e4 <_close>
 8003154:	1c43      	adds	r3, r0, #1
 8003156:	d103      	bne.n	8003160 <_close_r+0x1c>
 8003158:	682b      	ldr	r3, [r5, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d000      	beq.n	8003160 <_close_r+0x1c>
 800315e:	6023      	str	r3, [r4, #0]
 8003160:	bd70      	pop	{r4, r5, r6, pc}
 8003162:	46c0      	nop			@ (mov r8, r8)
 8003164:	200002fc 	.word	0x200002fc

08003168 <_lseek_r>:
 8003168:	b570      	push	{r4, r5, r6, lr}
 800316a:	0004      	movs	r4, r0
 800316c:	0008      	movs	r0, r1
 800316e:	0011      	movs	r1, r2
 8003170:	001a      	movs	r2, r3
 8003172:	2300      	movs	r3, #0
 8003174:	4d05      	ldr	r5, [pc, #20]	@ (800318c <_lseek_r+0x24>)
 8003176:	602b      	str	r3, [r5, #0]
 8003178:	f7fd fad5 	bl	8000726 <_lseek>
 800317c:	1c43      	adds	r3, r0, #1
 800317e:	d103      	bne.n	8003188 <_lseek_r+0x20>
 8003180:	682b      	ldr	r3, [r5, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d000      	beq.n	8003188 <_lseek_r+0x20>
 8003186:	6023      	str	r3, [r4, #0]
 8003188:	bd70      	pop	{r4, r5, r6, pc}
 800318a:	46c0      	nop			@ (mov r8, r8)
 800318c:	200002fc 	.word	0x200002fc

08003190 <_read_r>:
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	0004      	movs	r4, r0
 8003194:	0008      	movs	r0, r1
 8003196:	0011      	movs	r1, r2
 8003198:	001a      	movs	r2, r3
 800319a:	2300      	movs	r3, #0
 800319c:	4d05      	ldr	r5, [pc, #20]	@ (80031b4 <_read_r+0x24>)
 800319e:	602b      	str	r3, [r5, #0]
 80031a0:	f7fd fa67 	bl	8000672 <_read>
 80031a4:	1c43      	adds	r3, r0, #1
 80031a6:	d103      	bne.n	80031b0 <_read_r+0x20>
 80031a8:	682b      	ldr	r3, [r5, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d000      	beq.n	80031b0 <_read_r+0x20>
 80031ae:	6023      	str	r3, [r4, #0]
 80031b0:	bd70      	pop	{r4, r5, r6, pc}
 80031b2:	46c0      	nop			@ (mov r8, r8)
 80031b4:	200002fc 	.word	0x200002fc

080031b8 <_write_r>:
 80031b8:	b570      	push	{r4, r5, r6, lr}
 80031ba:	0004      	movs	r4, r0
 80031bc:	0008      	movs	r0, r1
 80031be:	0011      	movs	r1, r2
 80031c0:	001a      	movs	r2, r3
 80031c2:	2300      	movs	r3, #0
 80031c4:	4d05      	ldr	r5, [pc, #20]	@ (80031dc <_write_r+0x24>)
 80031c6:	602b      	str	r3, [r5, #0]
 80031c8:	f7fd fa70 	bl	80006ac <_write>
 80031cc:	1c43      	adds	r3, r0, #1
 80031ce:	d103      	bne.n	80031d8 <_write_r+0x20>
 80031d0:	682b      	ldr	r3, [r5, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d000      	beq.n	80031d8 <_write_r+0x20>
 80031d6:	6023      	str	r3, [r4, #0]
 80031d8:	bd70      	pop	{r4, r5, r6, pc}
 80031da:	46c0      	nop			@ (mov r8, r8)
 80031dc:	200002fc 	.word	0x200002fc

080031e0 <__errno>:
 80031e0:	4b01      	ldr	r3, [pc, #4]	@ (80031e8 <__errno+0x8>)
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	4770      	bx	lr
 80031e6:	46c0      	nop			@ (mov r8, r8)
 80031e8:	20000030 	.word	0x20000030

080031ec <__libc_init_array>:
 80031ec:	b570      	push	{r4, r5, r6, lr}
 80031ee:	2600      	movs	r6, #0
 80031f0:	4c0c      	ldr	r4, [pc, #48]	@ (8003224 <__libc_init_array+0x38>)
 80031f2:	4d0d      	ldr	r5, [pc, #52]	@ (8003228 <__libc_init_array+0x3c>)
 80031f4:	1b64      	subs	r4, r4, r5
 80031f6:	10a4      	asrs	r4, r4, #2
 80031f8:	42a6      	cmp	r6, r4
 80031fa:	d109      	bne.n	8003210 <__libc_init_array+0x24>
 80031fc:	2600      	movs	r6, #0
 80031fe:	f000 fddb 	bl	8003db8 <_init>
 8003202:	4c0a      	ldr	r4, [pc, #40]	@ (800322c <__libc_init_array+0x40>)
 8003204:	4d0a      	ldr	r5, [pc, #40]	@ (8003230 <__libc_init_array+0x44>)
 8003206:	1b64      	subs	r4, r4, r5
 8003208:	10a4      	asrs	r4, r4, #2
 800320a:	42a6      	cmp	r6, r4
 800320c:	d105      	bne.n	800321a <__libc_init_array+0x2e>
 800320e:	bd70      	pop	{r4, r5, r6, pc}
 8003210:	00b3      	lsls	r3, r6, #2
 8003212:	58eb      	ldr	r3, [r5, r3]
 8003214:	4798      	blx	r3
 8003216:	3601      	adds	r6, #1
 8003218:	e7ee      	b.n	80031f8 <__libc_init_array+0xc>
 800321a:	00b3      	lsls	r3, r6, #2
 800321c:	58eb      	ldr	r3, [r5, r3]
 800321e:	4798      	blx	r3
 8003220:	3601      	adds	r6, #1
 8003222:	e7f2      	b.n	800320a <__libc_init_array+0x1e>
 8003224:	08003ea0 	.word	0x08003ea0
 8003228:	08003ea0 	.word	0x08003ea0
 800322c:	08003ea4 	.word	0x08003ea4
 8003230:	08003ea0 	.word	0x08003ea0

08003234 <__retarget_lock_init_recursive>:
 8003234:	4770      	bx	lr

08003236 <__retarget_lock_acquire_recursive>:
 8003236:	4770      	bx	lr

08003238 <__retarget_lock_release_recursive>:
 8003238:	4770      	bx	lr
	...

0800323c <_free_r>:
 800323c:	b570      	push	{r4, r5, r6, lr}
 800323e:	0005      	movs	r5, r0
 8003240:	1e0c      	subs	r4, r1, #0
 8003242:	d010      	beq.n	8003266 <_free_r+0x2a>
 8003244:	3c04      	subs	r4, #4
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	da00      	bge.n	800324e <_free_r+0x12>
 800324c:	18e4      	adds	r4, r4, r3
 800324e:	0028      	movs	r0, r5
 8003250:	f000 f8e0 	bl	8003414 <__malloc_lock>
 8003254:	4a1d      	ldr	r2, [pc, #116]	@ (80032cc <_free_r+0x90>)
 8003256:	6813      	ldr	r3, [r2, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d105      	bne.n	8003268 <_free_r+0x2c>
 800325c:	6063      	str	r3, [r4, #4]
 800325e:	6014      	str	r4, [r2, #0]
 8003260:	0028      	movs	r0, r5
 8003262:	f000 f8df 	bl	8003424 <__malloc_unlock>
 8003266:	bd70      	pop	{r4, r5, r6, pc}
 8003268:	42a3      	cmp	r3, r4
 800326a:	d908      	bls.n	800327e <_free_r+0x42>
 800326c:	6820      	ldr	r0, [r4, #0]
 800326e:	1821      	adds	r1, r4, r0
 8003270:	428b      	cmp	r3, r1
 8003272:	d1f3      	bne.n	800325c <_free_r+0x20>
 8003274:	6819      	ldr	r1, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	1809      	adds	r1, r1, r0
 800327a:	6021      	str	r1, [r4, #0]
 800327c:	e7ee      	b.n	800325c <_free_r+0x20>
 800327e:	001a      	movs	r2, r3
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <_free_r+0x4e>
 8003286:	42a3      	cmp	r3, r4
 8003288:	d9f9      	bls.n	800327e <_free_r+0x42>
 800328a:	6811      	ldr	r1, [r2, #0]
 800328c:	1850      	adds	r0, r2, r1
 800328e:	42a0      	cmp	r0, r4
 8003290:	d10b      	bne.n	80032aa <_free_r+0x6e>
 8003292:	6820      	ldr	r0, [r4, #0]
 8003294:	1809      	adds	r1, r1, r0
 8003296:	1850      	adds	r0, r2, r1
 8003298:	6011      	str	r1, [r2, #0]
 800329a:	4283      	cmp	r3, r0
 800329c:	d1e0      	bne.n	8003260 <_free_r+0x24>
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	1841      	adds	r1, r0, r1
 80032a4:	6011      	str	r1, [r2, #0]
 80032a6:	6053      	str	r3, [r2, #4]
 80032a8:	e7da      	b.n	8003260 <_free_r+0x24>
 80032aa:	42a0      	cmp	r0, r4
 80032ac:	d902      	bls.n	80032b4 <_free_r+0x78>
 80032ae:	230c      	movs	r3, #12
 80032b0:	602b      	str	r3, [r5, #0]
 80032b2:	e7d5      	b.n	8003260 <_free_r+0x24>
 80032b4:	6820      	ldr	r0, [r4, #0]
 80032b6:	1821      	adds	r1, r4, r0
 80032b8:	428b      	cmp	r3, r1
 80032ba:	d103      	bne.n	80032c4 <_free_r+0x88>
 80032bc:	6819      	ldr	r1, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	1809      	adds	r1, r1, r0
 80032c2:	6021      	str	r1, [r4, #0]
 80032c4:	6063      	str	r3, [r4, #4]
 80032c6:	6054      	str	r4, [r2, #4]
 80032c8:	e7ca      	b.n	8003260 <_free_r+0x24>
 80032ca:	46c0      	nop			@ (mov r8, r8)
 80032cc:	20000308 	.word	0x20000308

080032d0 <sbrk_aligned>:
 80032d0:	b570      	push	{r4, r5, r6, lr}
 80032d2:	4e0f      	ldr	r6, [pc, #60]	@ (8003310 <sbrk_aligned+0x40>)
 80032d4:	000d      	movs	r5, r1
 80032d6:	6831      	ldr	r1, [r6, #0]
 80032d8:	0004      	movs	r4, r0
 80032da:	2900      	cmp	r1, #0
 80032dc:	d102      	bne.n	80032e4 <sbrk_aligned+0x14>
 80032de:	f000 fcbd 	bl	8003c5c <_sbrk_r>
 80032e2:	6030      	str	r0, [r6, #0]
 80032e4:	0029      	movs	r1, r5
 80032e6:	0020      	movs	r0, r4
 80032e8:	f000 fcb8 	bl	8003c5c <_sbrk_r>
 80032ec:	1c43      	adds	r3, r0, #1
 80032ee:	d103      	bne.n	80032f8 <sbrk_aligned+0x28>
 80032f0:	2501      	movs	r5, #1
 80032f2:	426d      	negs	r5, r5
 80032f4:	0028      	movs	r0, r5
 80032f6:	bd70      	pop	{r4, r5, r6, pc}
 80032f8:	2303      	movs	r3, #3
 80032fa:	1cc5      	adds	r5, r0, #3
 80032fc:	439d      	bics	r5, r3
 80032fe:	42a8      	cmp	r0, r5
 8003300:	d0f8      	beq.n	80032f4 <sbrk_aligned+0x24>
 8003302:	1a29      	subs	r1, r5, r0
 8003304:	0020      	movs	r0, r4
 8003306:	f000 fca9 	bl	8003c5c <_sbrk_r>
 800330a:	3001      	adds	r0, #1
 800330c:	d1f2      	bne.n	80032f4 <sbrk_aligned+0x24>
 800330e:	e7ef      	b.n	80032f0 <sbrk_aligned+0x20>
 8003310:	20000304 	.word	0x20000304

08003314 <_malloc_r>:
 8003314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003316:	2203      	movs	r2, #3
 8003318:	1ccb      	adds	r3, r1, #3
 800331a:	4393      	bics	r3, r2
 800331c:	3308      	adds	r3, #8
 800331e:	0005      	movs	r5, r0
 8003320:	001f      	movs	r7, r3
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d234      	bcs.n	8003390 <_malloc_r+0x7c>
 8003326:	270c      	movs	r7, #12
 8003328:	42b9      	cmp	r1, r7
 800332a:	d833      	bhi.n	8003394 <_malloc_r+0x80>
 800332c:	0028      	movs	r0, r5
 800332e:	f000 f871 	bl	8003414 <__malloc_lock>
 8003332:	4e37      	ldr	r6, [pc, #220]	@ (8003410 <_malloc_r+0xfc>)
 8003334:	6833      	ldr	r3, [r6, #0]
 8003336:	001c      	movs	r4, r3
 8003338:	2c00      	cmp	r4, #0
 800333a:	d12f      	bne.n	800339c <_malloc_r+0x88>
 800333c:	0039      	movs	r1, r7
 800333e:	0028      	movs	r0, r5
 8003340:	f7ff ffc6 	bl	80032d0 <sbrk_aligned>
 8003344:	0004      	movs	r4, r0
 8003346:	1c43      	adds	r3, r0, #1
 8003348:	d15f      	bne.n	800340a <_malloc_r+0xf6>
 800334a:	6834      	ldr	r4, [r6, #0]
 800334c:	9400      	str	r4, [sp, #0]
 800334e:	9b00      	ldr	r3, [sp, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d14a      	bne.n	80033ea <_malloc_r+0xd6>
 8003354:	2c00      	cmp	r4, #0
 8003356:	d052      	beq.n	80033fe <_malloc_r+0xea>
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	0028      	movs	r0, r5
 800335c:	18e3      	adds	r3, r4, r3
 800335e:	9900      	ldr	r1, [sp, #0]
 8003360:	9301      	str	r3, [sp, #4]
 8003362:	f000 fc7b 	bl	8003c5c <_sbrk_r>
 8003366:	9b01      	ldr	r3, [sp, #4]
 8003368:	4283      	cmp	r3, r0
 800336a:	d148      	bne.n	80033fe <_malloc_r+0xea>
 800336c:	6823      	ldr	r3, [r4, #0]
 800336e:	0028      	movs	r0, r5
 8003370:	1aff      	subs	r7, r7, r3
 8003372:	0039      	movs	r1, r7
 8003374:	f7ff ffac 	bl	80032d0 <sbrk_aligned>
 8003378:	3001      	adds	r0, #1
 800337a:	d040      	beq.n	80033fe <_malloc_r+0xea>
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	19db      	adds	r3, r3, r7
 8003380:	6023      	str	r3, [r4, #0]
 8003382:	6833      	ldr	r3, [r6, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	2a00      	cmp	r2, #0
 8003388:	d133      	bne.n	80033f2 <_malloc_r+0xde>
 800338a:	9b00      	ldr	r3, [sp, #0]
 800338c:	6033      	str	r3, [r6, #0]
 800338e:	e019      	b.n	80033c4 <_malloc_r+0xb0>
 8003390:	2b00      	cmp	r3, #0
 8003392:	dac9      	bge.n	8003328 <_malloc_r+0x14>
 8003394:	230c      	movs	r3, #12
 8003396:	602b      	str	r3, [r5, #0]
 8003398:	2000      	movs	r0, #0
 800339a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800339c:	6821      	ldr	r1, [r4, #0]
 800339e:	1bc9      	subs	r1, r1, r7
 80033a0:	d420      	bmi.n	80033e4 <_malloc_r+0xd0>
 80033a2:	290b      	cmp	r1, #11
 80033a4:	d90a      	bls.n	80033bc <_malloc_r+0xa8>
 80033a6:	19e2      	adds	r2, r4, r7
 80033a8:	6027      	str	r7, [r4, #0]
 80033aa:	42a3      	cmp	r3, r4
 80033ac:	d104      	bne.n	80033b8 <_malloc_r+0xa4>
 80033ae:	6032      	str	r2, [r6, #0]
 80033b0:	6863      	ldr	r3, [r4, #4]
 80033b2:	6011      	str	r1, [r2, #0]
 80033b4:	6053      	str	r3, [r2, #4]
 80033b6:	e005      	b.n	80033c4 <_malloc_r+0xb0>
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	e7f9      	b.n	80033b0 <_malloc_r+0x9c>
 80033bc:	6862      	ldr	r2, [r4, #4]
 80033be:	42a3      	cmp	r3, r4
 80033c0:	d10e      	bne.n	80033e0 <_malloc_r+0xcc>
 80033c2:	6032      	str	r2, [r6, #0]
 80033c4:	0028      	movs	r0, r5
 80033c6:	f000 f82d 	bl	8003424 <__malloc_unlock>
 80033ca:	0020      	movs	r0, r4
 80033cc:	2207      	movs	r2, #7
 80033ce:	300b      	adds	r0, #11
 80033d0:	1d23      	adds	r3, r4, #4
 80033d2:	4390      	bics	r0, r2
 80033d4:	1ac2      	subs	r2, r0, r3
 80033d6:	4298      	cmp	r0, r3
 80033d8:	d0df      	beq.n	800339a <_malloc_r+0x86>
 80033da:	1a1b      	subs	r3, r3, r0
 80033dc:	50a3      	str	r3, [r4, r2]
 80033de:	e7dc      	b.n	800339a <_malloc_r+0x86>
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	e7ef      	b.n	80033c4 <_malloc_r+0xb0>
 80033e4:	0023      	movs	r3, r4
 80033e6:	6864      	ldr	r4, [r4, #4]
 80033e8:	e7a6      	b.n	8003338 <_malloc_r+0x24>
 80033ea:	9c00      	ldr	r4, [sp, #0]
 80033ec:	6863      	ldr	r3, [r4, #4]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	e7ad      	b.n	800334e <_malloc_r+0x3a>
 80033f2:	001a      	movs	r2, r3
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	42a3      	cmp	r3, r4
 80033f8:	d1fb      	bne.n	80033f2 <_malloc_r+0xde>
 80033fa:	2300      	movs	r3, #0
 80033fc:	e7da      	b.n	80033b4 <_malloc_r+0xa0>
 80033fe:	230c      	movs	r3, #12
 8003400:	0028      	movs	r0, r5
 8003402:	602b      	str	r3, [r5, #0]
 8003404:	f000 f80e 	bl	8003424 <__malloc_unlock>
 8003408:	e7c6      	b.n	8003398 <_malloc_r+0x84>
 800340a:	6007      	str	r7, [r0, #0]
 800340c:	e7da      	b.n	80033c4 <_malloc_r+0xb0>
 800340e:	46c0      	nop			@ (mov r8, r8)
 8003410:	20000308 	.word	0x20000308

08003414 <__malloc_lock>:
 8003414:	b510      	push	{r4, lr}
 8003416:	4802      	ldr	r0, [pc, #8]	@ (8003420 <__malloc_lock+0xc>)
 8003418:	f7ff ff0d 	bl	8003236 <__retarget_lock_acquire_recursive>
 800341c:	bd10      	pop	{r4, pc}
 800341e:	46c0      	nop			@ (mov r8, r8)
 8003420:	20000300 	.word	0x20000300

08003424 <__malloc_unlock>:
 8003424:	b510      	push	{r4, lr}
 8003426:	4802      	ldr	r0, [pc, #8]	@ (8003430 <__malloc_unlock+0xc>)
 8003428:	f7ff ff06 	bl	8003238 <__retarget_lock_release_recursive>
 800342c:	bd10      	pop	{r4, pc}
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	20000300 	.word	0x20000300

08003434 <__sfputc_r>:
 8003434:	6893      	ldr	r3, [r2, #8]
 8003436:	b510      	push	{r4, lr}
 8003438:	3b01      	subs	r3, #1
 800343a:	6093      	str	r3, [r2, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	da04      	bge.n	800344a <__sfputc_r+0x16>
 8003440:	6994      	ldr	r4, [r2, #24]
 8003442:	42a3      	cmp	r3, r4
 8003444:	db07      	blt.n	8003456 <__sfputc_r+0x22>
 8003446:	290a      	cmp	r1, #10
 8003448:	d005      	beq.n	8003456 <__sfputc_r+0x22>
 800344a:	6813      	ldr	r3, [r2, #0]
 800344c:	1c58      	adds	r0, r3, #1
 800344e:	6010      	str	r0, [r2, #0]
 8003450:	7019      	strb	r1, [r3, #0]
 8003452:	0008      	movs	r0, r1
 8003454:	bd10      	pop	{r4, pc}
 8003456:	f000 fb60 	bl	8003b1a <__swbuf_r>
 800345a:	0001      	movs	r1, r0
 800345c:	e7f9      	b.n	8003452 <__sfputc_r+0x1e>

0800345e <__sfputs_r>:
 800345e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003460:	0006      	movs	r6, r0
 8003462:	000f      	movs	r7, r1
 8003464:	0014      	movs	r4, r2
 8003466:	18d5      	adds	r5, r2, r3
 8003468:	42ac      	cmp	r4, r5
 800346a:	d101      	bne.n	8003470 <__sfputs_r+0x12>
 800346c:	2000      	movs	r0, #0
 800346e:	e007      	b.n	8003480 <__sfputs_r+0x22>
 8003470:	7821      	ldrb	r1, [r4, #0]
 8003472:	003a      	movs	r2, r7
 8003474:	0030      	movs	r0, r6
 8003476:	f7ff ffdd 	bl	8003434 <__sfputc_r>
 800347a:	3401      	adds	r4, #1
 800347c:	1c43      	adds	r3, r0, #1
 800347e:	d1f3      	bne.n	8003468 <__sfputs_r+0xa>
 8003480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003484 <_vfiprintf_r>:
 8003484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003486:	b0a1      	sub	sp, #132	@ 0x84
 8003488:	000f      	movs	r7, r1
 800348a:	0015      	movs	r5, r2
 800348c:	001e      	movs	r6, r3
 800348e:	9003      	str	r0, [sp, #12]
 8003490:	2800      	cmp	r0, #0
 8003492:	d004      	beq.n	800349e <_vfiprintf_r+0x1a>
 8003494:	6a03      	ldr	r3, [r0, #32]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <_vfiprintf_r+0x1a>
 800349a:	f7ff fdbb 	bl	8003014 <__sinit>
 800349e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034a0:	07db      	lsls	r3, r3, #31
 80034a2:	d405      	bmi.n	80034b0 <_vfiprintf_r+0x2c>
 80034a4:	89bb      	ldrh	r3, [r7, #12]
 80034a6:	059b      	lsls	r3, r3, #22
 80034a8:	d402      	bmi.n	80034b0 <_vfiprintf_r+0x2c>
 80034aa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80034ac:	f7ff fec3 	bl	8003236 <__retarget_lock_acquire_recursive>
 80034b0:	89bb      	ldrh	r3, [r7, #12]
 80034b2:	071b      	lsls	r3, r3, #28
 80034b4:	d502      	bpl.n	80034bc <_vfiprintf_r+0x38>
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d113      	bne.n	80034e4 <_vfiprintf_r+0x60>
 80034bc:	0039      	movs	r1, r7
 80034be:	9803      	ldr	r0, [sp, #12]
 80034c0:	f000 fb6e 	bl	8003ba0 <__swsetup_r>
 80034c4:	2800      	cmp	r0, #0
 80034c6:	d00d      	beq.n	80034e4 <_vfiprintf_r+0x60>
 80034c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034ca:	07db      	lsls	r3, r3, #31
 80034cc:	d503      	bpl.n	80034d6 <_vfiprintf_r+0x52>
 80034ce:	2001      	movs	r0, #1
 80034d0:	4240      	negs	r0, r0
 80034d2:	b021      	add	sp, #132	@ 0x84
 80034d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034d6:	89bb      	ldrh	r3, [r7, #12]
 80034d8:	059b      	lsls	r3, r3, #22
 80034da:	d4f8      	bmi.n	80034ce <_vfiprintf_r+0x4a>
 80034dc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80034de:	f7ff feab 	bl	8003238 <__retarget_lock_release_recursive>
 80034e2:	e7f4      	b.n	80034ce <_vfiprintf_r+0x4a>
 80034e4:	2300      	movs	r3, #0
 80034e6:	ac08      	add	r4, sp, #32
 80034e8:	6163      	str	r3, [r4, #20]
 80034ea:	3320      	adds	r3, #32
 80034ec:	7663      	strb	r3, [r4, #25]
 80034ee:	3310      	adds	r3, #16
 80034f0:	76a3      	strb	r3, [r4, #26]
 80034f2:	9607      	str	r6, [sp, #28]
 80034f4:	002e      	movs	r6, r5
 80034f6:	7833      	ldrb	r3, [r6, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <_vfiprintf_r+0x7c>
 80034fc:	2b25      	cmp	r3, #37	@ 0x25
 80034fe:	d148      	bne.n	8003592 <_vfiprintf_r+0x10e>
 8003500:	1b73      	subs	r3, r6, r5
 8003502:	9305      	str	r3, [sp, #20]
 8003504:	42ae      	cmp	r6, r5
 8003506:	d00b      	beq.n	8003520 <_vfiprintf_r+0x9c>
 8003508:	002a      	movs	r2, r5
 800350a:	0039      	movs	r1, r7
 800350c:	9803      	ldr	r0, [sp, #12]
 800350e:	f7ff ffa6 	bl	800345e <__sfputs_r>
 8003512:	3001      	adds	r0, #1
 8003514:	d100      	bne.n	8003518 <_vfiprintf_r+0x94>
 8003516:	e0ae      	b.n	8003676 <_vfiprintf_r+0x1f2>
 8003518:	6963      	ldr	r3, [r4, #20]
 800351a:	9a05      	ldr	r2, [sp, #20]
 800351c:	189b      	adds	r3, r3, r2
 800351e:	6163      	str	r3, [r4, #20]
 8003520:	7833      	ldrb	r3, [r6, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d100      	bne.n	8003528 <_vfiprintf_r+0xa4>
 8003526:	e0a6      	b.n	8003676 <_vfiprintf_r+0x1f2>
 8003528:	2201      	movs	r2, #1
 800352a:	2300      	movs	r3, #0
 800352c:	4252      	negs	r2, r2
 800352e:	6062      	str	r2, [r4, #4]
 8003530:	a904      	add	r1, sp, #16
 8003532:	3254      	adds	r2, #84	@ 0x54
 8003534:	1852      	adds	r2, r2, r1
 8003536:	1c75      	adds	r5, r6, #1
 8003538:	6023      	str	r3, [r4, #0]
 800353a:	60e3      	str	r3, [r4, #12]
 800353c:	60a3      	str	r3, [r4, #8]
 800353e:	7013      	strb	r3, [r2, #0]
 8003540:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003542:	4b59      	ldr	r3, [pc, #356]	@ (80036a8 <_vfiprintf_r+0x224>)
 8003544:	2205      	movs	r2, #5
 8003546:	0018      	movs	r0, r3
 8003548:	7829      	ldrb	r1, [r5, #0]
 800354a:	9305      	str	r3, [sp, #20]
 800354c:	f000 fb98 	bl	8003c80 <memchr>
 8003550:	1c6e      	adds	r6, r5, #1
 8003552:	2800      	cmp	r0, #0
 8003554:	d11f      	bne.n	8003596 <_vfiprintf_r+0x112>
 8003556:	6822      	ldr	r2, [r4, #0]
 8003558:	06d3      	lsls	r3, r2, #27
 800355a:	d504      	bpl.n	8003566 <_vfiprintf_r+0xe2>
 800355c:	2353      	movs	r3, #83	@ 0x53
 800355e:	a904      	add	r1, sp, #16
 8003560:	185b      	adds	r3, r3, r1
 8003562:	2120      	movs	r1, #32
 8003564:	7019      	strb	r1, [r3, #0]
 8003566:	0713      	lsls	r3, r2, #28
 8003568:	d504      	bpl.n	8003574 <_vfiprintf_r+0xf0>
 800356a:	2353      	movs	r3, #83	@ 0x53
 800356c:	a904      	add	r1, sp, #16
 800356e:	185b      	adds	r3, r3, r1
 8003570:	212b      	movs	r1, #43	@ 0x2b
 8003572:	7019      	strb	r1, [r3, #0]
 8003574:	782b      	ldrb	r3, [r5, #0]
 8003576:	2b2a      	cmp	r3, #42	@ 0x2a
 8003578:	d016      	beq.n	80035a8 <_vfiprintf_r+0x124>
 800357a:	002e      	movs	r6, r5
 800357c:	2100      	movs	r1, #0
 800357e:	200a      	movs	r0, #10
 8003580:	68e3      	ldr	r3, [r4, #12]
 8003582:	7832      	ldrb	r2, [r6, #0]
 8003584:	1c75      	adds	r5, r6, #1
 8003586:	3a30      	subs	r2, #48	@ 0x30
 8003588:	2a09      	cmp	r2, #9
 800358a:	d950      	bls.n	800362e <_vfiprintf_r+0x1aa>
 800358c:	2900      	cmp	r1, #0
 800358e:	d111      	bne.n	80035b4 <_vfiprintf_r+0x130>
 8003590:	e017      	b.n	80035c2 <_vfiprintf_r+0x13e>
 8003592:	3601      	adds	r6, #1
 8003594:	e7af      	b.n	80034f6 <_vfiprintf_r+0x72>
 8003596:	9b05      	ldr	r3, [sp, #20]
 8003598:	6822      	ldr	r2, [r4, #0]
 800359a:	1ac0      	subs	r0, r0, r3
 800359c:	2301      	movs	r3, #1
 800359e:	4083      	lsls	r3, r0
 80035a0:	4313      	orrs	r3, r2
 80035a2:	0035      	movs	r5, r6
 80035a4:	6023      	str	r3, [r4, #0]
 80035a6:	e7cc      	b.n	8003542 <_vfiprintf_r+0xbe>
 80035a8:	9b07      	ldr	r3, [sp, #28]
 80035aa:	1d19      	adds	r1, r3, #4
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	9107      	str	r1, [sp, #28]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	db01      	blt.n	80035b8 <_vfiprintf_r+0x134>
 80035b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80035b6:	e004      	b.n	80035c2 <_vfiprintf_r+0x13e>
 80035b8:	425b      	negs	r3, r3
 80035ba:	60e3      	str	r3, [r4, #12]
 80035bc:	2302      	movs	r3, #2
 80035be:	4313      	orrs	r3, r2
 80035c0:	6023      	str	r3, [r4, #0]
 80035c2:	7833      	ldrb	r3, [r6, #0]
 80035c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80035c6:	d10c      	bne.n	80035e2 <_vfiprintf_r+0x15e>
 80035c8:	7873      	ldrb	r3, [r6, #1]
 80035ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80035cc:	d134      	bne.n	8003638 <_vfiprintf_r+0x1b4>
 80035ce:	9b07      	ldr	r3, [sp, #28]
 80035d0:	3602      	adds	r6, #2
 80035d2:	1d1a      	adds	r2, r3, #4
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	9207      	str	r2, [sp, #28]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	da01      	bge.n	80035e0 <_vfiprintf_r+0x15c>
 80035dc:	2301      	movs	r3, #1
 80035de:	425b      	negs	r3, r3
 80035e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80035e2:	4d32      	ldr	r5, [pc, #200]	@ (80036ac <_vfiprintf_r+0x228>)
 80035e4:	2203      	movs	r2, #3
 80035e6:	0028      	movs	r0, r5
 80035e8:	7831      	ldrb	r1, [r6, #0]
 80035ea:	f000 fb49 	bl	8003c80 <memchr>
 80035ee:	2800      	cmp	r0, #0
 80035f0:	d006      	beq.n	8003600 <_vfiprintf_r+0x17c>
 80035f2:	2340      	movs	r3, #64	@ 0x40
 80035f4:	1b40      	subs	r0, r0, r5
 80035f6:	4083      	lsls	r3, r0
 80035f8:	6822      	ldr	r2, [r4, #0]
 80035fa:	3601      	adds	r6, #1
 80035fc:	4313      	orrs	r3, r2
 80035fe:	6023      	str	r3, [r4, #0]
 8003600:	7831      	ldrb	r1, [r6, #0]
 8003602:	2206      	movs	r2, #6
 8003604:	482a      	ldr	r0, [pc, #168]	@ (80036b0 <_vfiprintf_r+0x22c>)
 8003606:	1c75      	adds	r5, r6, #1
 8003608:	7621      	strb	r1, [r4, #24]
 800360a:	f000 fb39 	bl	8003c80 <memchr>
 800360e:	2800      	cmp	r0, #0
 8003610:	d040      	beq.n	8003694 <_vfiprintf_r+0x210>
 8003612:	4b28      	ldr	r3, [pc, #160]	@ (80036b4 <_vfiprintf_r+0x230>)
 8003614:	2b00      	cmp	r3, #0
 8003616:	d122      	bne.n	800365e <_vfiprintf_r+0x1da>
 8003618:	2207      	movs	r2, #7
 800361a:	9b07      	ldr	r3, [sp, #28]
 800361c:	3307      	adds	r3, #7
 800361e:	4393      	bics	r3, r2
 8003620:	3308      	adds	r3, #8
 8003622:	9307      	str	r3, [sp, #28]
 8003624:	6963      	ldr	r3, [r4, #20]
 8003626:	9a04      	ldr	r2, [sp, #16]
 8003628:	189b      	adds	r3, r3, r2
 800362a:	6163      	str	r3, [r4, #20]
 800362c:	e762      	b.n	80034f4 <_vfiprintf_r+0x70>
 800362e:	4343      	muls	r3, r0
 8003630:	002e      	movs	r6, r5
 8003632:	2101      	movs	r1, #1
 8003634:	189b      	adds	r3, r3, r2
 8003636:	e7a4      	b.n	8003582 <_vfiprintf_r+0xfe>
 8003638:	2300      	movs	r3, #0
 800363a:	200a      	movs	r0, #10
 800363c:	0019      	movs	r1, r3
 800363e:	3601      	adds	r6, #1
 8003640:	6063      	str	r3, [r4, #4]
 8003642:	7832      	ldrb	r2, [r6, #0]
 8003644:	1c75      	adds	r5, r6, #1
 8003646:	3a30      	subs	r2, #48	@ 0x30
 8003648:	2a09      	cmp	r2, #9
 800364a:	d903      	bls.n	8003654 <_vfiprintf_r+0x1d0>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0c8      	beq.n	80035e2 <_vfiprintf_r+0x15e>
 8003650:	9109      	str	r1, [sp, #36]	@ 0x24
 8003652:	e7c6      	b.n	80035e2 <_vfiprintf_r+0x15e>
 8003654:	4341      	muls	r1, r0
 8003656:	002e      	movs	r6, r5
 8003658:	2301      	movs	r3, #1
 800365a:	1889      	adds	r1, r1, r2
 800365c:	e7f1      	b.n	8003642 <_vfiprintf_r+0x1be>
 800365e:	aa07      	add	r2, sp, #28
 8003660:	9200      	str	r2, [sp, #0]
 8003662:	0021      	movs	r1, r4
 8003664:	003a      	movs	r2, r7
 8003666:	4b14      	ldr	r3, [pc, #80]	@ (80036b8 <_vfiprintf_r+0x234>)
 8003668:	9803      	ldr	r0, [sp, #12]
 800366a:	e000      	b.n	800366e <_vfiprintf_r+0x1ea>
 800366c:	bf00      	nop
 800366e:	9004      	str	r0, [sp, #16]
 8003670:	9b04      	ldr	r3, [sp, #16]
 8003672:	3301      	adds	r3, #1
 8003674:	d1d6      	bne.n	8003624 <_vfiprintf_r+0x1a0>
 8003676:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003678:	07db      	lsls	r3, r3, #31
 800367a:	d405      	bmi.n	8003688 <_vfiprintf_r+0x204>
 800367c:	89bb      	ldrh	r3, [r7, #12]
 800367e:	059b      	lsls	r3, r3, #22
 8003680:	d402      	bmi.n	8003688 <_vfiprintf_r+0x204>
 8003682:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003684:	f7ff fdd8 	bl	8003238 <__retarget_lock_release_recursive>
 8003688:	89bb      	ldrh	r3, [r7, #12]
 800368a:	065b      	lsls	r3, r3, #25
 800368c:	d500      	bpl.n	8003690 <_vfiprintf_r+0x20c>
 800368e:	e71e      	b.n	80034ce <_vfiprintf_r+0x4a>
 8003690:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003692:	e71e      	b.n	80034d2 <_vfiprintf_r+0x4e>
 8003694:	aa07      	add	r2, sp, #28
 8003696:	9200      	str	r2, [sp, #0]
 8003698:	0021      	movs	r1, r4
 800369a:	003a      	movs	r2, r7
 800369c:	4b06      	ldr	r3, [pc, #24]	@ (80036b8 <_vfiprintf_r+0x234>)
 800369e:	9803      	ldr	r0, [sp, #12]
 80036a0:	f000 f87c 	bl	800379c <_printf_i>
 80036a4:	e7e3      	b.n	800366e <_vfiprintf_r+0x1ea>
 80036a6:	46c0      	nop			@ (mov r8, r8)
 80036a8:	08003e6c 	.word	0x08003e6c
 80036ac:	08003e72 	.word	0x08003e72
 80036b0:	08003e76 	.word	0x08003e76
 80036b4:	00000000 	.word	0x00000000
 80036b8:	0800345f 	.word	0x0800345f

080036bc <_printf_common>:
 80036bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036be:	0016      	movs	r6, r2
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	688a      	ldr	r2, [r1, #8]
 80036c4:	690b      	ldr	r3, [r1, #16]
 80036c6:	000c      	movs	r4, r1
 80036c8:	9000      	str	r0, [sp, #0]
 80036ca:	4293      	cmp	r3, r2
 80036cc:	da00      	bge.n	80036d0 <_printf_common+0x14>
 80036ce:	0013      	movs	r3, r2
 80036d0:	0022      	movs	r2, r4
 80036d2:	6033      	str	r3, [r6, #0]
 80036d4:	3243      	adds	r2, #67	@ 0x43
 80036d6:	7812      	ldrb	r2, [r2, #0]
 80036d8:	2a00      	cmp	r2, #0
 80036da:	d001      	beq.n	80036e0 <_printf_common+0x24>
 80036dc:	3301      	adds	r3, #1
 80036de:	6033      	str	r3, [r6, #0]
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	069b      	lsls	r3, r3, #26
 80036e4:	d502      	bpl.n	80036ec <_printf_common+0x30>
 80036e6:	6833      	ldr	r3, [r6, #0]
 80036e8:	3302      	adds	r3, #2
 80036ea:	6033      	str	r3, [r6, #0]
 80036ec:	6822      	ldr	r2, [r4, #0]
 80036ee:	2306      	movs	r3, #6
 80036f0:	0015      	movs	r5, r2
 80036f2:	401d      	ands	r5, r3
 80036f4:	421a      	tst	r2, r3
 80036f6:	d027      	beq.n	8003748 <_printf_common+0x8c>
 80036f8:	0023      	movs	r3, r4
 80036fa:	3343      	adds	r3, #67	@ 0x43
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	1e5a      	subs	r2, r3, #1
 8003700:	4193      	sbcs	r3, r2
 8003702:	6822      	ldr	r2, [r4, #0]
 8003704:	0692      	lsls	r2, r2, #26
 8003706:	d430      	bmi.n	800376a <_printf_common+0xae>
 8003708:	0022      	movs	r2, r4
 800370a:	9901      	ldr	r1, [sp, #4]
 800370c:	9800      	ldr	r0, [sp, #0]
 800370e:	9d08      	ldr	r5, [sp, #32]
 8003710:	3243      	adds	r2, #67	@ 0x43
 8003712:	47a8      	blx	r5
 8003714:	3001      	adds	r0, #1
 8003716:	d025      	beq.n	8003764 <_printf_common+0xa8>
 8003718:	2206      	movs	r2, #6
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	2500      	movs	r5, #0
 800371e:	4013      	ands	r3, r2
 8003720:	2b04      	cmp	r3, #4
 8003722:	d105      	bne.n	8003730 <_printf_common+0x74>
 8003724:	6833      	ldr	r3, [r6, #0]
 8003726:	68e5      	ldr	r5, [r4, #12]
 8003728:	1aed      	subs	r5, r5, r3
 800372a:	43eb      	mvns	r3, r5
 800372c:	17db      	asrs	r3, r3, #31
 800372e:	401d      	ands	r5, r3
 8003730:	68a3      	ldr	r3, [r4, #8]
 8003732:	6922      	ldr	r2, [r4, #16]
 8003734:	4293      	cmp	r3, r2
 8003736:	dd01      	ble.n	800373c <_printf_common+0x80>
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	18ed      	adds	r5, r5, r3
 800373c:	2600      	movs	r6, #0
 800373e:	42b5      	cmp	r5, r6
 8003740:	d120      	bne.n	8003784 <_printf_common+0xc8>
 8003742:	2000      	movs	r0, #0
 8003744:	e010      	b.n	8003768 <_printf_common+0xac>
 8003746:	3501      	adds	r5, #1
 8003748:	68e3      	ldr	r3, [r4, #12]
 800374a:	6832      	ldr	r2, [r6, #0]
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	42ab      	cmp	r3, r5
 8003750:	ddd2      	ble.n	80036f8 <_printf_common+0x3c>
 8003752:	0022      	movs	r2, r4
 8003754:	2301      	movs	r3, #1
 8003756:	9901      	ldr	r1, [sp, #4]
 8003758:	9800      	ldr	r0, [sp, #0]
 800375a:	9f08      	ldr	r7, [sp, #32]
 800375c:	3219      	adds	r2, #25
 800375e:	47b8      	blx	r7
 8003760:	3001      	adds	r0, #1
 8003762:	d1f0      	bne.n	8003746 <_printf_common+0x8a>
 8003764:	2001      	movs	r0, #1
 8003766:	4240      	negs	r0, r0
 8003768:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800376a:	2030      	movs	r0, #48	@ 0x30
 800376c:	18e1      	adds	r1, r4, r3
 800376e:	3143      	adds	r1, #67	@ 0x43
 8003770:	7008      	strb	r0, [r1, #0]
 8003772:	0021      	movs	r1, r4
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	3145      	adds	r1, #69	@ 0x45
 8003778:	7809      	ldrb	r1, [r1, #0]
 800377a:	18a2      	adds	r2, r4, r2
 800377c:	3243      	adds	r2, #67	@ 0x43
 800377e:	3302      	adds	r3, #2
 8003780:	7011      	strb	r1, [r2, #0]
 8003782:	e7c1      	b.n	8003708 <_printf_common+0x4c>
 8003784:	0022      	movs	r2, r4
 8003786:	2301      	movs	r3, #1
 8003788:	9901      	ldr	r1, [sp, #4]
 800378a:	9800      	ldr	r0, [sp, #0]
 800378c:	9f08      	ldr	r7, [sp, #32]
 800378e:	321a      	adds	r2, #26
 8003790:	47b8      	blx	r7
 8003792:	3001      	adds	r0, #1
 8003794:	d0e6      	beq.n	8003764 <_printf_common+0xa8>
 8003796:	3601      	adds	r6, #1
 8003798:	e7d1      	b.n	800373e <_printf_common+0x82>
	...

0800379c <_printf_i>:
 800379c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800379e:	b08b      	sub	sp, #44	@ 0x2c
 80037a0:	9206      	str	r2, [sp, #24]
 80037a2:	000a      	movs	r2, r1
 80037a4:	3243      	adds	r2, #67	@ 0x43
 80037a6:	9307      	str	r3, [sp, #28]
 80037a8:	9005      	str	r0, [sp, #20]
 80037aa:	9203      	str	r2, [sp, #12]
 80037ac:	7e0a      	ldrb	r2, [r1, #24]
 80037ae:	000c      	movs	r4, r1
 80037b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80037b2:	2a78      	cmp	r2, #120	@ 0x78
 80037b4:	d809      	bhi.n	80037ca <_printf_i+0x2e>
 80037b6:	2a62      	cmp	r2, #98	@ 0x62
 80037b8:	d80b      	bhi.n	80037d2 <_printf_i+0x36>
 80037ba:	2a00      	cmp	r2, #0
 80037bc:	d100      	bne.n	80037c0 <_printf_i+0x24>
 80037be:	e0bc      	b.n	800393a <_printf_i+0x19e>
 80037c0:	497b      	ldr	r1, [pc, #492]	@ (80039b0 <_printf_i+0x214>)
 80037c2:	9104      	str	r1, [sp, #16]
 80037c4:	2a58      	cmp	r2, #88	@ 0x58
 80037c6:	d100      	bne.n	80037ca <_printf_i+0x2e>
 80037c8:	e090      	b.n	80038ec <_printf_i+0x150>
 80037ca:	0025      	movs	r5, r4
 80037cc:	3542      	adds	r5, #66	@ 0x42
 80037ce:	702a      	strb	r2, [r5, #0]
 80037d0:	e022      	b.n	8003818 <_printf_i+0x7c>
 80037d2:	0010      	movs	r0, r2
 80037d4:	3863      	subs	r0, #99	@ 0x63
 80037d6:	2815      	cmp	r0, #21
 80037d8:	d8f7      	bhi.n	80037ca <_printf_i+0x2e>
 80037da:	f7fc fc95 	bl	8000108 <__gnu_thumb1_case_shi>
 80037de:	0016      	.short	0x0016
 80037e0:	fff6001f 	.word	0xfff6001f
 80037e4:	fff6fff6 	.word	0xfff6fff6
 80037e8:	001ffff6 	.word	0x001ffff6
 80037ec:	fff6fff6 	.word	0xfff6fff6
 80037f0:	fff6fff6 	.word	0xfff6fff6
 80037f4:	003600a1 	.word	0x003600a1
 80037f8:	fff60080 	.word	0xfff60080
 80037fc:	00b2fff6 	.word	0x00b2fff6
 8003800:	0036fff6 	.word	0x0036fff6
 8003804:	fff6fff6 	.word	0xfff6fff6
 8003808:	0084      	.short	0x0084
 800380a:	0025      	movs	r5, r4
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	3542      	adds	r5, #66	@ 0x42
 8003810:	1d11      	adds	r1, r2, #4
 8003812:	6019      	str	r1, [r3, #0]
 8003814:	6813      	ldr	r3, [r2, #0]
 8003816:	702b      	strb	r3, [r5, #0]
 8003818:	2301      	movs	r3, #1
 800381a:	e0a0      	b.n	800395e <_printf_i+0x1c2>
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	6809      	ldr	r1, [r1, #0]
 8003820:	1d02      	adds	r2, r0, #4
 8003822:	060d      	lsls	r5, r1, #24
 8003824:	d50b      	bpl.n	800383e <_printf_i+0xa2>
 8003826:	6806      	ldr	r6, [r0, #0]
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	2e00      	cmp	r6, #0
 800382c:	da03      	bge.n	8003836 <_printf_i+0x9a>
 800382e:	232d      	movs	r3, #45	@ 0x2d
 8003830:	9a03      	ldr	r2, [sp, #12]
 8003832:	4276      	negs	r6, r6
 8003834:	7013      	strb	r3, [r2, #0]
 8003836:	4b5e      	ldr	r3, [pc, #376]	@ (80039b0 <_printf_i+0x214>)
 8003838:	270a      	movs	r7, #10
 800383a:	9304      	str	r3, [sp, #16]
 800383c:	e018      	b.n	8003870 <_printf_i+0xd4>
 800383e:	6806      	ldr	r6, [r0, #0]
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	0649      	lsls	r1, r1, #25
 8003844:	d5f1      	bpl.n	800382a <_printf_i+0x8e>
 8003846:	b236      	sxth	r6, r6
 8003848:	e7ef      	b.n	800382a <_printf_i+0x8e>
 800384a:	6808      	ldr	r0, [r1, #0]
 800384c:	6819      	ldr	r1, [r3, #0]
 800384e:	c940      	ldmia	r1!, {r6}
 8003850:	0605      	lsls	r5, r0, #24
 8003852:	d402      	bmi.n	800385a <_printf_i+0xbe>
 8003854:	0640      	lsls	r0, r0, #25
 8003856:	d500      	bpl.n	800385a <_printf_i+0xbe>
 8003858:	b2b6      	uxth	r6, r6
 800385a:	6019      	str	r1, [r3, #0]
 800385c:	4b54      	ldr	r3, [pc, #336]	@ (80039b0 <_printf_i+0x214>)
 800385e:	270a      	movs	r7, #10
 8003860:	9304      	str	r3, [sp, #16]
 8003862:	2a6f      	cmp	r2, #111	@ 0x6f
 8003864:	d100      	bne.n	8003868 <_printf_i+0xcc>
 8003866:	3f02      	subs	r7, #2
 8003868:	0023      	movs	r3, r4
 800386a:	2200      	movs	r2, #0
 800386c:	3343      	adds	r3, #67	@ 0x43
 800386e:	701a      	strb	r2, [r3, #0]
 8003870:	6863      	ldr	r3, [r4, #4]
 8003872:	60a3      	str	r3, [r4, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	db03      	blt.n	8003880 <_printf_i+0xe4>
 8003878:	2104      	movs	r1, #4
 800387a:	6822      	ldr	r2, [r4, #0]
 800387c:	438a      	bics	r2, r1
 800387e:	6022      	str	r2, [r4, #0]
 8003880:	2e00      	cmp	r6, #0
 8003882:	d102      	bne.n	800388a <_printf_i+0xee>
 8003884:	9d03      	ldr	r5, [sp, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00c      	beq.n	80038a4 <_printf_i+0x108>
 800388a:	9d03      	ldr	r5, [sp, #12]
 800388c:	0030      	movs	r0, r6
 800388e:	0039      	movs	r1, r7
 8003890:	f7fc fcca 	bl	8000228 <__aeabi_uidivmod>
 8003894:	9b04      	ldr	r3, [sp, #16]
 8003896:	3d01      	subs	r5, #1
 8003898:	5c5b      	ldrb	r3, [r3, r1]
 800389a:	702b      	strb	r3, [r5, #0]
 800389c:	0033      	movs	r3, r6
 800389e:	0006      	movs	r6, r0
 80038a0:	429f      	cmp	r7, r3
 80038a2:	d9f3      	bls.n	800388c <_printf_i+0xf0>
 80038a4:	2f08      	cmp	r7, #8
 80038a6:	d109      	bne.n	80038bc <_printf_i+0x120>
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	07db      	lsls	r3, r3, #31
 80038ac:	d506      	bpl.n	80038bc <_printf_i+0x120>
 80038ae:	6862      	ldr	r2, [r4, #4]
 80038b0:	6923      	ldr	r3, [r4, #16]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	dc02      	bgt.n	80038bc <_printf_i+0x120>
 80038b6:	2330      	movs	r3, #48	@ 0x30
 80038b8:	3d01      	subs	r5, #1
 80038ba:	702b      	strb	r3, [r5, #0]
 80038bc:	9b03      	ldr	r3, [sp, #12]
 80038be:	1b5b      	subs	r3, r3, r5
 80038c0:	6123      	str	r3, [r4, #16]
 80038c2:	9b07      	ldr	r3, [sp, #28]
 80038c4:	0021      	movs	r1, r4
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	9805      	ldr	r0, [sp, #20]
 80038ca:	9b06      	ldr	r3, [sp, #24]
 80038cc:	aa09      	add	r2, sp, #36	@ 0x24
 80038ce:	f7ff fef5 	bl	80036bc <_printf_common>
 80038d2:	3001      	adds	r0, #1
 80038d4:	d148      	bne.n	8003968 <_printf_i+0x1cc>
 80038d6:	2001      	movs	r0, #1
 80038d8:	4240      	negs	r0, r0
 80038da:	b00b      	add	sp, #44	@ 0x2c
 80038dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038de:	2220      	movs	r2, #32
 80038e0:	6809      	ldr	r1, [r1, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	6022      	str	r2, [r4, #0]
 80038e6:	2278      	movs	r2, #120	@ 0x78
 80038e8:	4932      	ldr	r1, [pc, #200]	@ (80039b4 <_printf_i+0x218>)
 80038ea:	9104      	str	r1, [sp, #16]
 80038ec:	0021      	movs	r1, r4
 80038ee:	3145      	adds	r1, #69	@ 0x45
 80038f0:	700a      	strb	r2, [r1, #0]
 80038f2:	6819      	ldr	r1, [r3, #0]
 80038f4:	6822      	ldr	r2, [r4, #0]
 80038f6:	c940      	ldmia	r1!, {r6}
 80038f8:	0610      	lsls	r0, r2, #24
 80038fa:	d402      	bmi.n	8003902 <_printf_i+0x166>
 80038fc:	0650      	lsls	r0, r2, #25
 80038fe:	d500      	bpl.n	8003902 <_printf_i+0x166>
 8003900:	b2b6      	uxth	r6, r6
 8003902:	6019      	str	r1, [r3, #0]
 8003904:	07d3      	lsls	r3, r2, #31
 8003906:	d502      	bpl.n	800390e <_printf_i+0x172>
 8003908:	2320      	movs	r3, #32
 800390a:	4313      	orrs	r3, r2
 800390c:	6023      	str	r3, [r4, #0]
 800390e:	2e00      	cmp	r6, #0
 8003910:	d001      	beq.n	8003916 <_printf_i+0x17a>
 8003912:	2710      	movs	r7, #16
 8003914:	e7a8      	b.n	8003868 <_printf_i+0xcc>
 8003916:	2220      	movs	r2, #32
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	4393      	bics	r3, r2
 800391c:	6023      	str	r3, [r4, #0]
 800391e:	e7f8      	b.n	8003912 <_printf_i+0x176>
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	680d      	ldr	r5, [r1, #0]
 8003924:	1d10      	adds	r0, r2, #4
 8003926:	6949      	ldr	r1, [r1, #20]
 8003928:	6018      	str	r0, [r3, #0]
 800392a:	6813      	ldr	r3, [r2, #0]
 800392c:	062e      	lsls	r6, r5, #24
 800392e:	d501      	bpl.n	8003934 <_printf_i+0x198>
 8003930:	6019      	str	r1, [r3, #0]
 8003932:	e002      	b.n	800393a <_printf_i+0x19e>
 8003934:	066d      	lsls	r5, r5, #25
 8003936:	d5fb      	bpl.n	8003930 <_printf_i+0x194>
 8003938:	8019      	strh	r1, [r3, #0]
 800393a:	2300      	movs	r3, #0
 800393c:	9d03      	ldr	r5, [sp, #12]
 800393e:	6123      	str	r3, [r4, #16]
 8003940:	e7bf      	b.n	80038c2 <_printf_i+0x126>
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	1d11      	adds	r1, r2, #4
 8003946:	6019      	str	r1, [r3, #0]
 8003948:	6815      	ldr	r5, [r2, #0]
 800394a:	2100      	movs	r1, #0
 800394c:	0028      	movs	r0, r5
 800394e:	6862      	ldr	r2, [r4, #4]
 8003950:	f000 f996 	bl	8003c80 <memchr>
 8003954:	2800      	cmp	r0, #0
 8003956:	d001      	beq.n	800395c <_printf_i+0x1c0>
 8003958:	1b40      	subs	r0, r0, r5
 800395a:	6060      	str	r0, [r4, #4]
 800395c:	6863      	ldr	r3, [r4, #4]
 800395e:	6123      	str	r3, [r4, #16]
 8003960:	2300      	movs	r3, #0
 8003962:	9a03      	ldr	r2, [sp, #12]
 8003964:	7013      	strb	r3, [r2, #0]
 8003966:	e7ac      	b.n	80038c2 <_printf_i+0x126>
 8003968:	002a      	movs	r2, r5
 800396a:	6923      	ldr	r3, [r4, #16]
 800396c:	9906      	ldr	r1, [sp, #24]
 800396e:	9805      	ldr	r0, [sp, #20]
 8003970:	9d07      	ldr	r5, [sp, #28]
 8003972:	47a8      	blx	r5
 8003974:	3001      	adds	r0, #1
 8003976:	d0ae      	beq.n	80038d6 <_printf_i+0x13a>
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	079b      	lsls	r3, r3, #30
 800397c:	d415      	bmi.n	80039aa <_printf_i+0x20e>
 800397e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003980:	68e0      	ldr	r0, [r4, #12]
 8003982:	4298      	cmp	r0, r3
 8003984:	daa9      	bge.n	80038da <_printf_i+0x13e>
 8003986:	0018      	movs	r0, r3
 8003988:	e7a7      	b.n	80038da <_printf_i+0x13e>
 800398a:	0022      	movs	r2, r4
 800398c:	2301      	movs	r3, #1
 800398e:	9906      	ldr	r1, [sp, #24]
 8003990:	9805      	ldr	r0, [sp, #20]
 8003992:	9e07      	ldr	r6, [sp, #28]
 8003994:	3219      	adds	r2, #25
 8003996:	47b0      	blx	r6
 8003998:	3001      	adds	r0, #1
 800399a:	d09c      	beq.n	80038d6 <_printf_i+0x13a>
 800399c:	3501      	adds	r5, #1
 800399e:	68e3      	ldr	r3, [r4, #12]
 80039a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	42ab      	cmp	r3, r5
 80039a6:	dcf0      	bgt.n	800398a <_printf_i+0x1ee>
 80039a8:	e7e9      	b.n	800397e <_printf_i+0x1e2>
 80039aa:	2500      	movs	r5, #0
 80039ac:	e7f7      	b.n	800399e <_printf_i+0x202>
 80039ae:	46c0      	nop			@ (mov r8, r8)
 80039b0:	08003e7d 	.word	0x08003e7d
 80039b4:	08003e8e 	.word	0x08003e8e

080039b8 <__sflush_r>:
 80039b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039ba:	220c      	movs	r2, #12
 80039bc:	5e8b      	ldrsh	r3, [r1, r2]
 80039be:	0005      	movs	r5, r0
 80039c0:	000c      	movs	r4, r1
 80039c2:	071a      	lsls	r2, r3, #28
 80039c4:	d456      	bmi.n	8003a74 <__sflush_r+0xbc>
 80039c6:	684a      	ldr	r2, [r1, #4]
 80039c8:	2a00      	cmp	r2, #0
 80039ca:	dc02      	bgt.n	80039d2 <__sflush_r+0x1a>
 80039cc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80039ce:	2a00      	cmp	r2, #0
 80039d0:	dd4e      	ble.n	8003a70 <__sflush_r+0xb8>
 80039d2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80039d4:	2f00      	cmp	r7, #0
 80039d6:	d04b      	beq.n	8003a70 <__sflush_r+0xb8>
 80039d8:	2200      	movs	r2, #0
 80039da:	2080      	movs	r0, #128	@ 0x80
 80039dc:	682e      	ldr	r6, [r5, #0]
 80039de:	602a      	str	r2, [r5, #0]
 80039e0:	001a      	movs	r2, r3
 80039e2:	0140      	lsls	r0, r0, #5
 80039e4:	6a21      	ldr	r1, [r4, #32]
 80039e6:	4002      	ands	r2, r0
 80039e8:	4203      	tst	r3, r0
 80039ea:	d033      	beq.n	8003a54 <__sflush_r+0x9c>
 80039ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80039ee:	89a3      	ldrh	r3, [r4, #12]
 80039f0:	075b      	lsls	r3, r3, #29
 80039f2:	d506      	bpl.n	8003a02 <__sflush_r+0x4a>
 80039f4:	6863      	ldr	r3, [r4, #4]
 80039f6:	1ad2      	subs	r2, r2, r3
 80039f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <__sflush_r+0x4a>
 80039fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a00:	1ad2      	subs	r2, r2, r3
 8003a02:	2300      	movs	r3, #0
 8003a04:	0028      	movs	r0, r5
 8003a06:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003a08:	6a21      	ldr	r1, [r4, #32]
 8003a0a:	47b8      	blx	r7
 8003a0c:	89a2      	ldrh	r2, [r4, #12]
 8003a0e:	1c43      	adds	r3, r0, #1
 8003a10:	d106      	bne.n	8003a20 <__sflush_r+0x68>
 8003a12:	6829      	ldr	r1, [r5, #0]
 8003a14:	291d      	cmp	r1, #29
 8003a16:	d846      	bhi.n	8003aa6 <__sflush_r+0xee>
 8003a18:	4b29      	ldr	r3, [pc, #164]	@ (8003ac0 <__sflush_r+0x108>)
 8003a1a:	410b      	asrs	r3, r1
 8003a1c:	07db      	lsls	r3, r3, #31
 8003a1e:	d442      	bmi.n	8003aa6 <__sflush_r+0xee>
 8003a20:	2300      	movs	r3, #0
 8003a22:	6063      	str	r3, [r4, #4]
 8003a24:	6923      	ldr	r3, [r4, #16]
 8003a26:	6023      	str	r3, [r4, #0]
 8003a28:	04d2      	lsls	r2, r2, #19
 8003a2a:	d505      	bpl.n	8003a38 <__sflush_r+0x80>
 8003a2c:	1c43      	adds	r3, r0, #1
 8003a2e:	d102      	bne.n	8003a36 <__sflush_r+0x7e>
 8003a30:	682b      	ldr	r3, [r5, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d100      	bne.n	8003a38 <__sflush_r+0x80>
 8003a36:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a3a:	602e      	str	r6, [r5, #0]
 8003a3c:	2900      	cmp	r1, #0
 8003a3e:	d017      	beq.n	8003a70 <__sflush_r+0xb8>
 8003a40:	0023      	movs	r3, r4
 8003a42:	3344      	adds	r3, #68	@ 0x44
 8003a44:	4299      	cmp	r1, r3
 8003a46:	d002      	beq.n	8003a4e <__sflush_r+0x96>
 8003a48:	0028      	movs	r0, r5
 8003a4a:	f7ff fbf7 	bl	800323c <_free_r>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a52:	e00d      	b.n	8003a70 <__sflush_r+0xb8>
 8003a54:	2301      	movs	r3, #1
 8003a56:	0028      	movs	r0, r5
 8003a58:	47b8      	blx	r7
 8003a5a:	0002      	movs	r2, r0
 8003a5c:	1c43      	adds	r3, r0, #1
 8003a5e:	d1c6      	bne.n	80039ee <__sflush_r+0x36>
 8003a60:	682b      	ldr	r3, [r5, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0c3      	beq.n	80039ee <__sflush_r+0x36>
 8003a66:	2b1d      	cmp	r3, #29
 8003a68:	d001      	beq.n	8003a6e <__sflush_r+0xb6>
 8003a6a:	2b16      	cmp	r3, #22
 8003a6c:	d11a      	bne.n	8003aa4 <__sflush_r+0xec>
 8003a6e:	602e      	str	r6, [r5, #0]
 8003a70:	2000      	movs	r0, #0
 8003a72:	e01e      	b.n	8003ab2 <__sflush_r+0xfa>
 8003a74:	690e      	ldr	r6, [r1, #16]
 8003a76:	2e00      	cmp	r6, #0
 8003a78:	d0fa      	beq.n	8003a70 <__sflush_r+0xb8>
 8003a7a:	680f      	ldr	r7, [r1, #0]
 8003a7c:	600e      	str	r6, [r1, #0]
 8003a7e:	1bba      	subs	r2, r7, r6
 8003a80:	9201      	str	r2, [sp, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	079b      	lsls	r3, r3, #30
 8003a86:	d100      	bne.n	8003a8a <__sflush_r+0xd2>
 8003a88:	694a      	ldr	r2, [r1, #20]
 8003a8a:	60a2      	str	r2, [r4, #8]
 8003a8c:	9b01      	ldr	r3, [sp, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	ddee      	ble.n	8003a70 <__sflush_r+0xb8>
 8003a92:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003a94:	0032      	movs	r2, r6
 8003a96:	001f      	movs	r7, r3
 8003a98:	0028      	movs	r0, r5
 8003a9a:	9b01      	ldr	r3, [sp, #4]
 8003a9c:	6a21      	ldr	r1, [r4, #32]
 8003a9e:	47b8      	blx	r7
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	dc07      	bgt.n	8003ab4 <__sflush_r+0xfc>
 8003aa4:	89a2      	ldrh	r2, [r4, #12]
 8003aa6:	2340      	movs	r3, #64	@ 0x40
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	b21b      	sxth	r3, r3
 8003aae:	81a3      	strh	r3, [r4, #12]
 8003ab0:	4240      	negs	r0, r0
 8003ab2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ab4:	9b01      	ldr	r3, [sp, #4]
 8003ab6:	1836      	adds	r6, r6, r0
 8003ab8:	1a1b      	subs	r3, r3, r0
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	e7e6      	b.n	8003a8c <__sflush_r+0xd4>
 8003abe:	46c0      	nop			@ (mov r8, r8)
 8003ac0:	dfbffffe 	.word	0xdfbffffe

08003ac4 <_fflush_r>:
 8003ac4:	690b      	ldr	r3, [r1, #16]
 8003ac6:	b570      	push	{r4, r5, r6, lr}
 8003ac8:	0005      	movs	r5, r0
 8003aca:	000c      	movs	r4, r1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d102      	bne.n	8003ad6 <_fflush_r+0x12>
 8003ad0:	2500      	movs	r5, #0
 8003ad2:	0028      	movs	r0, r5
 8003ad4:	bd70      	pop	{r4, r5, r6, pc}
 8003ad6:	2800      	cmp	r0, #0
 8003ad8:	d004      	beq.n	8003ae4 <_fflush_r+0x20>
 8003ada:	6a03      	ldr	r3, [r0, #32]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <_fflush_r+0x20>
 8003ae0:	f7ff fa98 	bl	8003014 <__sinit>
 8003ae4:	220c      	movs	r2, #12
 8003ae6:	5ea3      	ldrsh	r3, [r4, r2]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0f1      	beq.n	8003ad0 <_fflush_r+0xc>
 8003aec:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003aee:	07d2      	lsls	r2, r2, #31
 8003af0:	d404      	bmi.n	8003afc <_fflush_r+0x38>
 8003af2:	059b      	lsls	r3, r3, #22
 8003af4:	d402      	bmi.n	8003afc <_fflush_r+0x38>
 8003af6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003af8:	f7ff fb9d 	bl	8003236 <__retarget_lock_acquire_recursive>
 8003afc:	0028      	movs	r0, r5
 8003afe:	0021      	movs	r1, r4
 8003b00:	f7ff ff5a 	bl	80039b8 <__sflush_r>
 8003b04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b06:	0005      	movs	r5, r0
 8003b08:	07db      	lsls	r3, r3, #31
 8003b0a:	d4e2      	bmi.n	8003ad2 <_fflush_r+0xe>
 8003b0c:	89a3      	ldrh	r3, [r4, #12]
 8003b0e:	059b      	lsls	r3, r3, #22
 8003b10:	d4df      	bmi.n	8003ad2 <_fflush_r+0xe>
 8003b12:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b14:	f7ff fb90 	bl	8003238 <__retarget_lock_release_recursive>
 8003b18:	e7db      	b.n	8003ad2 <_fflush_r+0xe>

08003b1a <__swbuf_r>:
 8003b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1c:	0006      	movs	r6, r0
 8003b1e:	000d      	movs	r5, r1
 8003b20:	0014      	movs	r4, r2
 8003b22:	2800      	cmp	r0, #0
 8003b24:	d004      	beq.n	8003b30 <__swbuf_r+0x16>
 8003b26:	6a03      	ldr	r3, [r0, #32]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <__swbuf_r+0x16>
 8003b2c:	f7ff fa72 	bl	8003014 <__sinit>
 8003b30:	69a3      	ldr	r3, [r4, #24]
 8003b32:	60a3      	str	r3, [r4, #8]
 8003b34:	89a3      	ldrh	r3, [r4, #12]
 8003b36:	071b      	lsls	r3, r3, #28
 8003b38:	d502      	bpl.n	8003b40 <__swbuf_r+0x26>
 8003b3a:	6923      	ldr	r3, [r4, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d109      	bne.n	8003b54 <__swbuf_r+0x3a>
 8003b40:	0021      	movs	r1, r4
 8003b42:	0030      	movs	r0, r6
 8003b44:	f000 f82c 	bl	8003ba0 <__swsetup_r>
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d003      	beq.n	8003b54 <__swbuf_r+0x3a>
 8003b4c:	2501      	movs	r5, #1
 8003b4e:	426d      	negs	r5, r5
 8003b50:	0028      	movs	r0, r5
 8003b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b54:	6923      	ldr	r3, [r4, #16]
 8003b56:	6820      	ldr	r0, [r4, #0]
 8003b58:	b2ef      	uxtb	r7, r5
 8003b5a:	1ac0      	subs	r0, r0, r3
 8003b5c:	6963      	ldr	r3, [r4, #20]
 8003b5e:	b2ed      	uxtb	r5, r5
 8003b60:	4283      	cmp	r3, r0
 8003b62:	dc05      	bgt.n	8003b70 <__swbuf_r+0x56>
 8003b64:	0021      	movs	r1, r4
 8003b66:	0030      	movs	r0, r6
 8003b68:	f7ff ffac 	bl	8003ac4 <_fflush_r>
 8003b6c:	2800      	cmp	r0, #0
 8003b6e:	d1ed      	bne.n	8003b4c <__swbuf_r+0x32>
 8003b70:	68a3      	ldr	r3, [r4, #8]
 8003b72:	3001      	adds	r0, #1
 8003b74:	3b01      	subs	r3, #1
 8003b76:	60a3      	str	r3, [r4, #8]
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	6022      	str	r2, [r4, #0]
 8003b7e:	701f      	strb	r7, [r3, #0]
 8003b80:	6963      	ldr	r3, [r4, #20]
 8003b82:	4283      	cmp	r3, r0
 8003b84:	d004      	beq.n	8003b90 <__swbuf_r+0x76>
 8003b86:	89a3      	ldrh	r3, [r4, #12]
 8003b88:	07db      	lsls	r3, r3, #31
 8003b8a:	d5e1      	bpl.n	8003b50 <__swbuf_r+0x36>
 8003b8c:	2d0a      	cmp	r5, #10
 8003b8e:	d1df      	bne.n	8003b50 <__swbuf_r+0x36>
 8003b90:	0021      	movs	r1, r4
 8003b92:	0030      	movs	r0, r6
 8003b94:	f7ff ff96 	bl	8003ac4 <_fflush_r>
 8003b98:	2800      	cmp	r0, #0
 8003b9a:	d0d9      	beq.n	8003b50 <__swbuf_r+0x36>
 8003b9c:	e7d6      	b.n	8003b4c <__swbuf_r+0x32>
	...

08003ba0 <__swsetup_r>:
 8003ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8003c58 <__swsetup_r+0xb8>)
 8003ba2:	b570      	push	{r4, r5, r6, lr}
 8003ba4:	0005      	movs	r5, r0
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	000c      	movs	r4, r1
 8003baa:	2800      	cmp	r0, #0
 8003bac:	d004      	beq.n	8003bb8 <__swsetup_r+0x18>
 8003bae:	6a03      	ldr	r3, [r0, #32]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <__swsetup_r+0x18>
 8003bb4:	f7ff fa2e 	bl	8003014 <__sinit>
 8003bb8:	230c      	movs	r3, #12
 8003bba:	5ee2      	ldrsh	r2, [r4, r3]
 8003bbc:	0713      	lsls	r3, r2, #28
 8003bbe:	d423      	bmi.n	8003c08 <__swsetup_r+0x68>
 8003bc0:	06d3      	lsls	r3, r2, #27
 8003bc2:	d407      	bmi.n	8003bd4 <__swsetup_r+0x34>
 8003bc4:	2309      	movs	r3, #9
 8003bc6:	602b      	str	r3, [r5, #0]
 8003bc8:	2340      	movs	r3, #64	@ 0x40
 8003bca:	2001      	movs	r0, #1
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	81a3      	strh	r3, [r4, #12]
 8003bd0:	4240      	negs	r0, r0
 8003bd2:	e03a      	b.n	8003c4a <__swsetup_r+0xaa>
 8003bd4:	0752      	lsls	r2, r2, #29
 8003bd6:	d513      	bpl.n	8003c00 <__swsetup_r+0x60>
 8003bd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bda:	2900      	cmp	r1, #0
 8003bdc:	d008      	beq.n	8003bf0 <__swsetup_r+0x50>
 8003bde:	0023      	movs	r3, r4
 8003be0:	3344      	adds	r3, #68	@ 0x44
 8003be2:	4299      	cmp	r1, r3
 8003be4:	d002      	beq.n	8003bec <__swsetup_r+0x4c>
 8003be6:	0028      	movs	r0, r5
 8003be8:	f7ff fb28 	bl	800323c <_free_r>
 8003bec:	2300      	movs	r3, #0
 8003bee:	6363      	str	r3, [r4, #52]	@ 0x34
 8003bf0:	2224      	movs	r2, #36	@ 0x24
 8003bf2:	89a3      	ldrh	r3, [r4, #12]
 8003bf4:	4393      	bics	r3, r2
 8003bf6:	81a3      	strh	r3, [r4, #12]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	6063      	str	r3, [r4, #4]
 8003bfc:	6923      	ldr	r3, [r4, #16]
 8003bfe:	6023      	str	r3, [r4, #0]
 8003c00:	2308      	movs	r3, #8
 8003c02:	89a2      	ldrh	r2, [r4, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	81a3      	strh	r3, [r4, #12]
 8003c08:	6923      	ldr	r3, [r4, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10b      	bne.n	8003c26 <__swsetup_r+0x86>
 8003c0e:	21a0      	movs	r1, #160	@ 0xa0
 8003c10:	2280      	movs	r2, #128	@ 0x80
 8003c12:	89a3      	ldrh	r3, [r4, #12]
 8003c14:	0089      	lsls	r1, r1, #2
 8003c16:	0092      	lsls	r2, r2, #2
 8003c18:	400b      	ands	r3, r1
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d003      	beq.n	8003c26 <__swsetup_r+0x86>
 8003c1e:	0021      	movs	r1, r4
 8003c20:	0028      	movs	r0, r5
 8003c22:	f000 f863 	bl	8003cec <__smakebuf_r>
 8003c26:	230c      	movs	r3, #12
 8003c28:	5ee2      	ldrsh	r2, [r4, r3]
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	0013      	movs	r3, r2
 8003c2e:	400b      	ands	r3, r1
 8003c30:	420a      	tst	r2, r1
 8003c32:	d00b      	beq.n	8003c4c <__swsetup_r+0xac>
 8003c34:	2300      	movs	r3, #0
 8003c36:	60a3      	str	r3, [r4, #8]
 8003c38:	6963      	ldr	r3, [r4, #20]
 8003c3a:	425b      	negs	r3, r3
 8003c3c:	61a3      	str	r3, [r4, #24]
 8003c3e:	2000      	movs	r0, #0
 8003c40:	6923      	ldr	r3, [r4, #16]
 8003c42:	4283      	cmp	r3, r0
 8003c44:	d101      	bne.n	8003c4a <__swsetup_r+0xaa>
 8003c46:	0613      	lsls	r3, r2, #24
 8003c48:	d4be      	bmi.n	8003bc8 <__swsetup_r+0x28>
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}
 8003c4c:	0791      	lsls	r1, r2, #30
 8003c4e:	d400      	bmi.n	8003c52 <__swsetup_r+0xb2>
 8003c50:	6963      	ldr	r3, [r4, #20]
 8003c52:	60a3      	str	r3, [r4, #8]
 8003c54:	e7f3      	b.n	8003c3e <__swsetup_r+0x9e>
 8003c56:	46c0      	nop			@ (mov r8, r8)
 8003c58:	20000030 	.word	0x20000030

08003c5c <_sbrk_r>:
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	b570      	push	{r4, r5, r6, lr}
 8003c60:	4d06      	ldr	r5, [pc, #24]	@ (8003c7c <_sbrk_r+0x20>)
 8003c62:	0004      	movs	r4, r0
 8003c64:	0008      	movs	r0, r1
 8003c66:	602b      	str	r3, [r5, #0]
 8003c68:	f7fc fd68 	bl	800073c <_sbrk>
 8003c6c:	1c43      	adds	r3, r0, #1
 8003c6e:	d103      	bne.n	8003c78 <_sbrk_r+0x1c>
 8003c70:	682b      	ldr	r3, [r5, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d000      	beq.n	8003c78 <_sbrk_r+0x1c>
 8003c76:	6023      	str	r3, [r4, #0]
 8003c78:	bd70      	pop	{r4, r5, r6, pc}
 8003c7a:	46c0      	nop			@ (mov r8, r8)
 8003c7c:	200002fc 	.word	0x200002fc

08003c80 <memchr>:
 8003c80:	b2c9      	uxtb	r1, r1
 8003c82:	1882      	adds	r2, r0, r2
 8003c84:	4290      	cmp	r0, r2
 8003c86:	d101      	bne.n	8003c8c <memchr+0xc>
 8003c88:	2000      	movs	r0, #0
 8003c8a:	4770      	bx	lr
 8003c8c:	7803      	ldrb	r3, [r0, #0]
 8003c8e:	428b      	cmp	r3, r1
 8003c90:	d0fb      	beq.n	8003c8a <memchr+0xa>
 8003c92:	3001      	adds	r0, #1
 8003c94:	e7f6      	b.n	8003c84 <memchr+0x4>
	...

08003c98 <__swhatbuf_r>:
 8003c98:	b570      	push	{r4, r5, r6, lr}
 8003c9a:	000e      	movs	r6, r1
 8003c9c:	001d      	movs	r5, r3
 8003c9e:	230e      	movs	r3, #14
 8003ca0:	5ec9      	ldrsh	r1, [r1, r3]
 8003ca2:	0014      	movs	r4, r2
 8003ca4:	b096      	sub	sp, #88	@ 0x58
 8003ca6:	2900      	cmp	r1, #0
 8003ca8:	da0c      	bge.n	8003cc4 <__swhatbuf_r+0x2c>
 8003caa:	89b2      	ldrh	r2, [r6, #12]
 8003cac:	2380      	movs	r3, #128	@ 0x80
 8003cae:	0011      	movs	r1, r2
 8003cb0:	4019      	ands	r1, r3
 8003cb2:	421a      	tst	r2, r3
 8003cb4:	d114      	bne.n	8003ce0 <__swhatbuf_r+0x48>
 8003cb6:	2380      	movs	r3, #128	@ 0x80
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	2000      	movs	r0, #0
 8003cbc:	6029      	str	r1, [r5, #0]
 8003cbe:	6023      	str	r3, [r4, #0]
 8003cc0:	b016      	add	sp, #88	@ 0x58
 8003cc2:	bd70      	pop	{r4, r5, r6, pc}
 8003cc4:	466a      	mov	r2, sp
 8003cc6:	f000 f853 	bl	8003d70 <_fstat_r>
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	dbed      	blt.n	8003caa <__swhatbuf_r+0x12>
 8003cce:	23f0      	movs	r3, #240	@ 0xf0
 8003cd0:	9901      	ldr	r1, [sp, #4]
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	4019      	ands	r1, r3
 8003cd6:	4b04      	ldr	r3, [pc, #16]	@ (8003ce8 <__swhatbuf_r+0x50>)
 8003cd8:	18c9      	adds	r1, r1, r3
 8003cda:	424b      	negs	r3, r1
 8003cdc:	4159      	adcs	r1, r3
 8003cde:	e7ea      	b.n	8003cb6 <__swhatbuf_r+0x1e>
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	2340      	movs	r3, #64	@ 0x40
 8003ce4:	e7e9      	b.n	8003cba <__swhatbuf_r+0x22>
 8003ce6:	46c0      	nop			@ (mov r8, r8)
 8003ce8:	ffffe000 	.word	0xffffe000

08003cec <__smakebuf_r>:
 8003cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cee:	2602      	movs	r6, #2
 8003cf0:	898b      	ldrh	r3, [r1, #12]
 8003cf2:	0005      	movs	r5, r0
 8003cf4:	000c      	movs	r4, r1
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	4233      	tst	r3, r6
 8003cfa:	d007      	beq.n	8003d0c <__smakebuf_r+0x20>
 8003cfc:	0023      	movs	r3, r4
 8003cfe:	3347      	adds	r3, #71	@ 0x47
 8003d00:	6023      	str	r3, [r4, #0]
 8003d02:	6123      	str	r3, [r4, #16]
 8003d04:	2301      	movs	r3, #1
 8003d06:	6163      	str	r3, [r4, #20]
 8003d08:	b005      	add	sp, #20
 8003d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d0c:	ab03      	add	r3, sp, #12
 8003d0e:	aa02      	add	r2, sp, #8
 8003d10:	f7ff ffc2 	bl	8003c98 <__swhatbuf_r>
 8003d14:	9f02      	ldr	r7, [sp, #8]
 8003d16:	9001      	str	r0, [sp, #4]
 8003d18:	0039      	movs	r1, r7
 8003d1a:	0028      	movs	r0, r5
 8003d1c:	f7ff fafa 	bl	8003314 <_malloc_r>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	d108      	bne.n	8003d36 <__smakebuf_r+0x4a>
 8003d24:	220c      	movs	r2, #12
 8003d26:	5ea3      	ldrsh	r3, [r4, r2]
 8003d28:	059a      	lsls	r2, r3, #22
 8003d2a:	d4ed      	bmi.n	8003d08 <__smakebuf_r+0x1c>
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	4393      	bics	r3, r2
 8003d30:	431e      	orrs	r6, r3
 8003d32:	81a6      	strh	r6, [r4, #12]
 8003d34:	e7e2      	b.n	8003cfc <__smakebuf_r+0x10>
 8003d36:	2380      	movs	r3, #128	@ 0x80
 8003d38:	89a2      	ldrh	r2, [r4, #12]
 8003d3a:	6020      	str	r0, [r4, #0]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	81a3      	strh	r3, [r4, #12]
 8003d40:	9b03      	ldr	r3, [sp, #12]
 8003d42:	6120      	str	r0, [r4, #16]
 8003d44:	6167      	str	r7, [r4, #20]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00c      	beq.n	8003d64 <__smakebuf_r+0x78>
 8003d4a:	0028      	movs	r0, r5
 8003d4c:	230e      	movs	r3, #14
 8003d4e:	5ee1      	ldrsh	r1, [r4, r3]
 8003d50:	f000 f820 	bl	8003d94 <_isatty_r>
 8003d54:	2800      	cmp	r0, #0
 8003d56:	d005      	beq.n	8003d64 <__smakebuf_r+0x78>
 8003d58:	2303      	movs	r3, #3
 8003d5a:	89a2      	ldrh	r2, [r4, #12]
 8003d5c:	439a      	bics	r2, r3
 8003d5e:	3b02      	subs	r3, #2
 8003d60:	4313      	orrs	r3, r2
 8003d62:	81a3      	strh	r3, [r4, #12]
 8003d64:	89a3      	ldrh	r3, [r4, #12]
 8003d66:	9a01      	ldr	r2, [sp, #4]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	81a3      	strh	r3, [r4, #12]
 8003d6c:	e7cc      	b.n	8003d08 <__smakebuf_r+0x1c>
	...

08003d70 <_fstat_r>:
 8003d70:	2300      	movs	r3, #0
 8003d72:	b570      	push	{r4, r5, r6, lr}
 8003d74:	4d06      	ldr	r5, [pc, #24]	@ (8003d90 <_fstat_r+0x20>)
 8003d76:	0004      	movs	r4, r0
 8003d78:	0008      	movs	r0, r1
 8003d7a:	0011      	movs	r1, r2
 8003d7c:	602b      	str	r3, [r5, #0]
 8003d7e:	f7fc fcbb 	bl	80006f8 <_fstat>
 8003d82:	1c43      	adds	r3, r0, #1
 8003d84:	d103      	bne.n	8003d8e <_fstat_r+0x1e>
 8003d86:	682b      	ldr	r3, [r5, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d000      	beq.n	8003d8e <_fstat_r+0x1e>
 8003d8c:	6023      	str	r3, [r4, #0]
 8003d8e:	bd70      	pop	{r4, r5, r6, pc}
 8003d90:	200002fc 	.word	0x200002fc

08003d94 <_isatty_r>:
 8003d94:	2300      	movs	r3, #0
 8003d96:	b570      	push	{r4, r5, r6, lr}
 8003d98:	4d06      	ldr	r5, [pc, #24]	@ (8003db4 <_isatty_r+0x20>)
 8003d9a:	0004      	movs	r4, r0
 8003d9c:	0008      	movs	r0, r1
 8003d9e:	602b      	str	r3, [r5, #0]
 8003da0:	f7fc fcb8 	bl	8000714 <_isatty>
 8003da4:	1c43      	adds	r3, r0, #1
 8003da6:	d103      	bne.n	8003db0 <_isatty_r+0x1c>
 8003da8:	682b      	ldr	r3, [r5, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d000      	beq.n	8003db0 <_isatty_r+0x1c>
 8003dae:	6023      	str	r3, [r4, #0]
 8003db0:	bd70      	pop	{r4, r5, r6, pc}
 8003db2:	46c0      	nop			@ (mov r8, r8)
 8003db4:	200002fc 	.word	0x200002fc

08003db8 <_init>:
 8003db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dbe:	bc08      	pop	{r3}
 8003dc0:	469e      	mov	lr, r3
 8003dc2:	4770      	bx	lr

08003dc4 <_fini>:
 8003dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc6:	46c0      	nop			@ (mov r8, r8)
 8003dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dca:	bc08      	pop	{r3}
 8003dcc:	469e      	mov	lr, r3
 8003dce:	4770      	bx	lr
